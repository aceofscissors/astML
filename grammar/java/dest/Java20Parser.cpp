
// Generated from ./Java20Parser.g4 by ANTLR 4.13.2


#include "Java20ParserVisitor.h"

#include "Java20Parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct Java20ParserStaticData final {
  Java20ParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Java20ParserStaticData(const Java20ParserStaticData&) = delete;
  Java20ParserStaticData(Java20ParserStaticData&&) = delete;
  Java20ParserStaticData& operator=(const Java20ParserStaticData&) = delete;
  Java20ParserStaticData& operator=(Java20ParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag java20parserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<Java20ParserStaticData> java20parserParserStaticData = nullptr;

void java20parserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (java20parserParserStaticData != nullptr) {
    return;
  }
#else
  assert(java20parserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Java20ParserStaticData>(
    std::vector<std::string>{
      "start_", "literal", "typeIdentifier", "unqualifiedMethodIdentifier", 
      "primitiveType", "numericType", "integralType", "floatingPointType", 
      "referenceType", "coit", "classOrInterfaceType", "classType", "interfaceType", 
      "typeVariable", "arrayType", "dims", "typeParameter", "typeParameterModifier", 
      "typeBound", "additionalBound", "typeArguments", "typeArgumentList", 
      "typeArgument", "wildcard", "wildcardBounds", "moduleName", "packageName", 
      "typeName", "packageOrTypeName", "expressionName", "methodName", "ambiguousName", 
      "compilationUnit", "ordinaryCompilationUnit", "modularCompilationUnit", 
      "packageDeclaration", "packageModifier", "importDeclaration", "singleTypeImportDeclaration", 
      "typeImportOnDemandDeclaration", "singleStaticImportDeclaration", 
      "staticImportOnDemandDeclaration", "topLevelClassOrInterfaceDeclaration", 
      "moduleDeclaration", "moduleDirective", "requiresModifier", "classDeclaration", 
      "normalClassDeclaration", "classModifier", "typeParameters", "typeParameterList", 
      "classExtends", "classImplements", "interfaceTypeList", "classPermits", 
      "classBody", "classBodyDeclaration", "classMemberDeclaration", "fieldDeclaration", 
      "fieldModifier", "variableDeclaratorList", "variableDeclarator", "variableDeclaratorId", 
      "variableInitializer", "unannType", "unannPrimitiveType", "unannReferenceType", 
      "unannClassOrInterfaceType", "uCOIT", "unannClassType", "unannInterfaceType", 
      "unannTypeVariable", "unannArrayType", "methodDeclaration", "methodModifier", 
      "methodHeader", "result", "methodDeclarator", "receiverParameter", 
      "formalParameterList", "formalParameter", "variableArityParameter", 
      "variableModifier", "throwsT", "exceptionTypeList", "exceptionType", 
      "methodBody", "instanceInitializer", "staticInitializer", "constructorDeclaration", 
      "constructorModifier", "constructorDeclarator", "simpleTypeName", 
      "constructorBody", "explicitConstructorInvocation", "enumDeclaration", 
      "enumBody", "enumConstantList", "enumConstant", "enumConstantModifier", 
      "enumBodyDeclarations", "recordDeclaration", "recordHeader", "recordComponentList", 
      "recordComponent", "variableArityRecordComponent", "recordComponentModifier", 
      "recordBody", "recordBodyDeclaration", "compactConstructorDeclaration", 
      "interfaceDeclaration", "normalInterfaceDeclaration", "interfaceModifier", 
      "interfaceExtends", "interfacePermits", "interfaceBody", "interfaceMemberDeclaration", 
      "constantDeclaration", "constantModifier", "interfaceMethodDeclaration", 
      "interfaceMethodModifier", "annotationInterfaceDeclaration", "annotationInterfaceBody", 
      "annotationInterfaceMemberDeclaration", "annotationInterfaceElementDeclaration", 
      "annotationInterfaceElementModifier", "defaultValue", "annotation", 
      "normalAnnotation", "elementValuePairList", "elementValuePair", "elementValue", 
      "elementValueArrayInitializer", "elementValueList", "markerAnnotation", 
      "singleElementAnnotation", "arrayInitializer", "variableInitializerList", 
      "block", "blockStatements", "blockStatement", "localClassOrInterfaceDeclaration", 
      "localVariableDeclaration", "localVariableType", "localVariableDeclarationStatement", 
      "statement", "statementNoShortIf", "statementWithoutTrailingSubstatement", 
      "emptyStatement_", "labeledStatement", "labeledStatementNoShortIf", 
      "expressionStatement", "statementExpression", "ifThenStatement", "ifThenElseStatement", 
      "ifThenElseStatementNoShortIf", "assertStatement", "switchStatement", 
      "switchBlock", "switchRule", "switchBlockStatementGroup", "switchLabel", 
      "caseConstant", "whileStatement", "whileStatementNoShortIf", "doStatement", 
      "forStatement", "forStatementNoShortIf", "basicForStatement", "basicForStatementNoShortIf", 
      "forInit", "forUpdate", "statementExpressionList", "enhancedForStatement", 
      "enhancedForStatementNoShortIf", "breakStatement", "continueStatement", 
      "returnStatement", "throwStatement", "synchronizedStatement", "tryStatement", 
      "catches", "catchClause", "catchFormalParameter", "catchType", "finallyBlock", 
      "tryWithResourcesStatement", "resourceSpecification", "resourceList", 
      "resource", "variableAccess", "yieldStatement", "pattern", "typePattern", 
      "expression", "primary", "primaryNoNewArray", "pNNA", "classLiteral", 
      "classInstanceCreationExpression", "unqualifiedClassInstanceCreationExpression", 
      "classOrInterfaceTypeToInstantiate", "typeArgumentsOrDiamond", "arrayCreationExpression", 
      "arrayCreationExpressionWithoutInitializer", "arrayCreationExpressionWithInitializer", 
      "dimExprs", "dimExpr", "arrayAccess", "fieldAccess", "methodInvocation", 
      "argumentList", "methodReference", "postfixExpression", "pfE", "postIncrementExpression", 
      "postDecrementExpression", "unaryExpression", "preIncrementExpression", 
      "preDecrementExpression", "unaryExpressionNotPlusMinus", "castExpression", 
      "multiplicativeExpression", "additiveExpression", "shiftExpression", 
      "relationalExpression", "equalityExpression", "andExpression", "exclusiveOrExpression", 
      "inclusiveOrExpression", "conditionalAndExpression", "conditionalOrExpression", 
      "conditionalExpression", "assignmentExpression", "assignment", "leftHandSide", 
      "assignmentOperator", "lambdaExpression", "lambdaParameters", "lambdaParameterList", 
      "lambdaParameter", "lambdaParameterType", "lambdaBody", "switchExpression", 
      "constantExpression"
    },
    std::vector<std::string>{
      "", "'exports'", "'module'", "'non-sealed'", "'<>'", "'open'", "'opens'", 
      "'permits'", "'provides'", "'record'", "'requires'", "'sealed'", "'to'", 
      "'transitive'", "'uses'", "'var'", "'with'", "'yield'", "'abstract'", 
      "'assert'", "'boolean'", "'break'", "'byte'", "'case'", "'catch'", 
      "'char'", "'class'", "'const'", "'continue'", "'default'", "'do'", 
      "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
      "'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", 
      "'instanceof'", "'int'", "'interface'", "'long'", "'native'", "'new'", 
      "'package'", "'private'", "'protected'", "'public'", "'return'", "'short'", 
      "'static'", "'strictfp'", "'super'", "'switch'", "'synchronized'", 
      "'this'", "'throw'", "'throws'", "'transient'", "'try'", "'void'", 
      "'volatile'", "'while'", "'_'", "", "", "", "", "", "", "'null'", 
      "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "'...'", 
      "'@'", "'::'", "'='", "'>'", "'<'", "'!'", "'~'", "'\\u003F'", "':'", 
      "'->'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", 
      "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", 
      "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", 
      "'>>>='"
    },
    std::vector<std::string>{
      "", "EXPORTS", "MODULE", "NONSEALED", "OACA", "OPEN", "OPENS", "PERMITS", 
      "PROVIDES", "RECORD", "REQUIRES", "SEALED", "TO", "TRANSITIVE", "USES", 
      "VAR", "WITH", "YIELD", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
      "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", 
      "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", 
      "FOR", "IF", "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
      "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", "PROTECTED", 
      "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", 
      "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", 
      "VOLATILE", "WHILE", "UNDER_SCORE", "IntegerLiteral", "FloatingPointLiteral", 
      "BooleanLiteral", "CharacterLiteral", "StringLiteral", "TextBlock", 
      "NullLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
      "SEMI", "COMMA", "DOT", "ELLIPSIS", "AT", "COLONCOLON", "ASSIGN", 
      "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "ARROW", "EQUAL", 
      "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
      "DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
      "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
      "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
      "Identifier", "WS", "COMMENT", "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,126,2946,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,
  	7,242,2,243,7,243,2,244,7,244,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
  	5,4,501,8,4,10,4,12,4,504,9,4,1,4,1,4,3,4,508,8,4,1,5,1,5,3,5,512,8,5,
  	1,6,1,6,1,7,1,7,1,8,1,8,1,8,3,8,521,8,8,1,9,1,9,5,9,525,8,9,10,9,12,9,
  	528,9,9,1,9,1,9,3,9,532,8,9,1,9,3,9,535,8,9,1,10,1,10,1,10,3,10,540,8,
  	10,1,10,5,10,543,8,10,10,10,12,10,546,9,10,1,10,1,10,3,10,550,8,10,1,
  	10,3,10,553,8,10,1,11,5,11,556,8,11,10,11,12,11,559,9,11,1,11,1,11,3,
  	11,563,8,11,1,11,1,11,1,11,5,11,568,8,11,10,11,12,11,571,9,11,1,11,1,
  	11,3,11,575,8,11,1,11,1,11,1,11,5,11,580,8,11,10,11,12,11,583,9,11,1,
  	11,1,11,3,11,587,8,11,3,11,589,8,11,1,12,1,12,1,13,5,13,594,8,13,10,13,
  	12,13,597,9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	3,14,610,8,14,1,15,5,15,613,8,15,10,15,12,15,616,9,15,1,15,1,15,1,15,
  	5,15,621,8,15,10,15,12,15,624,9,15,1,15,1,15,5,15,628,8,15,10,15,12,15,
  	631,9,15,1,16,5,16,634,8,16,10,16,12,16,637,9,16,1,16,1,16,3,16,641,8,
  	16,1,17,1,17,1,18,1,18,1,18,1,18,5,18,649,8,18,10,18,12,18,652,9,18,3,
  	18,654,8,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,5,21,666,
  	8,21,10,21,12,21,669,9,21,1,22,1,22,3,22,673,8,22,1,23,5,23,676,8,23,
  	10,23,12,23,679,9,23,1,23,1,23,3,23,683,8,23,1,24,1,24,1,24,1,24,3,24,
  	689,8,24,1,25,1,25,1,25,3,25,694,8,25,1,26,1,26,1,26,3,26,699,8,26,1,
  	27,1,27,1,27,3,27,704,8,27,1,28,1,28,1,28,3,28,709,8,28,1,29,1,29,1,29,
  	3,29,714,8,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,3,31,723,8,31,1,32,1,
  	32,3,32,727,8,32,1,33,3,33,730,8,33,1,33,5,33,733,8,33,10,33,12,33,736,
  	9,33,1,33,5,33,739,8,33,10,33,12,33,742,9,33,1,34,5,34,745,8,34,10,34,
  	12,34,748,9,34,1,34,1,34,1,35,5,35,753,8,35,10,35,12,35,756,9,35,1,35,
  	1,35,1,35,1,35,5,35,762,8,35,10,35,12,35,765,9,35,1,35,1,35,1,36,1,36,
  	1,37,1,37,1,37,1,37,3,37,775,8,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,
  	1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,
  	1,41,1,41,1,41,1,42,1,42,1,42,3,42,804,8,42,1,43,5,43,807,8,43,10,43,
  	12,43,810,9,43,1,43,3,43,813,8,43,1,43,1,43,1,43,1,43,5,43,819,8,43,10,
  	43,12,43,822,9,43,1,43,1,43,5,43,826,8,43,10,43,12,43,829,9,43,1,43,1,
  	43,1,44,1,44,5,44,835,8,44,10,44,12,44,838,9,44,1,44,1,44,1,44,1,44,1,
  	44,1,44,1,44,1,44,1,44,5,44,849,8,44,10,44,12,44,852,9,44,3,44,854,8,
  	44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,864,8,44,10,44,12,44,
  	867,9,44,3,44,869,8,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
  	44,1,44,1,44,5,44,883,8,44,10,44,12,44,886,9,44,1,44,1,44,3,44,890,8,
  	44,1,45,1,45,1,46,1,46,1,46,3,46,897,8,46,1,47,5,47,900,8,47,10,47,12,
  	47,903,9,47,1,47,1,47,1,47,3,47,908,8,47,1,47,3,47,911,8,47,1,47,3,47,
  	914,8,47,1,47,3,47,917,8,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,
  	48,1,48,1,48,1,48,3,48,931,8,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,5,
  	50,940,8,50,10,50,12,50,943,9,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,
  	53,1,53,5,53,954,8,53,10,53,12,53,957,9,53,1,54,1,54,1,54,1,54,5,54,963,
  	8,54,10,54,12,54,966,9,54,1,55,1,55,5,55,970,8,55,10,55,12,55,973,9,55,
  	1,55,1,55,1,56,1,56,1,56,1,56,3,56,981,8,56,1,57,1,57,1,57,1,57,1,57,
  	3,57,988,8,57,1,58,5,58,991,8,58,10,58,12,58,994,9,58,1,58,1,58,1,58,
  	1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1008,8,59,1,60,1,60,
  	1,60,5,60,1013,8,60,10,60,12,60,1016,9,60,1,61,1,61,1,61,3,61,1021,8,
  	61,1,62,1,62,3,62,1025,8,62,1,63,1,63,3,63,1029,8,63,1,64,1,64,3,64,1033,
  	8,64,1,65,1,65,3,65,1037,8,65,1,66,1,66,1,66,3,66,1042,8,66,1,67,1,67,
  	1,67,5,67,1047,8,67,10,67,12,67,1050,9,67,3,67,1052,8,67,1,67,1,67,3,
  	67,1056,8,67,1,67,3,67,1059,8,67,1,68,1,68,5,68,1063,8,68,10,68,12,68,
  	1066,9,68,1,68,1,68,3,68,1070,8,68,1,68,3,68,1073,8,68,1,69,1,69,3,69,
  	1077,8,69,1,69,1,69,3,69,1081,8,69,1,69,1,69,5,69,1085,8,69,10,69,12,
  	69,1088,9,69,1,69,1,69,3,69,1092,8,69,3,69,1094,8,69,1,70,1,70,1,71,1,
  	71,1,72,1,72,1,72,3,72,1103,8,72,1,72,1,72,1,73,5,73,1108,8,73,10,73,
  	12,73,1111,9,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
  	1,74,1,74,3,74,1126,8,74,1,75,1,75,5,75,1130,8,75,10,75,12,75,1133,9,
  	75,3,75,1135,8,75,1,75,1,75,1,75,3,75,1140,8,75,1,76,1,76,3,76,1144,8,
  	76,1,77,1,77,1,77,1,77,1,77,3,77,1151,8,77,1,77,3,77,1154,8,77,1,77,1,
  	77,3,77,1158,8,77,1,78,5,78,1161,8,78,10,78,12,78,1164,9,78,1,78,1,78,
  	1,78,3,78,1169,8,78,1,78,1,78,1,79,1,79,1,79,5,79,1176,8,79,10,79,12,
  	79,1179,9,79,1,80,5,80,1182,8,80,10,80,12,80,1185,9,80,1,80,1,80,1,80,
  	1,80,3,80,1191,8,80,1,81,5,81,1194,8,81,10,81,12,81,1197,9,81,1,81,1,
  	81,5,81,1201,8,81,10,81,12,81,1204,9,81,1,81,1,81,1,81,1,82,1,82,3,82,
  	1211,8,82,1,83,1,83,1,83,1,84,1,84,1,84,5,84,1219,8,84,10,84,12,84,1222,
  	9,84,1,85,1,85,3,85,1226,8,85,1,86,1,86,3,86,1230,8,86,1,87,1,87,1,88,
  	1,88,1,88,1,89,5,89,1238,8,89,10,89,12,89,1241,9,89,1,89,1,89,3,89,1245,
  	8,89,1,89,1,89,1,90,1,90,1,90,1,90,3,90,1253,8,90,1,91,3,91,1256,8,91,
  	1,91,1,91,1,91,1,91,1,91,3,91,1263,8,91,1,91,3,91,1266,8,91,1,91,1,91,
  	1,92,1,92,1,93,1,93,3,93,1274,8,93,1,93,3,93,1277,8,93,1,93,1,93,1,94,
  	3,94,1282,8,94,1,94,1,94,1,94,3,94,1287,8,94,1,94,1,94,1,94,1,94,3,94,
  	1293,8,94,1,94,1,94,3,94,1297,8,94,1,94,1,94,1,94,3,94,1302,8,94,1,94,
  	1,94,1,94,3,94,1307,8,94,1,95,5,95,1310,8,95,10,95,12,95,1313,9,95,1,
  	95,1,95,1,95,3,95,1318,8,95,1,95,1,95,1,96,1,96,3,96,1324,8,96,1,96,3,
  	96,1327,8,96,1,96,3,96,1330,8,96,1,96,1,96,1,97,1,97,1,97,5,97,1337,8,
  	97,10,97,12,97,1340,9,97,1,98,5,98,1343,8,98,10,98,12,98,1346,9,98,1,
  	98,1,98,1,98,3,98,1351,8,98,1,98,3,98,1354,8,98,1,98,3,98,1357,8,98,1,
  	99,1,99,1,100,1,100,5,100,1363,8,100,10,100,12,100,1366,9,100,1,101,5,
  	101,1369,8,101,10,101,12,101,1372,9,101,1,101,1,101,1,101,3,101,1377,
  	8,101,1,101,1,101,3,101,1381,8,101,1,101,1,101,1,102,1,102,3,102,1387,
  	8,102,1,102,1,102,1,103,1,103,1,103,5,103,1394,8,103,10,103,12,103,1397,
  	9,103,1,104,5,104,1400,8,104,10,104,12,104,1403,9,104,1,104,1,104,1,104,
  	1,104,3,104,1409,8,104,1,105,5,105,1412,8,105,10,105,12,105,1415,9,105,
  	1,105,1,105,5,105,1419,8,105,10,105,12,105,1422,9,105,1,105,1,105,1,105,
  	1,106,1,106,1,107,1,107,5,107,1431,8,107,10,107,12,107,1434,9,107,1,107,
  	1,107,1,108,1,108,3,108,1440,8,108,1,109,5,109,1443,8,109,10,109,12,109,
  	1446,9,109,1,109,1,109,1,109,1,110,1,110,3,110,1453,8,110,1,111,5,111,
  	1456,8,111,10,111,12,111,1459,9,111,1,111,1,111,1,111,3,111,1464,8,111,
  	1,111,3,111,1467,8,111,1,111,3,111,1470,8,111,1,111,1,111,1,112,1,112,
  	1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,1483,8,112,1,113,1,113,
  	1,113,1,114,1,114,1,114,1,114,5,114,1492,8,114,10,114,12,114,1495,9,114,
  	1,115,1,115,5,115,1499,8,115,10,115,12,115,1502,9,115,1,115,1,115,1,116,
  	1,116,1,116,1,116,1,116,3,116,1511,8,116,1,117,5,117,1514,8,117,10,117,
  	12,117,1517,9,117,1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,3,118,
  	1527,8,118,1,119,5,119,1530,8,119,10,119,12,119,1533,9,119,1,119,1,119,
  	1,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,1545,8,120,1,121,
  	5,121,1548,8,121,10,121,12,121,1551,9,121,1,121,1,121,1,121,1,121,1,121,
  	1,122,1,122,5,122,1560,8,122,10,122,12,122,1563,9,122,1,122,1,122,1,123,
  	1,123,1,123,1,123,1,123,3,123,1572,8,123,1,124,5,124,1575,8,124,10,124,
  	12,124,1578,9,124,1,124,1,124,1,124,1,124,1,124,3,124,1585,8,124,1,124,
  	3,124,1588,8,124,1,124,1,124,1,125,1,125,1,125,3,125,1595,8,125,1,126,
  	1,126,1,126,1,127,1,127,1,127,3,127,1603,8,127,1,128,1,128,1,128,1,128,
  	3,128,1609,8,128,1,128,1,128,1,129,1,129,1,129,5,129,1616,8,129,10,129,
  	12,129,1619,9,129,1,130,1,130,1,130,1,130,1,131,1,131,1,131,3,131,1628,
  	8,131,1,132,1,132,3,132,1632,8,132,1,132,3,132,1635,8,132,1,132,1,132,
  	1,133,1,133,1,133,5,133,1642,8,133,10,133,12,133,1645,9,133,1,134,1,134,
  	1,134,1,135,1,135,1,135,1,135,1,135,1,135,1,136,1,136,3,136,1658,8,136,
  	1,136,3,136,1661,8,136,1,136,1,136,1,137,1,137,1,137,5,137,1668,8,137,
  	10,137,12,137,1671,9,137,1,138,1,138,3,138,1675,8,138,1,138,1,138,1,139,
  	1,139,5,139,1681,8,139,10,139,12,139,1684,9,139,1,140,1,140,1,140,3,140,
  	1689,8,140,1,141,1,141,3,141,1693,8,141,1,142,5,142,1696,8,142,10,142,
  	12,142,1699,9,142,1,142,1,142,3,142,1703,8,142,1,143,1,143,3,143,1707,
  	8,143,1,144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,1,145,3,145,1718,
  	8,145,1,146,1,146,1,146,1,146,1,146,3,146,1725,8,146,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,1740,
  	8,147,1,148,1,148,1,149,1,149,1,149,1,149,1,150,1,150,1,150,1,150,1,151,
  	1,151,1,151,1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,1762,8,152,
  	1,153,1,153,1,153,1,153,1,153,1,153,1,154,1,154,1,154,1,154,1,154,1,154,
  	1,154,1,154,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,156,1,156,
  	1,156,1,156,3,156,1790,8,156,1,156,1,156,1,157,1,157,1,157,1,157,1,157,
  	1,157,1,158,1,158,1,158,5,158,1803,8,158,10,158,12,158,1806,9,158,1,158,
  	1,158,1,158,1,158,5,158,1812,8,158,10,158,12,158,1815,9,158,1,158,1,158,
  	1,158,5,158,1820,8,158,10,158,12,158,1823,9,158,1,158,3,158,1826,8,158,
  	1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,1835,8,159,1,160,1,160,
  	1,160,1,160,1,160,5,160,1842,8,160,10,160,12,160,1845,9,160,1,160,1,160,
  	1,161,1,161,1,161,1,161,5,161,1853,8,161,10,161,12,161,1856,9,161,1,161,
  	3,161,1859,8,161,1,162,1,162,1,163,1,163,1,163,1,163,1,163,1,163,1,164,
  	1,164,1,164,1,164,1,164,1,164,1,165,1,165,1,165,1,165,1,165,1,165,1,165,
  	1,165,1,166,1,166,3,166,1885,8,166,1,167,1,167,3,167,1889,8,167,1,168,
  	1,168,1,168,3,168,1894,8,168,1,168,1,168,3,168,1898,8,168,1,168,1,168,
  	3,168,1902,8,168,1,168,1,168,1,168,1,169,1,169,1,169,3,169,1910,8,169,
  	1,169,1,169,3,169,1914,8,169,1,169,1,169,3,169,1918,8,169,1,169,1,169,
  	1,169,1,170,1,170,3,170,1925,8,170,1,171,1,171,1,172,1,172,1,172,5,172,
  	1932,8,172,10,172,12,172,1935,9,172,1,173,1,173,1,173,1,173,1,173,1,173,
  	1,173,1,173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,175,1,175,
  	3,175,1955,8,175,1,175,1,175,1,176,1,176,3,176,1961,8,176,1,176,1,176,
  	1,177,1,177,3,177,1967,8,177,1,177,1,177,1,178,1,178,1,178,1,178,1,179,
  	1,179,1,179,1,179,1,179,1,179,1,180,1,180,1,180,1,180,1,180,1,180,1,180,
  	1,180,1,180,1,180,1,180,3,180,1992,8,180,1,180,1,180,1,180,3,180,1997,
  	8,180,1,181,1,181,5,181,2001,8,181,10,181,12,181,2004,9,181,1,182,1,182,
  	1,182,1,182,1,182,1,182,1,183,5,183,2013,8,183,10,183,12,183,2016,9,183,
  	1,183,1,183,1,183,1,184,1,184,1,184,5,184,2024,8,184,10,184,12,184,2027,
  	9,184,1,185,1,185,1,185,1,186,1,186,1,186,1,186,3,186,2036,8,186,1,186,
  	3,186,2039,8,186,1,187,1,187,1,187,3,187,2044,8,187,1,187,1,187,1,188,
  	1,188,1,188,5,188,2051,8,188,10,188,12,188,2054,9,188,1,189,1,189,3,189,
  	2058,8,189,1,190,1,190,3,190,2062,8,190,1,191,1,191,1,191,1,191,1,192,
  	1,192,1,193,1,193,1,194,1,194,3,194,2074,8,194,1,195,1,195,3,195,2078,
  	8,195,1,196,1,196,3,196,2082,8,196,1,196,1,196,3,196,2086,8,196,1,196,
  	1,196,3,196,2090,8,196,1,196,1,196,1,196,1,196,3,196,2096,8,196,1,196,
  	1,196,1,196,1,196,3,196,2102,8,196,1,196,1,196,3,196,2106,8,196,1,196,
  	1,196,1,196,1,196,3,196,2112,8,196,1,196,1,196,1,196,1,196,3,196,2118,
  	8,196,1,196,1,196,1,196,1,196,3,196,2124,8,196,1,196,1,196,1,196,1,196,
  	3,196,2130,8,196,1,196,1,196,1,196,1,196,1,196,1,196,3,196,2138,8,196,
  	1,196,1,196,1,196,1,196,1,196,3,196,2145,8,196,1,196,1,196,1,196,1,196,
  	1,196,3,196,2152,8,196,1,196,1,196,1,196,3,196,2157,8,196,1,196,1,196,
  	3,196,2161,8,196,1,196,1,196,1,196,3,196,2166,8,196,1,196,1,196,1,196,
  	3,196,2171,8,196,1,196,1,196,3,196,2175,8,196,1,196,1,196,1,196,3,196,
  	2180,8,196,1,196,1,196,1,196,3,196,2185,8,196,1,196,1,196,3,196,2189,
  	8,196,1,196,1,196,1,196,3,196,2194,8,196,1,196,1,196,1,196,3,196,2199,
  	8,196,1,196,1,196,3,196,2203,8,196,1,196,1,196,1,196,3,196,2208,8,196,
  	1,196,1,196,1,196,3,196,2213,8,196,1,196,1,196,3,196,2217,8,196,1,196,
  	1,196,1,196,1,196,1,196,3,196,2224,8,196,1,196,1,196,1,196,3,196,2229,
  	8,196,1,196,1,196,3,196,2233,8,196,1,196,1,196,1,196,3,196,2238,8,196,
  	1,196,1,196,3,196,2242,8,196,1,196,1,196,1,196,3,196,2247,8,196,1,196,
  	1,196,3,196,2251,8,196,1,196,1,196,1,196,3,196,2256,8,196,1,196,1,196,
  	3,196,2260,8,196,1,196,1,196,1,196,3,196,2265,8,196,1,196,1,196,3,196,
  	2269,8,196,1,196,1,196,1,196,1,196,1,196,3,196,2276,8,196,1,196,1,196,
  	3,196,2280,8,196,1,196,1,196,1,196,3,196,2285,8,196,1,196,1,196,3,196,
  	2289,8,196,1,196,1,196,1,196,1,196,3,196,2295,8,196,3,196,2297,8,196,
  	1,197,1,197,1,197,3,197,2302,8,197,1,197,1,197,1,197,3,197,2307,8,197,
  	1,197,1,197,1,197,1,197,3,197,2313,8,197,1,197,1,197,3,197,2317,8,197,
  	1,197,1,197,1,197,3,197,2322,8,197,1,197,1,197,3,197,2326,8,197,1,197,
  	1,197,3,197,2330,8,197,1,197,1,197,3,197,2334,8,197,3,197,2336,8,197,
  	1,198,1,198,1,198,5,198,2341,8,198,10,198,12,198,2344,9,198,1,198,1,198,
  	1,198,1,198,1,198,1,198,5,198,2352,8,198,10,198,12,198,2355,9,198,1,198,
  	1,198,1,198,1,198,1,198,1,198,5,198,2363,8,198,10,198,12,198,2366,9,198,
  	1,198,1,198,1,198,1,198,1,198,3,198,2373,8,198,1,199,1,199,1,199,1,199,
  	1,199,1,199,1,199,1,199,1,199,3,199,2384,8,199,1,200,1,200,3,200,2388,
  	8,200,1,200,1,200,1,200,3,200,2393,8,200,1,200,1,200,3,200,2397,8,200,
  	1,201,5,201,2400,8,201,10,201,12,201,2403,9,201,1,201,1,201,1,201,5,201,
  	2408,8,201,10,201,12,201,2411,9,201,1,201,5,201,2414,8,201,10,201,12,
  	201,2417,9,201,1,201,3,201,2420,8,201,1,202,1,202,3,202,2424,8,202,1,
  	203,1,203,3,203,2428,8,203,1,204,1,204,1,204,1,204,3,204,2434,8,204,1,
  	204,1,204,1,204,1,204,3,204,2440,8,204,3,204,2442,8,204,1,205,1,205,1,
  	205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,3,205,2454,8,205,1,206,
  	1,206,5,206,2458,8,206,10,206,12,206,2461,9,206,1,207,5,207,2464,8,207,
  	10,207,12,207,2467,9,207,1,207,1,207,1,207,1,207,1,208,1,208,1,208,1,
  	208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,
  	3,208,2488,8,208,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
  	1,209,1,209,1,209,1,209,3,209,2503,8,209,1,210,1,210,1,210,3,210,2508,
  	8,210,1,210,1,210,1,210,1,210,1,210,3,210,2515,8,210,1,210,1,210,1,210,
  	3,210,2520,8,210,1,210,1,210,1,210,1,210,1,210,3,210,2527,8,210,1,210,
  	1,210,1,210,3,210,2532,8,210,1,210,1,210,1,210,1,210,1,210,3,210,2539,
  	8,210,1,210,1,210,1,210,3,210,2544,8,210,1,210,1,210,1,210,1,210,1,210,
  	3,210,2551,8,210,1,210,1,210,1,210,3,210,2556,8,210,1,210,1,210,1,210,
  	1,210,1,210,1,210,3,210,2564,8,210,1,210,1,210,1,210,3,210,2569,8,210,
  	1,210,1,210,3,210,2573,8,210,1,211,1,211,1,211,5,211,2578,8,211,10,211,
  	12,211,2581,9,211,1,212,1,212,1,212,3,212,2586,8,212,1,212,1,212,1,212,
  	1,212,1,212,3,212,2593,8,212,1,212,1,212,1,212,1,212,1,212,3,212,2600,
  	8,212,1,212,1,212,1,212,1,212,1,212,3,212,2607,8,212,1,212,1,212,1,212,
  	1,212,1,212,1,212,3,212,2615,8,212,1,212,1,212,1,212,1,212,1,212,3,212,
  	2622,8,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,2630,8,212,1,213,
  	1,213,3,213,2634,8,213,1,213,1,213,3,213,2638,8,213,3,213,2640,8,213,
  	1,214,1,214,3,214,2644,8,214,1,214,1,214,3,214,2648,8,214,3,214,2650,
  	8,214,1,215,1,215,1,215,1,216,1,216,1,216,1,217,1,217,1,217,1,217,1,217,
  	1,217,1,217,3,217,2665,8,217,1,218,1,218,1,218,1,219,1,219,1,219,1,220,
  	1,220,1,220,1,220,1,220,1,220,1,220,3,220,2680,8,220,1,221,1,221,1,221,
  	1,221,1,221,1,221,1,221,1,221,5,221,2690,8,221,10,221,12,221,2693,9,221,
  	1,221,1,221,1,221,1,221,1,221,1,221,5,221,2701,8,221,10,221,12,221,2704,
  	9,221,1,221,1,221,1,221,3,221,2709,8,221,1,222,1,222,1,222,1,222,1,222,
  	1,222,1,222,1,222,1,222,1,222,1,222,1,222,5,222,2723,8,222,10,222,12,
  	222,2726,9,222,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,
  	5,223,2737,8,223,10,223,12,223,2740,9,223,1,224,1,224,1,224,1,224,1,224,
  	1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,5,224,
  	2758,8,224,10,224,12,224,2761,9,224,1,225,1,225,1,225,1,225,1,225,1,225,
  	1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,
  	1,225,3,225,2782,8,225,5,225,2784,8,225,10,225,12,225,2787,9,225,1,226,
  	1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,5,226,2798,8,226,10,226,
  	12,226,2801,9,226,1,227,1,227,1,227,1,227,1,227,1,227,5,227,2809,8,227,
  	10,227,12,227,2812,9,227,1,228,1,228,1,228,1,228,1,228,1,228,5,228,2820,
  	8,228,10,228,12,228,2823,9,228,1,229,1,229,1,229,1,229,1,229,1,229,5,
  	229,2831,8,229,10,229,12,229,2834,9,229,1,230,1,230,1,230,1,230,1,230,
  	1,230,5,230,2842,8,230,10,230,12,230,2845,9,230,1,231,1,231,1,231,1,231,
  	1,231,1,231,5,231,2853,8,231,10,231,12,231,2856,9,231,1,232,1,232,1,232,
  	1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,3,232,2871,
  	8,232,1,233,1,233,3,233,2875,8,233,1,234,1,234,1,234,1,234,1,235,1,235,
  	1,235,3,235,2884,8,235,1,236,1,236,1,237,1,237,1,237,1,237,1,238,1,238,
  	3,238,2894,8,238,1,238,1,238,3,238,2898,8,238,1,239,1,239,1,239,5,239,
  	2903,8,239,10,239,12,239,2906,9,239,1,239,1,239,1,239,5,239,2911,8,239,
  	10,239,12,239,2914,9,239,3,239,2916,8,239,1,240,5,240,2919,8,240,10,240,
  	12,240,2922,9,240,1,240,1,240,1,240,1,240,3,240,2928,8,240,1,241,1,241,
  	3,241,2932,8,241,1,242,1,242,3,242,2936,8,242,1,243,1,243,1,243,1,243,
  	1,243,1,243,1,244,1,244,1,244,0,10,444,446,448,450,452,454,456,458,460,
  	462,245,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
  	44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
  	90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
  	128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
  	164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
  	200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
  	236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
  	272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
  	308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
  	344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
  	380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,
  	416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,
  	452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,
  	488,0,6,1,0,69,75,5,0,22,22,25,25,44,44,46,46,54,54,2,0,31,31,37,37,2,
  	0,13,13,55,55,2,0,57,57,60,60,2,0,88,88,112,122,3206,0,490,1,0,0,0,2,
  	493,1,0,0,0,4,495,1,0,0,0,6,497,1,0,0,0,8,502,1,0,0,0,10,511,1,0,0,0,
  	12,513,1,0,0,0,14,515,1,0,0,0,16,520,1,0,0,0,18,522,1,0,0,0,20,539,1,
  	0,0,0,22,588,1,0,0,0,24,590,1,0,0,0,26,595,1,0,0,0,28,609,1,0,0,0,30,
  	614,1,0,0,0,32,635,1,0,0,0,34,642,1,0,0,0,36,644,1,0,0,0,38,655,1,0,0,
  	0,40,658,1,0,0,0,42,662,1,0,0,0,44,672,1,0,0,0,46,677,1,0,0,0,48,688,
  	1,0,0,0,50,690,1,0,0,0,52,695,1,0,0,0,54,700,1,0,0,0,56,705,1,0,0,0,58,
  	713,1,0,0,0,60,717,1,0,0,0,62,719,1,0,0,0,64,726,1,0,0,0,66,729,1,0,0,
  	0,68,746,1,0,0,0,70,754,1,0,0,0,72,768,1,0,0,0,74,774,1,0,0,0,76,776,
  	1,0,0,0,78,780,1,0,0,0,80,786,1,0,0,0,82,793,1,0,0,0,84,803,1,0,0,0,86,
  	808,1,0,0,0,88,889,1,0,0,0,90,891,1,0,0,0,92,896,1,0,0,0,94,901,1,0,0,
  	0,96,930,1,0,0,0,98,932,1,0,0,0,100,936,1,0,0,0,102,944,1,0,0,0,104,947,
  	1,0,0,0,106,950,1,0,0,0,108,958,1,0,0,0,110,967,1,0,0,0,112,980,1,0,0,
  	0,114,987,1,0,0,0,116,992,1,0,0,0,118,1007,1,0,0,0,120,1009,1,0,0,0,122,
  	1017,1,0,0,0,124,1022,1,0,0,0,126,1028,1,0,0,0,128,1032,1,0,0,0,130,1036,
  	1,0,0,0,132,1041,1,0,0,0,134,1051,1,0,0,0,136,1060,1,0,0,0,138,1093,1,
  	0,0,0,140,1095,1,0,0,0,142,1097,1,0,0,0,144,1102,1,0,0,0,146,1109,1,0,
  	0,0,148,1125,1,0,0,0,150,1134,1,0,0,0,152,1143,1,0,0,0,154,1145,1,0,0,
  	0,156,1162,1,0,0,0,158,1172,1,0,0,0,160,1190,1,0,0,0,162,1195,1,0,0,0,
  	164,1210,1,0,0,0,166,1212,1,0,0,0,168,1215,1,0,0,0,170,1225,1,0,0,0,172,
  	1229,1,0,0,0,174,1231,1,0,0,0,176,1233,1,0,0,0,178,1239,1,0,0,0,180,1252,
  	1,0,0,0,182,1255,1,0,0,0,184,1269,1,0,0,0,186,1271,1,0,0,0,188,1306,1,
  	0,0,0,190,1311,1,0,0,0,192,1321,1,0,0,0,194,1333,1,0,0,0,196,1344,1,0,
  	0,0,198,1358,1,0,0,0,200,1360,1,0,0,0,202,1370,1,0,0,0,204,1384,1,0,0,
  	0,206,1390,1,0,0,0,208,1408,1,0,0,0,210,1413,1,0,0,0,212,1426,1,0,0,0,
  	214,1428,1,0,0,0,216,1439,1,0,0,0,218,1444,1,0,0,0,220,1452,1,0,0,0,222,
  	1457,1,0,0,0,224,1482,1,0,0,0,226,1484,1,0,0,0,228,1487,1,0,0,0,230,1496,
  	1,0,0,0,232,1510,1,0,0,0,234,1515,1,0,0,0,236,1526,1,0,0,0,238,1531,1,
  	0,0,0,240,1544,1,0,0,0,242,1549,1,0,0,0,244,1557,1,0,0,0,246,1571,1,0,
  	0,0,248,1576,1,0,0,0,250,1594,1,0,0,0,252,1596,1,0,0,0,254,1602,1,0,0,
  	0,256,1604,1,0,0,0,258,1612,1,0,0,0,260,1620,1,0,0,0,262,1627,1,0,0,0,
  	264,1629,1,0,0,0,266,1638,1,0,0,0,268,1646,1,0,0,0,270,1649,1,0,0,0,272,
  	1655,1,0,0,0,274,1664,1,0,0,0,276,1672,1,0,0,0,278,1678,1,0,0,0,280,1688,
  	1,0,0,0,282,1692,1,0,0,0,284,1697,1,0,0,0,286,1706,1,0,0,0,288,1708,1,
  	0,0,0,290,1717,1,0,0,0,292,1724,1,0,0,0,294,1739,1,0,0,0,296,1741,1,0,
  	0,0,298,1743,1,0,0,0,300,1747,1,0,0,0,302,1751,1,0,0,0,304,1761,1,0,0,
  	0,306,1763,1,0,0,0,308,1769,1,0,0,0,310,1777,1,0,0,0,312,1785,1,0,0,0,
  	314,1793,1,0,0,0,316,1825,1,0,0,0,318,1827,1,0,0,0,320,1836,1,0,0,0,322,
  	1858,1,0,0,0,324,1860,1,0,0,0,326,1862,1,0,0,0,328,1868,1,0,0,0,330,1874,
  	1,0,0,0,332,1884,1,0,0,0,334,1888,1,0,0,0,336,1890,1,0,0,0,338,1906,1,
  	0,0,0,340,1924,1,0,0,0,342,1926,1,0,0,0,344,1928,1,0,0,0,346,1936,1,0,
  	0,0,348,1944,1,0,0,0,350,1952,1,0,0,0,352,1958,1,0,0,0,354,1964,1,0,0,
  	0,356,1970,1,0,0,0,358,1974,1,0,0,0,360,1996,1,0,0,0,362,1998,1,0,0,0,
  	364,2005,1,0,0,0,366,2014,1,0,0,0,368,2020,1,0,0,0,370,2028,1,0,0,0,372,
  	2031,1,0,0,0,374,2040,1,0,0,0,376,2047,1,0,0,0,378,2057,1,0,0,0,380,2061,
  	1,0,0,0,382,2063,1,0,0,0,384,2067,1,0,0,0,386,2069,1,0,0,0,388,2073,1,
  	0,0,0,390,2077,1,0,0,0,392,2296,1,0,0,0,394,2335,1,0,0,0,396,2372,1,0,
  	0,0,398,2383,1,0,0,0,400,2385,1,0,0,0,402,2401,1,0,0,0,404,2423,1,0,0,
  	0,406,2427,1,0,0,0,408,2441,1,0,0,0,410,2453,1,0,0,0,412,2455,1,0,0,0,
  	414,2465,1,0,0,0,416,2487,1,0,0,0,418,2502,1,0,0,0,420,2572,1,0,0,0,422,
  	2574,1,0,0,0,424,2629,1,0,0,0,426,2639,1,0,0,0,428,2649,1,0,0,0,430,2651,
  	1,0,0,0,432,2654,1,0,0,0,434,2664,1,0,0,0,436,2666,1,0,0,0,438,2669,1,
  	0,0,0,440,2679,1,0,0,0,442,2708,1,0,0,0,444,2710,1,0,0,0,446,2727,1,0,
  	0,0,448,2741,1,0,0,0,450,2762,1,0,0,0,452,2788,1,0,0,0,454,2802,1,0,0,
  	0,456,2813,1,0,0,0,458,2824,1,0,0,0,460,2835,1,0,0,0,462,2846,1,0,0,0,
  	464,2870,1,0,0,0,466,2874,1,0,0,0,468,2876,1,0,0,0,470,2883,1,0,0,0,472,
  	2885,1,0,0,0,474,2887,1,0,0,0,476,2897,1,0,0,0,478,2915,1,0,0,0,480,2927,
  	1,0,0,0,482,2931,1,0,0,0,484,2935,1,0,0,0,486,2937,1,0,0,0,488,2943,1,
  	0,0,0,490,491,3,64,32,0,491,492,5,0,0,1,492,1,1,0,0,0,493,494,7,0,0,0,
  	494,3,1,0,0,0,495,496,5,123,0,0,496,5,1,0,0,0,497,498,5,123,0,0,498,7,
  	1,0,0,0,499,501,3,254,127,0,500,499,1,0,0,0,501,504,1,0,0,0,502,500,1,
  	0,0,0,502,503,1,0,0,0,503,507,1,0,0,0,504,502,1,0,0,0,505,508,3,10,5,
  	0,506,508,5,20,0,0,507,505,1,0,0,0,507,506,1,0,0,0,508,9,1,0,0,0,509,
  	512,3,12,6,0,510,512,3,14,7,0,511,509,1,0,0,0,511,510,1,0,0,0,512,11,
  	1,0,0,0,513,514,7,1,0,0,514,13,1,0,0,0,515,516,7,2,0,0,516,15,1,0,0,0,
  	517,521,3,20,10,0,518,521,3,26,13,0,519,521,3,28,14,0,520,517,1,0,0,0,
  	520,518,1,0,0,0,520,519,1,0,0,0,521,17,1,0,0,0,522,526,5,84,0,0,523,525,
  	3,254,127,0,524,523,1,0,0,0,525,528,1,0,0,0,526,524,1,0,0,0,526,527,1,
  	0,0,0,527,529,1,0,0,0,528,526,1,0,0,0,529,531,3,4,2,0,530,532,3,40,20,
  	0,531,530,1,0,0,0,531,532,1,0,0,0,532,534,1,0,0,0,533,535,3,18,9,0,534,
  	533,1,0,0,0,534,535,1,0,0,0,535,19,1,0,0,0,536,537,3,52,26,0,537,538,
  	5,84,0,0,538,540,1,0,0,0,539,536,1,0,0,0,539,540,1,0,0,0,540,544,1,0,
  	0,0,541,543,3,254,127,0,542,541,1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,
  	0,544,545,1,0,0,0,545,547,1,0,0,0,546,544,1,0,0,0,547,549,3,4,2,0,548,
  	550,3,40,20,0,549,548,1,0,0,0,549,550,1,0,0,0,550,552,1,0,0,0,551,553,
  	3,18,9,0,552,551,1,0,0,0,552,553,1,0,0,0,553,21,1,0,0,0,554,556,3,254,
  	127,0,555,554,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,
  	558,560,1,0,0,0,559,557,1,0,0,0,560,562,3,4,2,0,561,563,3,40,20,0,562,
  	561,1,0,0,0,562,563,1,0,0,0,563,589,1,0,0,0,564,565,3,52,26,0,565,569,
  	5,84,0,0,566,568,3,254,127,0,567,566,1,0,0,0,568,571,1,0,0,0,569,567,
  	1,0,0,0,569,570,1,0,0,0,570,572,1,0,0,0,571,569,1,0,0,0,572,574,3,4,2,
  	0,573,575,3,40,20,0,574,573,1,0,0,0,574,575,1,0,0,0,575,589,1,0,0,0,576,
  	577,3,20,10,0,577,581,5,84,0,0,578,580,3,254,127,0,579,578,1,0,0,0,580,
  	583,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,581,1,
  	0,0,0,584,586,3,4,2,0,585,587,3,40,20,0,586,585,1,0,0,0,586,587,1,0,0,
  	0,587,589,1,0,0,0,588,557,1,0,0,0,588,564,1,0,0,0,588,576,1,0,0,0,589,
  	23,1,0,0,0,590,591,3,22,11,0,591,25,1,0,0,0,592,594,3,254,127,0,593,592,
  	1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,598,1,0,0,
  	0,597,595,1,0,0,0,598,599,3,4,2,0,599,27,1,0,0,0,600,601,3,8,4,0,601,
  	602,3,30,15,0,602,610,1,0,0,0,603,604,3,22,11,0,604,605,3,30,15,0,605,
  	610,1,0,0,0,606,607,3,26,13,0,607,608,3,30,15,0,608,610,1,0,0,0,609,600,
  	1,0,0,0,609,603,1,0,0,0,609,606,1,0,0,0,610,29,1,0,0,0,611,613,3,254,
  	127,0,612,611,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,
  	615,617,1,0,0,0,616,614,1,0,0,0,617,618,5,80,0,0,618,629,5,81,0,0,619,
  	621,3,254,127,0,620,619,1,0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,622,623,
  	1,0,0,0,623,625,1,0,0,0,624,622,1,0,0,0,625,626,5,80,0,0,626,628,5,81,
  	0,0,627,622,1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,
  	31,1,0,0,0,631,629,1,0,0,0,632,634,3,34,17,0,633,632,1,0,0,0,634,637,
  	1,0,0,0,635,633,1,0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,635,1,0,0,
  	0,638,640,3,4,2,0,639,641,3,36,18,0,640,639,1,0,0,0,640,641,1,0,0,0,641,
  	33,1,0,0,0,642,643,3,254,127,0,643,35,1,0,0,0,644,653,5,34,0,0,645,654,
  	3,26,13,0,646,650,3,20,10,0,647,649,3,38,19,0,648,647,1,0,0,0,649,652,
  	1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,
  	0,653,645,1,0,0,0,653,646,1,0,0,0,654,37,1,0,0,0,655,656,5,108,0,0,656,
  	657,3,24,12,0,657,39,1,0,0,0,658,659,5,90,0,0,659,660,3,42,21,0,660,661,
  	5,89,0,0,661,41,1,0,0,0,662,667,3,44,22,0,663,664,5,83,0,0,664,666,3,
  	44,22,0,665,663,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,
  	0,668,43,1,0,0,0,669,667,1,0,0,0,670,673,3,16,8,0,671,673,3,46,23,0,672,
  	670,1,0,0,0,672,671,1,0,0,0,673,45,1,0,0,0,674,676,3,254,127,0,675,674,
  	1,0,0,0,676,679,1,0,0,0,677,675,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,
  	0,679,677,1,0,0,0,680,682,5,93,0,0,681,683,3,48,24,0,682,681,1,0,0,0,
  	682,683,1,0,0,0,683,47,1,0,0,0,684,685,5,34,0,0,685,689,3,16,8,0,686,
  	687,5,57,0,0,687,689,3,16,8,0,688,684,1,0,0,0,688,686,1,0,0,0,689,49,
  	1,0,0,0,690,693,5,123,0,0,691,692,5,84,0,0,692,694,3,50,25,0,693,691,
  	1,0,0,0,693,694,1,0,0,0,694,51,1,0,0,0,695,698,5,123,0,0,696,697,5,84,
  	0,0,697,699,3,52,26,0,698,696,1,0,0,0,698,699,1,0,0,0,699,53,1,0,0,0,
  	700,703,3,52,26,0,701,702,5,84,0,0,702,704,3,4,2,0,703,701,1,0,0,0,703,
  	704,1,0,0,0,704,55,1,0,0,0,705,708,5,123,0,0,706,707,5,84,0,0,707,709,
  	3,56,28,0,708,706,1,0,0,0,708,709,1,0,0,0,709,57,1,0,0,0,710,711,3,62,
  	31,0,711,712,5,84,0,0,712,714,1,0,0,0,713,710,1,0,0,0,713,714,1,0,0,0,
  	714,715,1,0,0,0,715,716,5,123,0,0,716,59,1,0,0,0,717,718,3,6,3,0,718,
  	61,1,0,0,0,719,722,5,123,0,0,720,721,5,84,0,0,721,723,3,62,31,0,722,720,
  	1,0,0,0,722,723,1,0,0,0,723,63,1,0,0,0,724,727,3,66,33,0,725,727,3,68,
  	34,0,726,724,1,0,0,0,726,725,1,0,0,0,727,65,1,0,0,0,728,730,3,70,35,0,
  	729,728,1,0,0,0,729,730,1,0,0,0,730,734,1,0,0,0,731,733,3,74,37,0,732,
  	731,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,740,1,
  	0,0,0,736,734,1,0,0,0,737,739,3,84,42,0,738,737,1,0,0,0,739,742,1,0,0,
  	0,740,738,1,0,0,0,740,741,1,0,0,0,741,67,1,0,0,0,742,740,1,0,0,0,743,
  	745,3,74,37,0,744,743,1,0,0,0,745,748,1,0,0,0,746,744,1,0,0,0,746,747,
  	1,0,0,0,747,749,1,0,0,0,748,746,1,0,0,0,749,750,3,86,43,0,750,69,1,0,
  	0,0,751,753,3,72,36,0,752,751,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,
  	754,755,1,0,0,0,755,757,1,0,0,0,756,754,1,0,0,0,757,758,5,49,0,0,758,
  	763,5,123,0,0,759,760,5,84,0,0,760,762,5,123,0,0,761,759,1,0,0,0,762,
  	765,1,0,0,0,763,761,1,0,0,0,763,764,1,0,0,0,764,766,1,0,0,0,765,763,1,
  	0,0,0,766,767,5,82,0,0,767,71,1,0,0,0,768,769,3,254,127,0,769,73,1,0,
  	0,0,770,775,3,76,38,0,771,775,3,78,39,0,772,775,3,80,40,0,773,775,3,82,
  	41,0,774,770,1,0,0,0,774,771,1,0,0,0,774,772,1,0,0,0,774,773,1,0,0,0,
  	775,75,1,0,0,0,776,777,5,42,0,0,777,778,3,54,27,0,778,779,5,82,0,0,779,
  	77,1,0,0,0,780,781,5,42,0,0,781,782,3,56,28,0,782,783,5,84,0,0,783,784,
  	5,106,0,0,784,785,5,82,0,0,785,79,1,0,0,0,786,787,5,42,0,0,787,788,5,
  	55,0,0,788,789,3,54,27,0,789,790,5,84,0,0,790,791,5,123,0,0,791,792,5,
  	82,0,0,792,81,1,0,0,0,793,794,5,42,0,0,794,795,5,55,0,0,795,796,3,54,
  	27,0,796,797,5,84,0,0,797,798,5,106,0,0,798,799,5,82,0,0,799,83,1,0,0,
  	0,800,804,3,92,46,0,801,804,3,220,110,0,802,804,5,82,0,0,803,800,1,0,
  	0,0,803,801,1,0,0,0,803,802,1,0,0,0,804,85,1,0,0,0,805,807,3,254,127,
  	0,806,805,1,0,0,0,807,810,1,0,0,0,808,806,1,0,0,0,808,809,1,0,0,0,809,
  	812,1,0,0,0,810,808,1,0,0,0,811,813,5,5,0,0,812,811,1,0,0,0,812,813,1,
  	0,0,0,813,814,1,0,0,0,814,815,5,2,0,0,815,820,5,123,0,0,816,817,5,84,
  	0,0,817,819,5,123,0,0,818,816,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,
  	820,821,1,0,0,0,821,823,1,0,0,0,822,820,1,0,0,0,823,827,5,78,0,0,824,
  	826,3,88,44,0,825,824,1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,
  	1,0,0,0,828,830,1,0,0,0,829,827,1,0,0,0,830,831,5,79,0,0,831,87,1,0,0,
  	0,832,836,5,10,0,0,833,835,3,90,45,0,834,833,1,0,0,0,835,838,1,0,0,0,
  	836,834,1,0,0,0,836,837,1,0,0,0,837,839,1,0,0,0,838,836,1,0,0,0,839,840,
  	3,50,25,0,840,841,5,82,0,0,841,890,1,0,0,0,842,843,5,1,0,0,843,853,3,
  	52,26,0,844,845,5,12,0,0,845,850,3,50,25,0,846,847,5,83,0,0,847,849,3,
  	50,25,0,848,846,1,0,0,0,849,852,1,0,0,0,850,848,1,0,0,0,850,851,1,0,0,
  	0,851,854,1,0,0,0,852,850,1,0,0,0,853,844,1,0,0,0,853,854,1,0,0,0,854,
  	855,1,0,0,0,855,856,5,82,0,0,856,890,1,0,0,0,857,858,5,6,0,0,858,868,
  	3,52,26,0,859,860,5,12,0,0,860,865,3,50,25,0,861,862,5,83,0,0,862,864,
  	3,50,25,0,863,861,1,0,0,0,864,867,1,0,0,0,865,863,1,0,0,0,865,866,1,0,
  	0,0,866,869,1,0,0,0,867,865,1,0,0,0,868,859,1,0,0,0,868,869,1,0,0,0,869,
  	870,1,0,0,0,870,871,5,82,0,0,871,890,1,0,0,0,872,873,5,14,0,0,873,874,
  	3,54,27,0,874,875,5,82,0,0,875,890,1,0,0,0,876,877,5,8,0,0,877,878,3,
  	54,27,0,878,879,5,16,0,0,879,884,3,54,27,0,880,881,5,83,0,0,881,883,3,
  	54,27,0,882,880,1,0,0,0,883,886,1,0,0,0,884,882,1,0,0,0,884,885,1,0,0,
  	0,885,887,1,0,0,0,886,884,1,0,0,0,887,888,5,82,0,0,888,890,1,0,0,0,889,
  	832,1,0,0,0,889,842,1,0,0,0,889,857,1,0,0,0,889,872,1,0,0,0,889,876,1,
  	0,0,0,890,89,1,0,0,0,891,892,7,3,0,0,892,91,1,0,0,0,893,897,3,94,47,0,
  	894,897,3,190,95,0,895,897,3,202,101,0,896,893,1,0,0,0,896,894,1,0,0,
  	0,896,895,1,0,0,0,897,93,1,0,0,0,898,900,3,96,48,0,899,898,1,0,0,0,900,
  	903,1,0,0,0,901,899,1,0,0,0,901,902,1,0,0,0,902,904,1,0,0,0,903,901,1,
  	0,0,0,904,905,5,26,0,0,905,907,3,4,2,0,906,908,3,98,49,0,907,906,1,0,
  	0,0,907,908,1,0,0,0,908,910,1,0,0,0,909,911,3,102,51,0,910,909,1,0,0,
  	0,910,911,1,0,0,0,911,913,1,0,0,0,912,914,3,104,52,0,913,912,1,0,0,0,
  	913,914,1,0,0,0,914,916,1,0,0,0,915,917,3,108,54,0,916,915,1,0,0,0,916,
  	917,1,0,0,0,917,918,1,0,0,0,918,919,3,110,55,0,919,95,1,0,0,0,920,931,
  	3,254,127,0,921,931,5,52,0,0,922,931,5,51,0,0,923,931,5,50,0,0,924,931,
  	5,18,0,0,925,931,5,55,0,0,926,931,5,35,0,0,927,931,5,11,0,0,928,931,5,
  	3,0,0,929,931,5,56,0,0,930,920,1,0,0,0,930,921,1,0,0,0,930,922,1,0,0,
  	0,930,923,1,0,0,0,930,924,1,0,0,0,930,925,1,0,0,0,930,926,1,0,0,0,930,
  	927,1,0,0,0,930,928,1,0,0,0,930,929,1,0,0,0,931,97,1,0,0,0,932,933,5,
  	90,0,0,933,934,3,100,50,0,934,935,5,89,0,0,935,99,1,0,0,0,936,941,3,32,
  	16,0,937,938,5,83,0,0,938,940,3,32,16,0,939,937,1,0,0,0,940,943,1,0,0,
  	0,941,939,1,0,0,0,941,942,1,0,0,0,942,101,1,0,0,0,943,941,1,0,0,0,944,
  	945,5,34,0,0,945,946,3,22,11,0,946,103,1,0,0,0,947,948,5,41,0,0,948,949,
  	3,106,53,0,949,105,1,0,0,0,950,955,3,24,12,0,951,952,5,83,0,0,952,954,
  	3,24,12,0,953,951,1,0,0,0,954,957,1,0,0,0,955,953,1,0,0,0,955,956,1,0,
  	0,0,956,107,1,0,0,0,957,955,1,0,0,0,958,959,5,7,0,0,959,964,3,54,27,0,
  	960,961,5,83,0,0,961,963,3,54,27,0,962,960,1,0,0,0,963,966,1,0,0,0,964,
  	962,1,0,0,0,964,965,1,0,0,0,965,109,1,0,0,0,966,964,1,0,0,0,967,971,5,
  	78,0,0,968,970,3,112,56,0,969,968,1,0,0,0,970,973,1,0,0,0,971,969,1,0,
  	0,0,971,972,1,0,0,0,972,974,1,0,0,0,973,971,1,0,0,0,974,975,5,79,0,0,
  	975,111,1,0,0,0,976,981,3,114,57,0,977,981,3,174,87,0,978,981,3,176,88,
  	0,979,981,3,178,89,0,980,976,1,0,0,0,980,977,1,0,0,0,980,978,1,0,0,0,
  	980,979,1,0,0,0,981,113,1,0,0,0,982,988,3,116,58,0,983,988,3,146,73,0,
  	984,988,3,92,46,0,985,988,3,220,110,0,986,988,5,82,0,0,987,982,1,0,0,
  	0,987,983,1,0,0,0,987,984,1,0,0,0,987,985,1,0,0,0,987,986,1,0,0,0,988,
  	115,1,0,0,0,989,991,3,118,59,0,990,989,1,0,0,0,991,994,1,0,0,0,992,990,
  	1,0,0,0,992,993,1,0,0,0,993,995,1,0,0,0,994,992,1,0,0,0,995,996,3,128,
  	64,0,996,997,3,120,60,0,997,998,5,82,0,0,998,117,1,0,0,0,999,1008,3,254,
  	127,0,1000,1008,5,52,0,0,1001,1008,5,51,0,0,1002,1008,5,50,0,0,1003,1008,
  	5,55,0,0,1004,1008,5,35,0,0,1005,1008,5,63,0,0,1006,1008,5,66,0,0,1007,
  	999,1,0,0,0,1007,1000,1,0,0,0,1007,1001,1,0,0,0,1007,1002,1,0,0,0,1007,
  	1003,1,0,0,0,1007,1004,1,0,0,0,1007,1005,1,0,0,0,1007,1006,1,0,0,0,1008,
  	119,1,0,0,0,1009,1014,3,122,61,0,1010,1011,5,83,0,0,1011,1013,3,122,61,
  	0,1012,1010,1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,
  	0,0,1015,121,1,0,0,0,1016,1014,1,0,0,0,1017,1020,3,124,62,0,1018,1019,
  	5,88,0,0,1019,1021,3,126,63,0,1020,1018,1,0,0,0,1020,1021,1,0,0,0,1021,
  	123,1,0,0,0,1022,1024,5,123,0,0,1023,1025,3,30,15,0,1024,1023,1,0,0,0,
  	1024,1025,1,0,0,0,1025,125,1,0,0,0,1026,1029,3,388,194,0,1027,1029,3,
  	272,136,0,1028,1026,1,0,0,0,1028,1027,1,0,0,0,1029,127,1,0,0,0,1030,1033,
  	3,130,65,0,1031,1033,3,132,66,0,1032,1030,1,0,0,0,1032,1031,1,0,0,0,1033,
  	129,1,0,0,0,1034,1037,3,10,5,0,1035,1037,5,20,0,0,1036,1034,1,0,0,0,1036,
  	1035,1,0,0,0,1037,131,1,0,0,0,1038,1042,3,134,67,0,1039,1042,3,142,71,
  	0,1040,1042,3,144,72,0,1041,1038,1,0,0,0,1041,1039,1,0,0,0,1041,1040,
  	1,0,0,0,1042,133,1,0,0,0,1043,1044,3,52,26,0,1044,1048,5,84,0,0,1045,
  	1047,3,254,127,0,1046,1045,1,0,0,0,1047,1050,1,0,0,0,1048,1046,1,0,0,
  	0,1048,1049,1,0,0,0,1049,1052,1,0,0,0,1050,1048,1,0,0,0,1051,1043,1,0,
  	0,0,1051,1052,1,0,0,0,1052,1053,1,0,0,0,1053,1055,3,4,2,0,1054,1056,3,
  	40,20,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,1058,1,0,0,0,1057,1059,
  	3,136,68,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,135,1,0,0,0,1060,
  	1064,5,84,0,0,1061,1063,3,254,127,0,1062,1061,1,0,0,0,1063,1066,1,0,0,
  	0,1064,1062,1,0,0,0,1064,1065,1,0,0,0,1065,1067,1,0,0,0,1066,1064,1,0,
  	0,0,1067,1069,3,4,2,0,1068,1070,3,40,20,0,1069,1068,1,0,0,0,1069,1070,
  	1,0,0,0,1070,1072,1,0,0,0,1071,1073,3,136,68,0,1072,1071,1,0,0,0,1072,
  	1073,1,0,0,0,1073,137,1,0,0,0,1074,1076,3,4,2,0,1075,1077,3,40,20,0,1076,
  	1075,1,0,0,0,1076,1077,1,0,0,0,1077,1094,1,0,0,0,1078,1081,3,52,26,0,
  	1079,1081,3,134,67,0,1080,1078,1,0,0,0,1080,1079,1,0,0,0,1081,1082,1,
  	0,0,0,1082,1086,5,84,0,0,1083,1085,3,254,127,0,1084,1083,1,0,0,0,1085,
  	1088,1,0,0,0,1086,1084,1,0,0,0,1086,1087,1,0,0,0,1087,1089,1,0,0,0,1088,
  	1086,1,0,0,0,1089,1091,3,4,2,0,1090,1092,3,40,20,0,1091,1090,1,0,0,0,
  	1091,1092,1,0,0,0,1092,1094,1,0,0,0,1093,1074,1,0,0,0,1093,1080,1,0,0,
  	0,1094,139,1,0,0,0,1095,1096,3,138,69,0,1096,141,1,0,0,0,1097,1098,3,
  	4,2,0,1098,143,1,0,0,0,1099,1103,3,130,65,0,1100,1103,3,134,67,0,1101,
  	1103,3,142,71,0,1102,1099,1,0,0,0,1102,1100,1,0,0,0,1102,1101,1,0,0,0,
  	1103,1104,1,0,0,0,1104,1105,3,30,15,0,1105,145,1,0,0,0,1106,1108,3,148,
  	74,0,1107,1106,1,0,0,0,1108,1111,1,0,0,0,1109,1107,1,0,0,0,1109,1110,
  	1,0,0,0,1110,1112,1,0,0,0,1111,1109,1,0,0,0,1112,1113,3,150,75,0,1113,
  	1114,3,172,86,0,1114,147,1,0,0,0,1115,1126,3,254,127,0,1116,1126,5,52,
  	0,0,1117,1126,5,51,0,0,1118,1126,5,50,0,0,1119,1126,5,18,0,0,1120,1126,
  	5,55,0,0,1121,1126,5,35,0,0,1122,1126,5,59,0,0,1123,1126,5,47,0,0,1124,
  	1126,5,56,0,0,1125,1115,1,0,0,0,1125,1116,1,0,0,0,1125,1117,1,0,0,0,1125,
  	1118,1,0,0,0,1125,1119,1,0,0,0,1125,1120,1,0,0,0,1125,1121,1,0,0,0,1125,
  	1122,1,0,0,0,1125,1123,1,0,0,0,1125,1124,1,0,0,0,1126,149,1,0,0,0,1127,
  	1131,3,98,49,0,1128,1130,3,254,127,0,1129,1128,1,0,0,0,1130,1133,1,0,
  	0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,1135,1,0,0,0,1133,1131,1,
  	0,0,0,1134,1127,1,0,0,0,1134,1135,1,0,0,0,1135,1136,1,0,0,0,1136,1137,
  	3,152,76,0,1137,1139,3,154,77,0,1138,1140,3,166,83,0,1139,1138,1,0,0,
  	0,1139,1140,1,0,0,0,1140,151,1,0,0,0,1141,1144,3,128,64,0,1142,1144,5,
  	65,0,0,1143,1141,1,0,0,0,1143,1142,1,0,0,0,1144,153,1,0,0,0,1145,1146,
  	5,123,0,0,1146,1150,5,76,0,0,1147,1148,3,156,78,0,1148,1149,5,83,0,0,
  	1149,1151,1,0,0,0,1150,1147,1,0,0,0,1150,1151,1,0,0,0,1151,1153,1,0,0,
  	0,1152,1154,3,158,79,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1155,
  	1,0,0,0,1155,1157,5,77,0,0,1156,1158,3,30,15,0,1157,1156,1,0,0,0,1157,
  	1158,1,0,0,0,1158,155,1,0,0,0,1159,1161,3,254,127,0,1160,1159,1,0,0,0,
  	1161,1164,1,0,0,0,1162,1160,1,0,0,0,1162,1163,1,0,0,0,1163,1165,1,0,0,
  	0,1164,1162,1,0,0,0,1165,1168,3,128,64,0,1166,1167,5,123,0,0,1167,1169,
  	5,84,0,0,1168,1166,1,0,0,0,1168,1169,1,0,0,0,1169,1170,1,0,0,0,1170,1171,
  	5,60,0,0,1171,157,1,0,0,0,1172,1177,3,160,80,0,1173,1174,5,83,0,0,1174,
  	1176,3,160,80,0,1175,1173,1,0,0,0,1176,1179,1,0,0,0,1177,1175,1,0,0,0,
  	1177,1178,1,0,0,0,1178,159,1,0,0,0,1179,1177,1,0,0,0,1180,1182,3,164,
  	82,0,1181,1180,1,0,0,0,1182,1185,1,0,0,0,1183,1181,1,0,0,0,1183,1184,
  	1,0,0,0,1184,1186,1,0,0,0,1185,1183,1,0,0,0,1186,1187,3,128,64,0,1187,
  	1188,3,124,62,0,1188,1191,1,0,0,0,1189,1191,3,162,81,0,1190,1183,1,0,
  	0,0,1190,1189,1,0,0,0,1191,161,1,0,0,0,1192,1194,3,164,82,0,1193,1192,
  	1,0,0,0,1194,1197,1,0,0,0,1195,1193,1,0,0,0,1195,1196,1,0,0,0,1196,1198,
  	1,0,0,0,1197,1195,1,0,0,0,1198,1202,3,128,64,0,1199,1201,3,254,127,0,
  	1200,1199,1,0,0,0,1201,1204,1,0,0,0,1202,1200,1,0,0,0,1202,1203,1,0,0,
  	0,1203,1205,1,0,0,0,1204,1202,1,0,0,0,1205,1206,5,85,0,0,1206,1207,5,
  	123,0,0,1207,163,1,0,0,0,1208,1211,3,254,127,0,1209,1211,5,35,0,0,1210,
  	1208,1,0,0,0,1210,1209,1,0,0,0,1211,165,1,0,0,0,1212,1213,5,62,0,0,1213,
  	1214,3,168,84,0,1214,167,1,0,0,0,1215,1220,3,170,85,0,1216,1217,5,83,
  	0,0,1217,1219,3,170,85,0,1218,1216,1,0,0,0,1219,1222,1,0,0,0,1220,1218,
  	1,0,0,0,1220,1221,1,0,0,0,1221,169,1,0,0,0,1222,1220,1,0,0,0,1223,1226,
  	3,22,11,0,1224,1226,3,26,13,0,1225,1223,1,0,0,0,1225,1224,1,0,0,0,1226,
  	171,1,0,0,0,1227,1230,3,276,138,0,1228,1230,5,82,0,0,1229,1227,1,0,0,
  	0,1229,1228,1,0,0,0,1230,173,1,0,0,0,1231,1232,3,276,138,0,1232,175,1,
  	0,0,0,1233,1234,5,55,0,0,1234,1235,3,276,138,0,1235,177,1,0,0,0,1236,
  	1238,3,180,90,0,1237,1236,1,0,0,0,1238,1241,1,0,0,0,1239,1237,1,0,0,0,
  	1239,1240,1,0,0,0,1240,1242,1,0,0,0,1241,1239,1,0,0,0,1242,1244,3,182,
  	91,0,1243,1245,3,166,83,0,1244,1243,1,0,0,0,1244,1245,1,0,0,0,1245,1246,
  	1,0,0,0,1246,1247,3,186,93,0,1247,179,1,0,0,0,1248,1253,3,254,127,0,1249,
  	1253,5,52,0,0,1250,1253,5,51,0,0,1251,1253,5,50,0,0,1252,1248,1,0,0,0,
  	1252,1249,1,0,0,0,1252,1250,1,0,0,0,1252,1251,1,0,0,0,1253,181,1,0,0,
  	0,1254,1256,3,98,49,0,1255,1254,1,0,0,0,1255,1256,1,0,0,0,1256,1257,1,
  	0,0,0,1257,1258,3,184,92,0,1258,1262,5,76,0,0,1259,1260,3,156,78,0,1260,
  	1261,5,83,0,0,1261,1263,1,0,0,0,1262,1259,1,0,0,0,1262,1263,1,0,0,0,1263,
  	1265,1,0,0,0,1264,1266,3,158,79,0,1265,1264,1,0,0,0,1265,1266,1,0,0,0,
  	1266,1267,1,0,0,0,1267,1268,5,77,0,0,1268,183,1,0,0,0,1269,1270,3,4,2,
  	0,1270,185,1,0,0,0,1271,1273,5,78,0,0,1272,1274,3,188,94,0,1273,1272,
  	1,0,0,0,1273,1274,1,0,0,0,1274,1276,1,0,0,0,1275,1277,3,278,139,0,1276,
  	1275,1,0,0,0,1276,1277,1,0,0,0,1277,1278,1,0,0,0,1278,1279,5,79,0,0,1279,
  	187,1,0,0,0,1280,1282,3,40,20,0,1281,1280,1,0,0,0,1281,1282,1,0,0,0,1282,
  	1283,1,0,0,0,1283,1284,7,4,0,0,1284,1286,5,76,0,0,1285,1287,3,422,211,
  	0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,1287,1288,1,0,0,0,1288,1289,5,77,
  	0,0,1289,1307,5,82,0,0,1290,1293,3,58,29,0,1291,1293,3,390,195,0,1292,
  	1290,1,0,0,0,1292,1291,1,0,0,0,1293,1294,1,0,0,0,1294,1296,5,84,0,0,1295,
  	1297,3,40,20,0,1296,1295,1,0,0,0,1296,1297,1,0,0,0,1297,1298,1,0,0,0,
  	1298,1299,5,57,0,0,1299,1301,5,76,0,0,1300,1302,3,422,211,0,1301,1300,
  	1,0,0,0,1301,1302,1,0,0,0,1302,1303,1,0,0,0,1303,1304,5,77,0,0,1304,1305,
  	5,82,0,0,1305,1307,1,0,0,0,1306,1281,1,0,0,0,1306,1292,1,0,0,0,1307,189,
  	1,0,0,0,1308,1310,3,96,48,0,1309,1308,1,0,0,0,1310,1313,1,0,0,0,1311,
  	1309,1,0,0,0,1311,1312,1,0,0,0,1312,1314,1,0,0,0,1313,1311,1,0,0,0,1314,
  	1315,5,33,0,0,1315,1317,3,4,2,0,1316,1318,3,104,52,0,1317,1316,1,0,0,
  	0,1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1320,3,192,96,0,1320,191,1,
  	0,0,0,1321,1323,5,78,0,0,1322,1324,3,194,97,0,1323,1322,1,0,0,0,1323,
  	1324,1,0,0,0,1324,1326,1,0,0,0,1325,1327,5,83,0,0,1326,1325,1,0,0,0,1326,
  	1327,1,0,0,0,1327,1329,1,0,0,0,1328,1330,3,200,100,0,1329,1328,1,0,0,
  	0,1329,1330,1,0,0,0,1330,1331,1,0,0,0,1331,1332,5,79,0,0,1332,193,1,0,
  	0,0,1333,1338,3,196,98,0,1334,1335,5,83,0,0,1335,1337,3,196,98,0,1336,
  	1334,1,0,0,0,1337,1340,1,0,0,0,1338,1336,1,0,0,0,1338,1339,1,0,0,0,1339,
  	195,1,0,0,0,1340,1338,1,0,0,0,1341,1343,3,198,99,0,1342,1341,1,0,0,0,
  	1343,1346,1,0,0,0,1344,1342,1,0,0,0,1344,1345,1,0,0,0,1345,1347,1,0,0,
  	0,1346,1344,1,0,0,0,1347,1353,5,123,0,0,1348,1350,5,76,0,0,1349,1351,
  	3,422,211,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,1352,1,0,0,0,1352,
  	1354,5,77,0,0,1353,1348,1,0,0,0,1353,1354,1,0,0,0,1354,1356,1,0,0,0,1355,
  	1357,3,110,55,0,1356,1355,1,0,0,0,1356,1357,1,0,0,0,1357,197,1,0,0,0,
  	1358,1359,3,254,127,0,1359,199,1,0,0,0,1360,1364,5,82,0,0,1361,1363,3,
  	112,56,0,1362,1361,1,0,0,0,1363,1366,1,0,0,0,1364,1362,1,0,0,0,1364,1365,
  	1,0,0,0,1365,201,1,0,0,0,1366,1364,1,0,0,0,1367,1369,3,96,48,0,1368,1367,
  	1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,1370,1371,1,0,0,0,1371,1373,
  	1,0,0,0,1372,1370,1,0,0,0,1373,1374,5,9,0,0,1374,1376,3,4,2,0,1375,1377,
  	3,98,49,0,1376,1375,1,0,0,0,1376,1377,1,0,0,0,1377,1378,1,0,0,0,1378,
  	1380,3,204,102,0,1379,1381,3,104,52,0,1380,1379,1,0,0,0,1380,1381,1,0,
  	0,0,1381,1382,1,0,0,0,1382,1383,3,214,107,0,1383,203,1,0,0,0,1384,1386,
  	5,76,0,0,1385,1387,3,206,103,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,
  	1388,1,0,0,0,1388,1389,5,77,0,0,1389,205,1,0,0,0,1390,1395,3,208,104,
  	0,1391,1392,5,83,0,0,1392,1394,3,208,104,0,1393,1391,1,0,0,0,1394,1397,
  	1,0,0,0,1395,1393,1,0,0,0,1395,1396,1,0,0,0,1396,207,1,0,0,0,1397,1395,
  	1,0,0,0,1398,1400,3,212,106,0,1399,1398,1,0,0,0,1400,1403,1,0,0,0,1401,
  	1399,1,0,0,0,1401,1402,1,0,0,0,1402,1404,1,0,0,0,1403,1401,1,0,0,0,1404,
  	1405,3,128,64,0,1405,1406,5,123,0,0,1406,1409,1,0,0,0,1407,1409,3,210,
  	105,0,1408,1401,1,0,0,0,1408,1407,1,0,0,0,1409,209,1,0,0,0,1410,1412,
  	3,212,106,0,1411,1410,1,0,0,0,1412,1415,1,0,0,0,1413,1411,1,0,0,0,1413,
  	1414,1,0,0,0,1414,1416,1,0,0,0,1415,1413,1,0,0,0,1416,1420,3,128,64,0,
  	1417,1419,3,254,127,0,1418,1417,1,0,0,0,1419,1422,1,0,0,0,1420,1418,1,
  	0,0,0,1420,1421,1,0,0,0,1421,1423,1,0,0,0,1422,1420,1,0,0,0,1423,1424,
  	5,85,0,0,1424,1425,5,123,0,0,1425,211,1,0,0,0,1426,1427,3,254,127,0,1427,
  	213,1,0,0,0,1428,1432,5,78,0,0,1429,1431,3,216,108,0,1430,1429,1,0,0,
  	0,1431,1434,1,0,0,0,1432,1430,1,0,0,0,1432,1433,1,0,0,0,1433,1435,1,0,
  	0,0,1434,1432,1,0,0,0,1435,1436,5,79,0,0,1436,215,1,0,0,0,1437,1440,3,
  	112,56,0,1438,1440,3,218,109,0,1439,1437,1,0,0,0,1439,1438,1,0,0,0,1440,
  	217,1,0,0,0,1441,1443,3,180,90,0,1442,1441,1,0,0,0,1443,1446,1,0,0,0,
  	1444,1442,1,0,0,0,1444,1445,1,0,0,0,1445,1447,1,0,0,0,1446,1444,1,0,0,
  	0,1447,1448,3,184,92,0,1448,1449,3,186,93,0,1449,219,1,0,0,0,1450,1453,
  	3,222,111,0,1451,1453,3,242,121,0,1452,1450,1,0,0,0,1452,1451,1,0,0,0,
  	1453,221,1,0,0,0,1454,1456,3,224,112,0,1455,1454,1,0,0,0,1456,1459,1,
  	0,0,0,1457,1455,1,0,0,0,1457,1458,1,0,0,0,1458,1460,1,0,0,0,1459,1457,
  	1,0,0,0,1460,1461,5,45,0,0,1461,1463,3,4,2,0,1462,1464,3,98,49,0,1463,
  	1462,1,0,0,0,1463,1464,1,0,0,0,1464,1466,1,0,0,0,1465,1467,3,226,113,
  	0,1466,1465,1,0,0,0,1466,1467,1,0,0,0,1467,1469,1,0,0,0,1468,1470,3,228,
  	114,0,1469,1468,1,0,0,0,1469,1470,1,0,0,0,1470,1471,1,0,0,0,1471,1472,
  	3,230,115,0,1472,223,1,0,0,0,1473,1483,3,254,127,0,1474,1483,5,52,0,0,
  	1475,1483,5,51,0,0,1476,1483,5,50,0,0,1477,1483,5,18,0,0,1478,1483,5,
  	55,0,0,1479,1483,5,11,0,0,1480,1483,5,3,0,0,1481,1483,5,56,0,0,1482,1473,
  	1,0,0,0,1482,1474,1,0,0,0,1482,1475,1,0,0,0,1482,1476,1,0,0,0,1482,1477,
  	1,0,0,0,1482,1478,1,0,0,0,1482,1479,1,0,0,0,1482,1480,1,0,0,0,1482,1481,
  	1,0,0,0,1483,225,1,0,0,0,1484,1485,5,34,0,0,1485,1486,3,106,53,0,1486,
  	227,1,0,0,0,1487,1488,5,7,0,0,1488,1493,3,54,27,0,1489,1490,5,83,0,0,
  	1490,1492,3,54,27,0,1491,1489,1,0,0,0,1492,1495,1,0,0,0,1493,1491,1,0,
  	0,0,1493,1494,1,0,0,0,1494,229,1,0,0,0,1495,1493,1,0,0,0,1496,1500,5,
  	78,0,0,1497,1499,3,232,116,0,1498,1497,1,0,0,0,1499,1502,1,0,0,0,1500,
  	1498,1,0,0,0,1500,1501,1,0,0,0,1501,1503,1,0,0,0,1502,1500,1,0,0,0,1503,
  	1504,5,79,0,0,1504,231,1,0,0,0,1505,1511,3,234,117,0,1506,1511,3,238,
  	119,0,1507,1511,3,92,46,0,1508,1511,3,220,110,0,1509,1511,5,82,0,0,1510,
  	1505,1,0,0,0,1510,1506,1,0,0,0,1510,1507,1,0,0,0,1510,1508,1,0,0,0,1510,
  	1509,1,0,0,0,1511,233,1,0,0,0,1512,1514,3,236,118,0,1513,1512,1,0,0,0,
  	1514,1517,1,0,0,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,1518,1,0,0,
  	0,1517,1515,1,0,0,0,1518,1519,3,128,64,0,1519,1520,3,120,60,0,1520,1521,
  	5,82,0,0,1521,235,1,0,0,0,1522,1527,3,254,127,0,1523,1527,5,52,0,0,1524,
  	1527,5,55,0,0,1525,1527,5,35,0,0,1526,1522,1,0,0,0,1526,1523,1,0,0,0,
  	1526,1524,1,0,0,0,1526,1525,1,0,0,0,1527,237,1,0,0,0,1528,1530,3,240,
  	120,0,1529,1528,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,0,1531,1532,
  	1,0,0,0,1532,1534,1,0,0,0,1533,1531,1,0,0,0,1534,1535,3,150,75,0,1535,
  	1536,3,172,86,0,1536,239,1,0,0,0,1537,1545,3,254,127,0,1538,1545,5,52,
  	0,0,1539,1545,5,50,0,0,1540,1545,5,18,0,0,1541,1545,5,29,0,0,1542,1545,
  	5,55,0,0,1543,1545,5,56,0,0,1544,1537,1,0,0,0,1544,1538,1,0,0,0,1544,
  	1539,1,0,0,0,1544,1540,1,0,0,0,1544,1541,1,0,0,0,1544,1542,1,0,0,0,1544,
  	1543,1,0,0,0,1545,241,1,0,0,0,1546,1548,3,224,112,0,1547,1546,1,0,0,0,
  	1548,1551,1,0,0,0,1549,1547,1,0,0,0,1549,1550,1,0,0,0,1550,1552,1,0,0,
  	0,1551,1549,1,0,0,0,1552,1553,5,86,0,0,1553,1554,5,45,0,0,1554,1555,3,
  	4,2,0,1555,1556,3,244,122,0,1556,243,1,0,0,0,1557,1561,5,78,0,0,1558,
  	1560,3,246,123,0,1559,1558,1,0,0,0,1560,1563,1,0,0,0,1561,1559,1,0,0,
  	0,1561,1562,1,0,0,0,1562,1564,1,0,0,0,1563,1561,1,0,0,0,1564,1565,5,79,
  	0,0,1565,245,1,0,0,0,1566,1572,3,248,124,0,1567,1572,3,234,117,0,1568,
  	1572,3,92,46,0,1569,1572,3,220,110,0,1570,1572,5,82,0,0,1571,1566,1,0,
  	0,0,1571,1567,1,0,0,0,1571,1568,1,0,0,0,1571,1569,1,0,0,0,1571,1570,1,
  	0,0,0,1572,247,1,0,0,0,1573,1575,3,250,125,0,1574,1573,1,0,0,0,1575,1578,
  	1,0,0,0,1576,1574,1,0,0,0,1576,1577,1,0,0,0,1577,1579,1,0,0,0,1578,1576,
  	1,0,0,0,1579,1580,3,128,64,0,1580,1581,5,123,0,0,1581,1582,5,76,0,0,1582,
  	1584,5,77,0,0,1583,1585,3,30,15,0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,
  	1585,1587,1,0,0,0,1586,1588,3,252,126,0,1587,1586,1,0,0,0,1587,1588,1,
  	0,0,0,1588,1589,1,0,0,0,1589,1590,5,82,0,0,1590,249,1,0,0,0,1591,1595,
  	3,254,127,0,1592,1595,5,52,0,0,1593,1595,5,18,0,0,1594,1591,1,0,0,0,1594,
  	1592,1,0,0,0,1594,1593,1,0,0,0,1595,251,1,0,0,0,1596,1597,5,29,0,0,1597,
  	1598,3,262,131,0,1598,253,1,0,0,0,1599,1603,3,256,128,0,1600,1603,3,268,
  	134,0,1601,1603,3,270,135,0,1602,1599,1,0,0,0,1602,1600,1,0,0,0,1602,
  	1601,1,0,0,0,1603,255,1,0,0,0,1604,1605,5,86,0,0,1605,1606,3,54,27,0,
  	1606,1608,5,76,0,0,1607,1609,3,258,129,0,1608,1607,1,0,0,0,1608,1609,
  	1,0,0,0,1609,1610,1,0,0,0,1610,1611,5,77,0,0,1611,257,1,0,0,0,1612,1617,
  	3,260,130,0,1613,1614,5,83,0,0,1614,1616,3,260,130,0,1615,1613,1,0,0,
  	0,1616,1619,1,0,0,0,1617,1615,1,0,0,0,1617,1618,1,0,0,0,1618,259,1,0,
  	0,0,1619,1617,1,0,0,0,1620,1621,5,123,0,0,1621,1622,5,88,0,0,1622,1623,
  	3,262,131,0,1623,261,1,0,0,0,1624,1628,3,464,232,0,1625,1628,3,264,132,
  	0,1626,1628,3,254,127,0,1627,1624,1,0,0,0,1627,1625,1,0,0,0,1627,1626,
  	1,0,0,0,1628,263,1,0,0,0,1629,1631,5,78,0,0,1630,1632,3,266,133,0,1631,
  	1630,1,0,0,0,1631,1632,1,0,0,0,1632,1634,1,0,0,0,1633,1635,5,83,0,0,1634,
  	1633,1,0,0,0,1634,1635,1,0,0,0,1635,1636,1,0,0,0,1636,1637,5,79,0,0,1637,
  	265,1,0,0,0,1638,1643,3,262,131,0,1639,1640,5,83,0,0,1640,1642,3,262,
  	131,0,1641,1639,1,0,0,0,1642,1645,1,0,0,0,1643,1641,1,0,0,0,1643,1644,
  	1,0,0,0,1644,267,1,0,0,0,1645,1643,1,0,0,0,1646,1647,5,86,0,0,1647,1648,
  	3,54,27,0,1648,269,1,0,0,0,1649,1650,5,86,0,0,1650,1651,3,54,27,0,1651,
  	1652,5,76,0,0,1652,1653,3,262,131,0,1653,1654,5,77,0,0,1654,271,1,0,0,
  	0,1655,1657,5,78,0,0,1656,1658,3,274,137,0,1657,1656,1,0,0,0,1657,1658,
  	1,0,0,0,1658,1660,1,0,0,0,1659,1661,5,83,0,0,1660,1659,1,0,0,0,1660,1661,
  	1,0,0,0,1661,1662,1,0,0,0,1662,1663,5,79,0,0,1663,273,1,0,0,0,1664,1669,
  	3,126,63,0,1665,1666,5,83,0,0,1666,1668,3,126,63,0,1667,1665,1,0,0,0,
  	1668,1671,1,0,0,0,1669,1667,1,0,0,0,1669,1670,1,0,0,0,1670,275,1,0,0,
  	0,1671,1669,1,0,0,0,1672,1674,5,78,0,0,1673,1675,3,278,139,0,1674,1673,
  	1,0,0,0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1677,5,79,0,0,1677,277,
  	1,0,0,0,1678,1682,3,280,140,0,1679,1681,3,280,140,0,1680,1679,1,0,0,0,
  	1681,1684,1,0,0,0,1682,1680,1,0,0,0,1682,1683,1,0,0,0,1683,279,1,0,0,
  	0,1684,1682,1,0,0,0,1685,1689,3,282,141,0,1686,1689,3,288,144,0,1687,
  	1689,3,290,145,0,1688,1685,1,0,0,0,1688,1686,1,0,0,0,1688,1687,1,0,0,
  	0,1689,281,1,0,0,0,1690,1693,3,92,46,0,1691,1693,3,222,111,0,1692,1690,
  	1,0,0,0,1692,1691,1,0,0,0,1693,283,1,0,0,0,1694,1696,3,164,82,0,1695,
  	1694,1,0,0,0,1696,1699,1,0,0,0,1697,1695,1,0,0,0,1697,1698,1,0,0,0,1698,
  	1700,1,0,0,0,1699,1697,1,0,0,0,1700,1702,3,286,143,0,1701,1703,3,120,
  	60,0,1702,1701,1,0,0,0,1702,1703,1,0,0,0,1703,285,1,0,0,0,1704,1707,3,
  	128,64,0,1705,1707,5,15,0,0,1706,1704,1,0,0,0,1706,1705,1,0,0,0,1707,
  	287,1,0,0,0,1708,1709,3,284,142,0,1709,1710,5,82,0,0,1710,289,1,0,0,0,
  	1711,1718,3,294,147,0,1712,1718,3,298,149,0,1713,1718,3,306,153,0,1714,
  	1718,3,308,154,0,1715,1718,3,326,163,0,1716,1718,3,332,166,0,1717,1711,
  	1,0,0,0,1717,1712,1,0,0,0,1717,1713,1,0,0,0,1717,1714,1,0,0,0,1717,1715,
  	1,0,0,0,1717,1716,1,0,0,0,1718,291,1,0,0,0,1719,1725,3,294,147,0,1720,
  	1725,3,300,150,0,1721,1725,3,310,155,0,1722,1725,3,328,164,0,1723,1725,
  	3,334,167,0,1724,1719,1,0,0,0,1724,1720,1,0,0,0,1724,1721,1,0,0,0,1724,
  	1722,1,0,0,0,1724,1723,1,0,0,0,1725,293,1,0,0,0,1726,1740,3,276,138,0,
  	1727,1740,3,296,148,0,1728,1740,3,302,151,0,1729,1740,3,312,156,0,1730,
  	1740,3,314,157,0,1731,1740,3,330,165,0,1732,1740,3,350,175,0,1733,1740,
  	3,352,176,0,1734,1740,3,354,177,0,1735,1740,3,358,179,0,1736,1740,3,356,
  	178,0,1737,1740,3,360,180,0,1738,1740,3,382,191,0,1739,1726,1,0,0,0,1739,
  	1727,1,0,0,0,1739,1728,1,0,0,0,1739,1729,1,0,0,0,1739,1730,1,0,0,0,1739,
  	1731,1,0,0,0,1739,1732,1,0,0,0,1739,1733,1,0,0,0,1739,1734,1,0,0,0,1739,
  	1735,1,0,0,0,1739,1736,1,0,0,0,1739,1737,1,0,0,0,1739,1738,1,0,0,0,1740,
  	295,1,0,0,0,1741,1742,5,82,0,0,1742,297,1,0,0,0,1743,1744,5,123,0,0,1744,
  	1745,5,94,0,0,1745,1746,3,290,145,0,1746,299,1,0,0,0,1747,1748,5,123,
  	0,0,1748,1749,5,94,0,0,1749,1750,3,292,146,0,1750,301,1,0,0,0,1751,1752,
  	3,304,152,0,1752,1753,5,82,0,0,1753,303,1,0,0,0,1754,1762,3,468,234,0,
  	1755,1762,3,436,218,0,1756,1762,3,438,219,0,1757,1762,3,430,215,0,1758,
  	1762,3,432,216,0,1759,1762,3,420,210,0,1760,1762,3,398,199,0,1761,1754,
  	1,0,0,0,1761,1755,1,0,0,0,1761,1756,1,0,0,0,1761,1757,1,0,0,0,1761,1758,
  	1,0,0,0,1761,1759,1,0,0,0,1761,1760,1,0,0,0,1762,305,1,0,0,0,1763,1764,
  	5,39,0,0,1764,1765,5,76,0,0,1765,1766,3,388,194,0,1766,1767,5,77,0,0,
  	1767,1768,3,290,145,0,1768,307,1,0,0,0,1769,1770,5,39,0,0,1770,1771,5,
  	76,0,0,1771,1772,3,388,194,0,1772,1773,5,77,0,0,1773,1774,3,292,146,0,
  	1774,1775,5,32,0,0,1775,1776,3,290,145,0,1776,309,1,0,0,0,1777,1778,5,
  	39,0,0,1778,1779,5,76,0,0,1779,1780,3,388,194,0,1780,1781,5,77,0,0,1781,
  	1782,3,292,146,0,1782,1783,5,32,0,0,1783,1784,3,292,146,0,1784,311,1,
  	0,0,0,1785,1786,5,19,0,0,1786,1789,3,388,194,0,1787,1788,5,94,0,0,1788,
  	1790,3,388,194,0,1789,1787,1,0,0,0,1789,1790,1,0,0,0,1790,1791,1,0,0,
  	0,1791,1792,5,82,0,0,1792,313,1,0,0,0,1793,1794,5,58,0,0,1794,1795,5,
  	76,0,0,1795,1796,3,388,194,0,1796,1797,5,77,0,0,1797,1798,3,316,158,0,
  	1798,315,1,0,0,0,1799,1800,5,78,0,0,1800,1804,3,318,159,0,1801,1803,3,
  	318,159,0,1802,1801,1,0,0,0,1803,1806,1,0,0,0,1804,1802,1,0,0,0,1804,
  	1805,1,0,0,0,1805,1807,1,0,0,0,1806,1804,1,0,0,0,1807,1808,5,79,0,0,1808,
  	1826,1,0,0,0,1809,1813,5,78,0,0,1810,1812,3,320,160,0,1811,1810,1,0,0,
  	0,1812,1815,1,0,0,0,1813,1811,1,0,0,0,1813,1814,1,0,0,0,1814,1821,1,0,
  	0,0,1815,1813,1,0,0,0,1816,1817,3,322,161,0,1817,1818,5,94,0,0,1818,1820,
  	1,0,0,0,1819,1816,1,0,0,0,1820,1823,1,0,0,0,1821,1819,1,0,0,0,1821,1822,
  	1,0,0,0,1822,1824,1,0,0,0,1823,1821,1,0,0,0,1824,1826,5,79,0,0,1825,1799,
  	1,0,0,0,1825,1809,1,0,0,0,1826,317,1,0,0,0,1827,1828,3,322,161,0,1828,
  	1834,5,95,0,0,1829,1830,3,388,194,0,1830,1831,5,82,0,0,1831,1835,1,0,
  	0,0,1832,1835,3,276,138,0,1833,1835,3,356,178,0,1834,1829,1,0,0,0,1834,
  	1832,1,0,0,0,1834,1833,1,0,0,0,1835,319,1,0,0,0,1836,1837,3,322,161,0,
  	1837,1843,5,94,0,0,1838,1839,3,322,161,0,1839,1840,5,94,0,0,1840,1842,
  	1,0,0,0,1841,1838,1,0,0,0,1842,1845,1,0,0,0,1843,1841,1,0,0,0,1843,1844,
  	1,0,0,0,1844,1846,1,0,0,0,1845,1843,1,0,0,0,1846,1847,3,278,139,0,1847,
  	321,1,0,0,0,1848,1849,5,23,0,0,1849,1854,3,324,162,0,1850,1851,5,83,0,
  	0,1851,1853,3,324,162,0,1852,1850,1,0,0,0,1853,1856,1,0,0,0,1854,1852,
  	1,0,0,0,1854,1855,1,0,0,0,1855,1859,1,0,0,0,1856,1854,1,0,0,0,1857,1859,
  	5,29,0,0,1858,1848,1,0,0,0,1858,1857,1,0,0,0,1859,323,1,0,0,0,1860,1861,
  	3,464,232,0,1861,325,1,0,0,0,1862,1863,5,67,0,0,1863,1864,5,76,0,0,1864,
  	1865,3,388,194,0,1865,1866,5,77,0,0,1866,1867,3,290,145,0,1867,327,1,
  	0,0,0,1868,1869,5,67,0,0,1869,1870,5,76,0,0,1870,1871,3,388,194,0,1871,
  	1872,5,77,0,0,1872,1873,3,292,146,0,1873,329,1,0,0,0,1874,1875,5,30,0,
  	0,1875,1876,3,290,145,0,1876,1877,5,67,0,0,1877,1878,5,76,0,0,1878,1879,
  	3,388,194,0,1879,1880,5,77,0,0,1880,1881,5,82,0,0,1881,331,1,0,0,0,1882,
  	1885,3,336,168,0,1883,1885,3,346,173,0,1884,1882,1,0,0,0,1884,1883,1,
  	0,0,0,1885,333,1,0,0,0,1886,1889,3,338,169,0,1887,1889,3,348,174,0,1888,
  	1886,1,0,0,0,1888,1887,1,0,0,0,1889,335,1,0,0,0,1890,1891,5,38,0,0,1891,
  	1893,5,76,0,0,1892,1894,3,340,170,0,1893,1892,1,0,0,0,1893,1894,1,0,0,
  	0,1894,1895,1,0,0,0,1895,1897,5,82,0,0,1896,1898,3,388,194,0,1897,1896,
  	1,0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,1901,5,82,0,0,1900,1902,
  	3,342,171,0,1901,1900,1,0,0,0,1901,1902,1,0,0,0,1902,1903,1,0,0,0,1903,
  	1904,5,77,0,0,1904,1905,3,290,145,0,1905,337,1,0,0,0,1906,1907,5,38,0,
  	0,1907,1909,5,76,0,0,1908,1910,3,340,170,0,1909,1908,1,0,0,0,1909,1910,
  	1,0,0,0,1910,1911,1,0,0,0,1911,1913,5,82,0,0,1912,1914,3,388,194,0,1913,
  	1912,1,0,0,0,1913,1914,1,0,0,0,1914,1915,1,0,0,0,1915,1917,5,82,0,0,1916,
  	1918,3,342,171,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,1919,1,0,0,
  	0,1919,1920,5,77,0,0,1920,1921,3,292,146,0,1921,339,1,0,0,0,1922,1925,
  	3,344,172,0,1923,1925,3,284,142,0,1924,1922,1,0,0,0,1924,1923,1,0,0,0,
  	1925,341,1,0,0,0,1926,1927,3,344,172,0,1927,343,1,0,0,0,1928,1933,3,304,
  	152,0,1929,1930,5,83,0,0,1930,1932,3,304,152,0,1931,1929,1,0,0,0,1932,
  	1935,1,0,0,0,1933,1931,1,0,0,0,1933,1934,1,0,0,0,1934,345,1,0,0,0,1935,
  	1933,1,0,0,0,1936,1937,5,38,0,0,1937,1938,5,76,0,0,1938,1939,3,284,142,
  	0,1939,1940,5,94,0,0,1940,1941,3,388,194,0,1941,1942,5,77,0,0,1942,1943,
  	3,290,145,0,1943,347,1,0,0,0,1944,1945,5,38,0,0,1945,1946,5,76,0,0,1946,
  	1947,3,284,142,0,1947,1948,5,94,0,0,1948,1949,3,388,194,0,1949,1950,5,
  	77,0,0,1950,1951,3,292,146,0,1951,349,1,0,0,0,1952,1954,5,21,0,0,1953,
  	1955,5,123,0,0,1954,1953,1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,
  	1956,1957,5,82,0,0,1957,351,1,0,0,0,1958,1960,5,28,0,0,1959,1961,5,123,
  	0,0,1960,1959,1,0,0,0,1960,1961,1,0,0,0,1961,1962,1,0,0,0,1962,1963,5,
  	82,0,0,1963,353,1,0,0,0,1964,1966,5,53,0,0,1965,1967,3,388,194,0,1966,
  	1965,1,0,0,0,1966,1967,1,0,0,0,1967,1968,1,0,0,0,1968,1969,5,82,0,0,1969,
  	355,1,0,0,0,1970,1971,5,61,0,0,1971,1972,3,388,194,0,1972,1973,5,82,0,
  	0,1973,357,1,0,0,0,1974,1975,5,59,0,0,1975,1976,5,76,0,0,1976,1977,3,
  	388,194,0,1977,1978,5,77,0,0,1978,1979,3,276,138,0,1979,359,1,0,0,0,1980,
  	1981,5,64,0,0,1981,1982,3,276,138,0,1982,1983,3,362,181,0,1983,1997,1,
  	0,0,0,1984,1985,5,64,0,0,1985,1986,3,276,138,0,1986,1987,3,370,185,0,
  	1987,1997,1,0,0,0,1988,1989,5,64,0,0,1989,1991,3,276,138,0,1990,1992,
  	3,362,181,0,1991,1990,1,0,0,0,1991,1992,1,0,0,0,1992,1993,1,0,0,0,1993,
  	1994,3,370,185,0,1994,1997,1,0,0,0,1995,1997,3,372,186,0,1996,1980,1,
  	0,0,0,1996,1984,1,0,0,0,1996,1988,1,0,0,0,1996,1995,1,0,0,0,1997,361,
  	1,0,0,0,1998,2002,3,364,182,0,1999,2001,3,364,182,0,2000,1999,1,0,0,0,
  	2001,2004,1,0,0,0,2002,2000,1,0,0,0,2002,2003,1,0,0,0,2003,363,1,0,0,
  	0,2004,2002,1,0,0,0,2005,2006,5,24,0,0,2006,2007,5,76,0,0,2007,2008,3,
  	366,183,0,2008,2009,5,77,0,0,2009,2010,3,276,138,0,2010,365,1,0,0,0,2011,
  	2013,3,164,82,0,2012,2011,1,0,0,0,2013,2016,1,0,0,0,2014,2012,1,0,0,0,
  	2014,2015,1,0,0,0,2015,2017,1,0,0,0,2016,2014,1,0,0,0,2017,2018,3,368,
  	184,0,2018,2019,3,124,62,0,2019,367,1,0,0,0,2020,2025,3,138,69,0,2021,
  	2022,5,109,0,0,2022,2024,3,22,11,0,2023,2021,1,0,0,0,2024,2027,1,0,0,
  	0,2025,2023,1,0,0,0,2025,2026,1,0,0,0,2026,369,1,0,0,0,2027,2025,1,0,
  	0,0,2028,2029,5,36,0,0,2029,2030,3,276,138,0,2030,371,1,0,0,0,2031,2032,
  	5,64,0,0,2032,2033,3,374,187,0,2033,2035,3,276,138,0,2034,2036,3,362,
  	181,0,2035,2034,1,0,0,0,2035,2036,1,0,0,0,2036,2038,1,0,0,0,2037,2039,
  	3,370,185,0,2038,2037,1,0,0,0,2038,2039,1,0,0,0,2039,373,1,0,0,0,2040,
  	2041,5,76,0,0,2041,2043,3,376,188,0,2042,2044,5,82,0,0,2043,2042,1,0,
  	0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,2046,5,77,0,0,2046,375,1,
  	0,0,0,2047,2052,3,378,189,0,2048,2049,5,82,0,0,2049,2051,3,378,189,0,
  	2050,2048,1,0,0,0,2051,2054,1,0,0,0,2052,2050,1,0,0,0,2052,2053,1,0,0,
  	0,2053,377,1,0,0,0,2054,2052,1,0,0,0,2055,2058,3,284,142,0,2056,2058,
  	3,380,190,0,2057,2055,1,0,0,0,2057,2056,1,0,0,0,2058,379,1,0,0,0,2059,
  	2062,3,58,29,0,2060,2062,3,418,209,0,2061,2059,1,0,0,0,2061,2060,1,0,
  	0,0,2062,381,1,0,0,0,2063,2064,5,17,0,0,2064,2065,3,388,194,0,2065,2066,
  	5,82,0,0,2066,383,1,0,0,0,2067,2068,3,386,193,0,2068,385,1,0,0,0,2069,
  	2070,3,284,142,0,2070,387,1,0,0,0,2071,2074,3,474,237,0,2072,2074,3,466,
  	233,0,2073,2071,1,0,0,0,2073,2072,1,0,0,0,2074,389,1,0,0,0,2075,2078,
  	3,392,196,0,2076,2078,3,406,203,0,2077,2075,1,0,0,0,2077,2076,1,0,0,0,
  	2078,391,1,0,0,0,2079,2081,3,2,1,0,2080,2082,3,394,197,0,2081,2080,1,
  	0,0,0,2081,2082,1,0,0,0,2082,2297,1,0,0,0,2083,2085,3,396,198,0,2084,
  	2086,3,394,197,0,2085,2084,1,0,0,0,2085,2086,1,0,0,0,2086,2297,1,0,0,
  	0,2087,2089,5,60,0,0,2088,2090,3,394,197,0,2089,2088,1,0,0,0,2089,2090,
  	1,0,0,0,2090,2297,1,0,0,0,2091,2092,3,54,27,0,2092,2093,5,84,0,0,2093,
  	2095,5,60,0,0,2094,2096,3,394,197,0,2095,2094,1,0,0,0,2095,2096,1,0,0,
  	0,2096,2297,1,0,0,0,2097,2098,5,76,0,0,2098,2099,3,388,194,0,2099,2101,
  	5,77,0,0,2100,2102,3,394,197,0,2101,2100,1,0,0,0,2101,2102,1,0,0,0,2102,
  	2297,1,0,0,0,2103,2105,3,400,200,0,2104,2106,3,394,197,0,2105,2104,1,
  	0,0,0,2105,2106,1,0,0,0,2106,2297,1,0,0,0,2107,2108,3,58,29,0,2108,2109,
  	5,84,0,0,2109,2111,3,400,200,0,2110,2112,3,394,197,0,2111,2110,1,0,0,
  	0,2111,2112,1,0,0,0,2112,2297,1,0,0,0,2113,2114,3,406,203,0,2114,2115,
  	5,84,0,0,2115,2117,3,400,200,0,2116,2118,3,394,197,0,2117,2116,1,0,0,
  	0,2117,2118,1,0,0,0,2118,2297,1,0,0,0,2119,2120,3,406,203,0,2120,2121,
  	5,84,0,0,2121,2123,5,123,0,0,2122,2124,3,394,197,0,2123,2122,1,0,0,0,
  	2123,2124,1,0,0,0,2124,2297,1,0,0,0,2125,2126,5,57,0,0,2126,2127,5,84,
  	0,0,2127,2129,5,123,0,0,2128,2130,3,394,197,0,2129,2128,1,0,0,0,2129,
  	2130,1,0,0,0,2130,2297,1,0,0,0,2131,2132,3,54,27,0,2132,2133,5,84,0,0,
  	2133,2134,5,57,0,0,2134,2135,5,84,0,0,2135,2137,5,123,0,0,2136,2138,3,
  	394,197,0,2137,2136,1,0,0,0,2137,2138,1,0,0,0,2138,2297,1,0,0,0,2139,
  	2140,3,58,29,0,2140,2141,5,80,0,0,2141,2142,3,388,194,0,2142,2144,5,81,
  	0,0,2143,2145,3,394,197,0,2144,2143,1,0,0,0,2144,2145,1,0,0,0,2145,2297,
  	1,0,0,0,2146,2147,3,410,205,0,2147,2148,5,80,0,0,2148,2149,3,388,194,
  	0,2149,2151,5,81,0,0,2150,2152,3,394,197,0,2151,2150,1,0,0,0,2151,2152,
  	1,0,0,0,2152,2297,1,0,0,0,2153,2154,3,60,30,0,2154,2156,5,76,0,0,2155,
  	2157,3,422,211,0,2156,2155,1,0,0,0,2156,2157,1,0,0,0,2157,2158,1,0,0,
  	0,2158,2160,5,77,0,0,2159,2161,3,394,197,0,2160,2159,1,0,0,0,2160,2161,
  	1,0,0,0,2161,2297,1,0,0,0,2162,2163,3,54,27,0,2163,2165,5,84,0,0,2164,
  	2166,3,40,20,0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,0,0,
  	2167,2168,5,123,0,0,2168,2170,5,76,0,0,2169,2171,3,422,211,0,2170,2169,
  	1,0,0,0,2170,2171,1,0,0,0,2171,2172,1,0,0,0,2172,2174,5,77,0,0,2173,2175,
  	3,394,197,0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,2175,2297,1,0,0,0,2176,
  	2177,3,58,29,0,2177,2179,5,84,0,0,2178,2180,3,40,20,0,2179,2178,1,0,0,
  	0,2179,2180,1,0,0,0,2180,2181,1,0,0,0,2181,2182,5,123,0,0,2182,2184,5,
  	76,0,0,2183,2185,3,422,211,0,2184,2183,1,0,0,0,2184,2185,1,0,0,0,2185,
  	2186,1,0,0,0,2186,2188,5,77,0,0,2187,2189,3,394,197,0,2188,2187,1,0,0,
  	0,2188,2189,1,0,0,0,2189,2297,1,0,0,0,2190,2191,3,406,203,0,2191,2193,
  	5,84,0,0,2192,2194,3,40,20,0,2193,2192,1,0,0,0,2193,2194,1,0,0,0,2194,
  	2195,1,0,0,0,2195,2196,5,123,0,0,2196,2198,5,76,0,0,2197,2199,3,422,211,
  	0,2198,2197,1,0,0,0,2198,2199,1,0,0,0,2199,2200,1,0,0,0,2200,2202,5,77,
  	0,0,2201,2203,3,394,197,0,2202,2201,1,0,0,0,2202,2203,1,0,0,0,2203,2297,
  	1,0,0,0,2204,2205,5,57,0,0,2205,2207,5,84,0,0,2206,2208,3,40,20,0,2207,
  	2206,1,0,0,0,2207,2208,1,0,0,0,2208,2209,1,0,0,0,2209,2210,5,123,0,0,
  	2210,2212,5,76,0,0,2211,2213,3,422,211,0,2212,2211,1,0,0,0,2212,2213,
  	1,0,0,0,2213,2214,1,0,0,0,2214,2216,5,77,0,0,2215,2217,3,394,197,0,2216,
  	2215,1,0,0,0,2216,2217,1,0,0,0,2217,2297,1,0,0,0,2218,2219,3,54,27,0,
  	2219,2220,5,84,0,0,2220,2221,5,57,0,0,2221,2223,5,84,0,0,2222,2224,3,
  	40,20,0,2223,2222,1,0,0,0,2223,2224,1,0,0,0,2224,2225,1,0,0,0,2225,2226,
  	5,123,0,0,2226,2228,5,76,0,0,2227,2229,3,422,211,0,2228,2227,1,0,0,0,
  	2228,2229,1,0,0,0,2229,2230,1,0,0,0,2230,2232,5,77,0,0,2231,2233,3,394,
  	197,0,2232,2231,1,0,0,0,2232,2233,1,0,0,0,2233,2297,1,0,0,0,2234,2235,
  	3,58,29,0,2235,2237,5,87,0,0,2236,2238,3,40,20,0,2237,2236,1,0,0,0,2237,
  	2238,1,0,0,0,2238,2239,1,0,0,0,2239,2241,5,123,0,0,2240,2242,3,394,197,
  	0,2241,2240,1,0,0,0,2241,2242,1,0,0,0,2242,2297,1,0,0,0,2243,2244,3,406,
  	203,0,2244,2246,5,87,0,0,2245,2247,3,40,20,0,2246,2245,1,0,0,0,2246,2247,
  	1,0,0,0,2247,2248,1,0,0,0,2248,2250,5,123,0,0,2249,2251,3,394,197,0,2250,
  	2249,1,0,0,0,2250,2251,1,0,0,0,2251,2297,1,0,0,0,2252,2253,3,16,8,0,2253,
  	2255,5,87,0,0,2254,2256,3,40,20,0,2255,2254,1,0,0,0,2255,2256,1,0,0,0,
  	2256,2257,1,0,0,0,2257,2259,5,123,0,0,2258,2260,3,394,197,0,2259,2258,
  	1,0,0,0,2259,2260,1,0,0,0,2260,2297,1,0,0,0,2261,2262,5,57,0,0,2262,2264,
  	5,87,0,0,2263,2265,3,40,20,0,2264,2263,1,0,0,0,2264,2265,1,0,0,0,2265,
  	2266,1,0,0,0,2266,2268,5,123,0,0,2267,2269,3,394,197,0,2268,2267,1,0,
  	0,0,2268,2269,1,0,0,0,2269,2297,1,0,0,0,2270,2271,3,54,27,0,2271,2272,
  	5,84,0,0,2272,2273,5,57,0,0,2273,2275,5,87,0,0,2274,2276,3,40,20,0,2275,
  	2274,1,0,0,0,2275,2276,1,0,0,0,2276,2277,1,0,0,0,2277,2279,5,123,0,0,
  	2278,2280,3,394,197,0,2279,2278,1,0,0,0,2279,2280,1,0,0,0,2280,2297,1,
  	0,0,0,2281,2282,3,22,11,0,2282,2284,5,87,0,0,2283,2285,3,40,20,0,2284,
  	2283,1,0,0,0,2284,2285,1,0,0,0,2285,2286,1,0,0,0,2286,2288,5,48,0,0,2287,
  	2289,3,394,197,0,2288,2287,1,0,0,0,2288,2289,1,0,0,0,2289,2297,1,0,0,
  	0,2290,2291,3,28,14,0,2291,2292,5,87,0,0,2292,2294,5,48,0,0,2293,2295,
  	3,394,197,0,2294,2293,1,0,0,0,2294,2295,1,0,0,0,2295,2297,1,0,0,0,2296,
  	2079,1,0,0,0,2296,2083,1,0,0,0,2296,2087,1,0,0,0,2296,2091,1,0,0,0,2296,
  	2097,1,0,0,0,2296,2103,1,0,0,0,2296,2107,1,0,0,0,2296,2113,1,0,0,0,2296,
  	2119,1,0,0,0,2296,2125,1,0,0,0,2296,2131,1,0,0,0,2296,2139,1,0,0,0,2296,
  	2146,1,0,0,0,2296,2153,1,0,0,0,2296,2162,1,0,0,0,2296,2176,1,0,0,0,2296,
  	2190,1,0,0,0,2296,2204,1,0,0,0,2296,2218,1,0,0,0,2296,2234,1,0,0,0,2296,
  	2243,1,0,0,0,2296,2252,1,0,0,0,2296,2261,1,0,0,0,2296,2270,1,0,0,0,2296,
  	2281,1,0,0,0,2296,2290,1,0,0,0,2297,393,1,0,0,0,2298,2299,5,84,0,0,2299,
  	2301,3,400,200,0,2300,2302,3,394,197,0,2301,2300,1,0,0,0,2301,2302,1,
  	0,0,0,2302,2336,1,0,0,0,2303,2304,5,84,0,0,2304,2306,5,123,0,0,2305,2307,
  	3,394,197,0,2306,2305,1,0,0,0,2306,2307,1,0,0,0,2307,2336,1,0,0,0,2308,
  	2309,5,80,0,0,2309,2310,3,388,194,0,2310,2312,5,81,0,0,2311,2313,3,394,
  	197,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,2313,2336,1,0,0,0,2314,2316,
  	5,84,0,0,2315,2317,3,40,20,0,2316,2315,1,0,0,0,2316,2317,1,0,0,0,2317,
  	2318,1,0,0,0,2318,2319,5,123,0,0,2319,2321,5,76,0,0,2320,2322,3,422,211,
  	0,2321,2320,1,0,0,0,2321,2322,1,0,0,0,2322,2323,1,0,0,0,2323,2325,5,77,
  	0,0,2324,2326,3,394,197,0,2325,2324,1,0,0,0,2325,2326,1,0,0,0,2326,2336,
  	1,0,0,0,2327,2329,5,87,0,0,2328,2330,3,40,20,0,2329,2328,1,0,0,0,2329,
  	2330,1,0,0,0,2330,2331,1,0,0,0,2331,2333,5,123,0,0,2332,2334,3,394,197,
  	0,2333,2332,1,0,0,0,2333,2334,1,0,0,0,2334,2336,1,0,0,0,2335,2298,1,0,
  	0,0,2335,2303,1,0,0,0,2335,2308,1,0,0,0,2335,2314,1,0,0,0,2335,2327,1,
  	0,0,0,2336,395,1,0,0,0,2337,2342,3,54,27,0,2338,2339,5,80,0,0,2339,2341,
  	5,81,0,0,2340,2338,1,0,0,0,2341,2344,1,0,0,0,2342,2340,1,0,0,0,2342,2343,
  	1,0,0,0,2343,2345,1,0,0,0,2344,2342,1,0,0,0,2345,2346,5,84,0,0,2346,2347,
  	5,26,0,0,2347,2373,1,0,0,0,2348,2353,3,10,5,0,2349,2350,5,80,0,0,2350,
  	2352,5,81,0,0,2351,2349,1,0,0,0,2352,2355,1,0,0,0,2353,2351,1,0,0,0,2353,
  	2354,1,0,0,0,2354,2356,1,0,0,0,2355,2353,1,0,0,0,2356,2357,5,84,0,0,2357,
  	2358,5,26,0,0,2358,2373,1,0,0,0,2359,2364,5,20,0,0,2360,2361,5,80,0,0,
  	2361,2363,5,81,0,0,2362,2360,1,0,0,0,2363,2366,1,0,0,0,2364,2362,1,0,
  	0,0,2364,2365,1,0,0,0,2365,2367,1,0,0,0,2366,2364,1,0,0,0,2367,2368,5,
  	84,0,0,2368,2373,5,26,0,0,2369,2370,5,65,0,0,2370,2371,5,84,0,0,2371,
  	2373,5,26,0,0,2372,2337,1,0,0,0,2372,2348,1,0,0,0,2372,2359,1,0,0,0,2372,
  	2369,1,0,0,0,2373,397,1,0,0,0,2374,2384,3,400,200,0,2375,2376,3,58,29,
  	0,2376,2377,5,84,0,0,2377,2378,3,400,200,0,2378,2384,1,0,0,0,2379,2380,
  	3,390,195,0,2380,2381,5,84,0,0,2381,2382,3,400,200,0,2382,2384,1,0,0,
  	0,2383,2374,1,0,0,0,2383,2375,1,0,0,0,2383,2379,1,0,0,0,2384,399,1,0,
  	0,0,2385,2387,5,48,0,0,2386,2388,3,40,20,0,2387,2386,1,0,0,0,2387,2388,
  	1,0,0,0,2388,2389,1,0,0,0,2389,2390,3,402,201,0,2390,2392,5,76,0,0,2391,
  	2393,3,422,211,0,2392,2391,1,0,0,0,2392,2393,1,0,0,0,2393,2394,1,0,0,
  	0,2394,2396,5,77,0,0,2395,2397,3,110,55,0,2396,2395,1,0,0,0,2396,2397,
  	1,0,0,0,2397,401,1,0,0,0,2398,2400,3,254,127,0,2399,2398,1,0,0,0,2400,
  	2403,1,0,0,0,2401,2399,1,0,0,0,2401,2402,1,0,0,0,2402,2404,1,0,0,0,2403,
  	2401,1,0,0,0,2404,2415,5,123,0,0,2405,2409,5,84,0,0,2406,2408,3,254,127,
  	0,2407,2406,1,0,0,0,2408,2411,1,0,0,0,2409,2407,1,0,0,0,2409,2410,1,0,
  	0,0,2410,2412,1,0,0,0,2411,2409,1,0,0,0,2412,2414,5,123,0,0,2413,2405,
  	1,0,0,0,2414,2417,1,0,0,0,2415,2413,1,0,0,0,2415,2416,1,0,0,0,2416,2419,
  	1,0,0,0,2417,2415,1,0,0,0,2418,2420,3,404,202,0,2419,2418,1,0,0,0,2419,
  	2420,1,0,0,0,2420,403,1,0,0,0,2421,2424,3,40,20,0,2422,2424,5,4,0,0,2423,
  	2421,1,0,0,0,2423,2422,1,0,0,0,2424,405,1,0,0,0,2425,2428,3,408,204,0,
  	2426,2428,3,410,205,0,2427,2425,1,0,0,0,2427,2426,1,0,0,0,2428,407,1,
  	0,0,0,2429,2430,5,48,0,0,2430,2431,3,8,4,0,2431,2433,3,412,206,0,2432,
  	2434,3,30,15,0,2433,2432,1,0,0,0,2433,2434,1,0,0,0,2434,2442,1,0,0,0,
  	2435,2436,5,48,0,0,2436,2437,3,22,11,0,2437,2439,3,412,206,0,2438,2440,
  	3,30,15,0,2439,2438,1,0,0,0,2439,2440,1,0,0,0,2440,2442,1,0,0,0,2441,
  	2429,1,0,0,0,2441,2435,1,0,0,0,2442,409,1,0,0,0,2443,2444,5,48,0,0,2444,
  	2445,3,8,4,0,2445,2446,3,30,15,0,2446,2447,3,272,136,0,2447,2454,1,0,
  	0,0,2448,2449,5,48,0,0,2449,2450,3,20,10,0,2450,2451,3,30,15,0,2451,2452,
  	3,272,136,0,2452,2454,1,0,0,0,2453,2443,1,0,0,0,2453,2448,1,0,0,0,2454,
  	411,1,0,0,0,2455,2459,3,414,207,0,2456,2458,3,414,207,0,2457,2456,1,0,
  	0,0,2458,2461,1,0,0,0,2459,2457,1,0,0,0,2459,2460,1,0,0,0,2460,413,1,
  	0,0,0,2461,2459,1,0,0,0,2462,2464,3,254,127,0,2463,2462,1,0,0,0,2464,
  	2467,1,0,0,0,2465,2463,1,0,0,0,2465,2466,1,0,0,0,2466,2468,1,0,0,0,2467,
  	2465,1,0,0,0,2468,2469,5,80,0,0,2469,2470,3,388,194,0,2470,2471,5,81,
  	0,0,2471,415,1,0,0,0,2472,2473,3,58,29,0,2473,2474,5,80,0,0,2474,2475,
  	3,388,194,0,2475,2476,5,81,0,0,2476,2488,1,0,0,0,2477,2478,3,392,196,
  	0,2478,2479,5,80,0,0,2479,2480,3,388,194,0,2480,2481,5,81,0,0,2481,2488,
  	1,0,0,0,2482,2483,3,410,205,0,2483,2484,5,80,0,0,2484,2485,3,388,194,
  	0,2485,2486,5,81,0,0,2486,2488,1,0,0,0,2487,2472,1,0,0,0,2487,2477,1,
  	0,0,0,2487,2482,1,0,0,0,2488,417,1,0,0,0,2489,2490,3,390,195,0,2490,2491,
  	5,84,0,0,2491,2492,5,123,0,0,2492,2503,1,0,0,0,2493,2494,5,57,0,0,2494,
  	2495,5,84,0,0,2495,2503,5,123,0,0,2496,2497,3,54,27,0,2497,2498,5,84,
  	0,0,2498,2499,5,57,0,0,2499,2500,5,84,0,0,2500,2501,5,123,0,0,2501,2503,
  	1,0,0,0,2502,2489,1,0,0,0,2502,2493,1,0,0,0,2502,2496,1,0,0,0,2503,419,
  	1,0,0,0,2504,2505,3,60,30,0,2505,2507,5,76,0,0,2506,2508,3,422,211,0,
  	2507,2506,1,0,0,0,2507,2508,1,0,0,0,2508,2509,1,0,0,0,2509,2510,5,77,
  	0,0,2510,2573,1,0,0,0,2511,2512,3,54,27,0,2512,2514,5,84,0,0,2513,2515,
  	3,40,20,0,2514,2513,1,0,0,0,2514,2515,1,0,0,0,2515,2516,1,0,0,0,2516,
  	2517,5,123,0,0,2517,2519,5,76,0,0,2518,2520,3,422,211,0,2519,2518,1,0,
  	0,0,2519,2520,1,0,0,0,2520,2521,1,0,0,0,2521,2522,5,77,0,0,2522,2573,
  	1,0,0,0,2523,2524,3,58,29,0,2524,2526,5,84,0,0,2525,2527,3,40,20,0,2526,
  	2525,1,0,0,0,2526,2527,1,0,0,0,2527,2528,1,0,0,0,2528,2529,5,123,0,0,
  	2529,2531,5,76,0,0,2530,2532,3,422,211,0,2531,2530,1,0,0,0,2531,2532,
  	1,0,0,0,2532,2533,1,0,0,0,2533,2534,5,77,0,0,2534,2573,1,0,0,0,2535,2536,
  	3,390,195,0,2536,2538,5,84,0,0,2537,2539,3,40,20,0,2538,2537,1,0,0,0,
  	2538,2539,1,0,0,0,2539,2540,1,0,0,0,2540,2541,5,123,0,0,2541,2543,5,76,
  	0,0,2542,2544,3,422,211,0,2543,2542,1,0,0,0,2543,2544,1,0,0,0,2544,2545,
  	1,0,0,0,2545,2546,5,77,0,0,2546,2573,1,0,0,0,2547,2548,5,57,0,0,2548,
  	2550,5,84,0,0,2549,2551,3,40,20,0,2550,2549,1,0,0,0,2550,2551,1,0,0,0,
  	2551,2552,1,0,0,0,2552,2553,5,123,0,0,2553,2555,5,76,0,0,2554,2556,3,
  	422,211,0,2555,2554,1,0,0,0,2555,2556,1,0,0,0,2556,2557,1,0,0,0,2557,
  	2573,5,77,0,0,2558,2559,3,54,27,0,2559,2560,5,84,0,0,2560,2561,5,57,0,
  	0,2561,2563,5,84,0,0,2562,2564,3,40,20,0,2563,2562,1,0,0,0,2563,2564,
  	1,0,0,0,2564,2565,1,0,0,0,2565,2566,5,123,0,0,2566,2568,5,76,0,0,2567,
  	2569,3,422,211,0,2568,2567,1,0,0,0,2568,2569,1,0,0,0,2569,2570,1,0,0,
  	0,2570,2571,5,77,0,0,2571,2573,1,0,0,0,2572,2504,1,0,0,0,2572,2511,1,
  	0,0,0,2572,2523,1,0,0,0,2572,2535,1,0,0,0,2572,2547,1,0,0,0,2572,2558,
  	1,0,0,0,2573,421,1,0,0,0,2574,2579,3,388,194,0,2575,2576,5,83,0,0,2576,
  	2578,3,388,194,0,2577,2575,1,0,0,0,2578,2581,1,0,0,0,2579,2577,1,0,0,
  	0,2579,2580,1,0,0,0,2580,423,1,0,0,0,2581,2579,1,0,0,0,2582,2583,3,58,
  	29,0,2583,2585,5,87,0,0,2584,2586,3,40,20,0,2585,2584,1,0,0,0,2585,2586,
  	1,0,0,0,2586,2587,1,0,0,0,2587,2588,5,123,0,0,2588,2630,1,0,0,0,2589,
  	2590,3,390,195,0,2590,2592,5,87,0,0,2591,2593,3,40,20,0,2592,2591,1,0,
  	0,0,2592,2593,1,0,0,0,2593,2594,1,0,0,0,2594,2595,5,123,0,0,2595,2630,
  	1,0,0,0,2596,2597,3,16,8,0,2597,2599,5,87,0,0,2598,2600,3,40,20,0,2599,
  	2598,1,0,0,0,2599,2600,1,0,0,0,2600,2601,1,0,0,0,2601,2602,5,123,0,0,
  	2602,2630,1,0,0,0,2603,2604,5,57,0,0,2604,2606,5,87,0,0,2605,2607,3,40,
  	20,0,2606,2605,1,0,0,0,2606,2607,1,0,0,0,2607,2608,1,0,0,0,2608,2630,
  	5,123,0,0,2609,2610,3,54,27,0,2610,2611,5,84,0,0,2611,2612,5,57,0,0,2612,
  	2614,5,87,0,0,2613,2615,3,40,20,0,2614,2613,1,0,0,0,2614,2615,1,0,0,0,
  	2615,2616,1,0,0,0,2616,2617,5,123,0,0,2617,2630,1,0,0,0,2618,2619,3,22,
  	11,0,2619,2621,5,87,0,0,2620,2622,3,40,20,0,2621,2620,1,0,0,0,2621,2622,
  	1,0,0,0,2622,2623,1,0,0,0,2623,2624,5,48,0,0,2624,2630,1,0,0,0,2625,2626,
  	3,28,14,0,2626,2627,5,87,0,0,2627,2628,5,48,0,0,2628,2630,1,0,0,0,2629,
  	2582,1,0,0,0,2629,2589,1,0,0,0,2629,2596,1,0,0,0,2629,2603,1,0,0,0,2629,
  	2609,1,0,0,0,2629,2618,1,0,0,0,2629,2625,1,0,0,0,2630,425,1,0,0,0,2631,
  	2633,3,390,195,0,2632,2634,3,428,214,0,2633,2632,1,0,0,0,2633,2634,1,
  	0,0,0,2634,2640,1,0,0,0,2635,2637,3,58,29,0,2636,2638,3,428,214,0,2637,
  	2636,1,0,0,0,2637,2638,1,0,0,0,2638,2640,1,0,0,0,2639,2631,1,0,0,0,2639,
  	2635,1,0,0,0,2640,427,1,0,0,0,2641,2643,5,102,0,0,2642,2644,3,428,214,
  	0,2643,2642,1,0,0,0,2643,2644,1,0,0,0,2644,2650,1,0,0,0,2645,2647,5,103,
  	0,0,2646,2648,3,428,214,0,2647,2646,1,0,0,0,2647,2648,1,0,0,0,2648,2650,
  	1,0,0,0,2649,2641,1,0,0,0,2649,2645,1,0,0,0,2650,429,1,0,0,0,2651,2652,
  	3,426,213,0,2652,2653,5,102,0,0,2653,431,1,0,0,0,2654,2655,3,426,213,
  	0,2655,2656,5,103,0,0,2656,433,1,0,0,0,2657,2665,3,436,218,0,2658,2665,
  	3,438,219,0,2659,2660,5,104,0,0,2660,2665,3,434,217,0,2661,2662,5,105,
  	0,0,2662,2665,3,434,217,0,2663,2665,3,440,220,0,2664,2657,1,0,0,0,2664,
  	2658,1,0,0,0,2664,2659,1,0,0,0,2664,2661,1,0,0,0,2664,2663,1,0,0,0,2665,
  	435,1,0,0,0,2666,2667,5,102,0,0,2667,2668,3,434,217,0,2668,437,1,0,0,
  	0,2669,2670,5,103,0,0,2670,2671,3,434,217,0,2671,439,1,0,0,0,2672,2680,
  	3,426,213,0,2673,2674,5,92,0,0,2674,2680,3,434,217,0,2675,2676,5,91,0,
  	0,2676,2680,3,434,217,0,2677,2680,3,442,221,0,2678,2680,3,486,243,0,2679,
  	2672,1,0,0,0,2679,2673,1,0,0,0,2679,2675,1,0,0,0,2679,2677,1,0,0,0,2679,
  	2678,1,0,0,0,2680,441,1,0,0,0,2681,2682,5,76,0,0,2682,2683,3,8,4,0,2683,
  	2684,5,77,0,0,2684,2685,3,434,217,0,2685,2709,1,0,0,0,2686,2687,5,76,
  	0,0,2687,2691,3,16,8,0,2688,2690,3,38,19,0,2689,2688,1,0,0,0,2690,2693,
  	1,0,0,0,2691,2689,1,0,0,0,2691,2692,1,0,0,0,2692,2694,1,0,0,0,2693,2691,
  	1,0,0,0,2694,2695,5,77,0,0,2695,2696,3,440,220,0,2696,2709,1,0,0,0,2697,
  	2698,5,76,0,0,2698,2702,3,16,8,0,2699,2701,3,38,19,0,2700,2699,1,0,0,
  	0,2701,2704,1,0,0,0,2702,2700,1,0,0,0,2702,2703,1,0,0,0,2703,2705,1,0,
  	0,0,2704,2702,1,0,0,0,2705,2706,5,77,0,0,2706,2707,3,474,237,0,2707,2709,
  	1,0,0,0,2708,2681,1,0,0,0,2708,2686,1,0,0,0,2708,2697,1,0,0,0,2709,443,
  	1,0,0,0,2710,2711,6,222,-1,0,2711,2712,3,434,217,0,2712,2724,1,0,0,0,
  	2713,2714,10,3,0,0,2714,2715,5,106,0,0,2715,2723,3,434,217,0,2716,2717,
  	10,2,0,0,2717,2718,5,107,0,0,2718,2723,3,434,217,0,2719,2720,10,1,0,0,
  	2720,2721,5,111,0,0,2721,2723,3,434,217,0,2722,2713,1,0,0,0,2722,2716,
  	1,0,0,0,2722,2719,1,0,0,0,2723,2726,1,0,0,0,2724,2722,1,0,0,0,2724,2725,
  	1,0,0,0,2725,445,1,0,0,0,2726,2724,1,0,0,0,2727,2728,6,223,-1,0,2728,
  	2729,3,444,222,0,2729,2738,1,0,0,0,2730,2731,10,2,0,0,2731,2732,5,104,
  	0,0,2732,2737,3,444,222,0,2733,2734,10,1,0,0,2734,2735,5,105,0,0,2735,
  	2737,3,444,222,0,2736,2730,1,0,0,0,2736,2733,1,0,0,0,2737,2740,1,0,0,
  	0,2738,2736,1,0,0,0,2738,2739,1,0,0,0,2739,447,1,0,0,0,2740,2738,1,0,
  	0,0,2741,2742,6,224,-1,0,2742,2743,3,446,223,0,2743,2759,1,0,0,0,2744,
  	2745,10,3,0,0,2745,2746,5,90,0,0,2746,2747,5,90,0,0,2747,2758,3,446,223,
  	0,2748,2749,10,2,0,0,2749,2750,5,89,0,0,2750,2751,5,89,0,0,2751,2758,
  	3,446,223,0,2752,2753,10,1,0,0,2753,2754,5,89,0,0,2754,2755,5,89,0,0,
  	2755,2756,5,89,0,0,2756,2758,3,446,223,0,2757,2744,1,0,0,0,2757,2748,
  	1,0,0,0,2757,2752,1,0,0,0,2758,2761,1,0,0,0,2759,2757,1,0,0,0,2759,2760,
  	1,0,0,0,2760,449,1,0,0,0,2761,2759,1,0,0,0,2762,2763,6,225,-1,0,2763,
  	2764,3,448,224,0,2764,2785,1,0,0,0,2765,2766,10,5,0,0,2766,2767,5,90,
  	0,0,2767,2784,3,448,224,0,2768,2769,10,4,0,0,2769,2770,5,89,0,0,2770,
  	2784,3,448,224,0,2771,2772,10,3,0,0,2772,2773,5,97,0,0,2773,2784,3,448,
  	224,0,2774,2775,10,2,0,0,2775,2776,5,98,0,0,2776,2784,3,448,224,0,2777,
  	2778,10,1,0,0,2778,2781,5,43,0,0,2779,2782,3,16,8,0,2780,2782,3,384,192,
  	0,2781,2779,1,0,0,0,2781,2780,1,0,0,0,2782,2784,1,0,0,0,2783,2765,1,0,
  	0,0,2783,2768,1,0,0,0,2783,2771,1,0,0,0,2783,2774,1,0,0,0,2783,2777,1,
  	0,0,0,2784,2787,1,0,0,0,2785,2783,1,0,0,0,2785,2786,1,0,0,0,2786,451,
  	1,0,0,0,2787,2785,1,0,0,0,2788,2789,6,226,-1,0,2789,2790,3,450,225,0,
  	2790,2799,1,0,0,0,2791,2792,10,2,0,0,2792,2793,5,96,0,0,2793,2798,3,450,
  	225,0,2794,2795,10,1,0,0,2795,2796,5,99,0,0,2796,2798,3,450,225,0,2797,
  	2791,1,0,0,0,2797,2794,1,0,0,0,2798,2801,1,0,0,0,2799,2797,1,0,0,0,2799,
  	2800,1,0,0,0,2800,453,1,0,0,0,2801,2799,1,0,0,0,2802,2803,6,227,-1,0,
  	2803,2804,3,452,226,0,2804,2810,1,0,0,0,2805,2806,10,1,0,0,2806,2807,
  	5,108,0,0,2807,2809,3,452,226,0,2808,2805,1,0,0,0,2809,2812,1,0,0,0,2810,
  	2808,1,0,0,0,2810,2811,1,0,0,0,2811,455,1,0,0,0,2812,2810,1,0,0,0,2813,
  	2814,6,228,-1,0,2814,2815,3,454,227,0,2815,2821,1,0,0,0,2816,2817,10,
  	1,0,0,2817,2818,5,110,0,0,2818,2820,3,454,227,0,2819,2816,1,0,0,0,2820,
  	2823,1,0,0,0,2821,2819,1,0,0,0,2821,2822,1,0,0,0,2822,457,1,0,0,0,2823,
  	2821,1,0,0,0,2824,2825,6,229,-1,0,2825,2826,3,456,228,0,2826,2832,1,0,
  	0,0,2827,2828,10,1,0,0,2828,2829,5,109,0,0,2829,2831,3,456,228,0,2830,
  	2827,1,0,0,0,2831,2834,1,0,0,0,2832,2830,1,0,0,0,2832,2833,1,0,0,0,2833,
  	459,1,0,0,0,2834,2832,1,0,0,0,2835,2836,6,230,-1,0,2836,2837,3,458,229,
  	0,2837,2843,1,0,0,0,2838,2839,10,1,0,0,2839,2840,5,100,0,0,2840,2842,
  	3,458,229,0,2841,2838,1,0,0,0,2842,2845,1,0,0,0,2843,2841,1,0,0,0,2843,
  	2844,1,0,0,0,2844,461,1,0,0,0,2845,2843,1,0,0,0,2846,2847,6,231,-1,0,
  	2847,2848,3,460,230,0,2848,2854,1,0,0,0,2849,2850,10,1,0,0,2850,2851,
  	5,101,0,0,2851,2853,3,460,230,0,2852,2849,1,0,0,0,2853,2856,1,0,0,0,2854,
  	2852,1,0,0,0,2854,2855,1,0,0,0,2855,463,1,0,0,0,2856,2854,1,0,0,0,2857,
  	2871,3,462,231,0,2858,2859,3,462,231,0,2859,2860,5,93,0,0,2860,2861,3,
  	388,194,0,2861,2862,5,94,0,0,2862,2863,3,464,232,0,2863,2871,1,0,0,0,
  	2864,2865,3,462,231,0,2865,2866,5,93,0,0,2866,2867,3,388,194,0,2867,2868,
  	5,94,0,0,2868,2869,3,474,237,0,2869,2871,1,0,0,0,2870,2857,1,0,0,0,2870,
  	2858,1,0,0,0,2870,2864,1,0,0,0,2871,465,1,0,0,0,2872,2875,3,464,232,0,
  	2873,2875,3,468,234,0,2874,2872,1,0,0,0,2874,2873,1,0,0,0,2875,467,1,
  	0,0,0,2876,2877,3,470,235,0,2877,2878,3,472,236,0,2878,2879,3,388,194,
  	0,2879,469,1,0,0,0,2880,2884,3,58,29,0,2881,2884,3,418,209,0,2882,2884,
  	3,416,208,0,2883,2880,1,0,0,0,2883,2881,1,0,0,0,2883,2882,1,0,0,0,2884,
  	471,1,0,0,0,2885,2886,7,5,0,0,2886,473,1,0,0,0,2887,2888,3,476,238,0,
  	2888,2889,5,95,0,0,2889,2890,3,484,242,0,2890,475,1,0,0,0,2891,2893,5,
  	76,0,0,2892,2894,3,478,239,0,2893,2892,1,0,0,0,2893,2894,1,0,0,0,2894,
  	2895,1,0,0,0,2895,2898,5,77,0,0,2896,2898,5,123,0,0,2897,2891,1,0,0,0,
  	2897,2896,1,0,0,0,2898,477,1,0,0,0,2899,2904,3,480,240,0,2900,2901,5,
  	83,0,0,2901,2903,3,480,240,0,2902,2900,1,0,0,0,2903,2906,1,0,0,0,2904,
  	2902,1,0,0,0,2904,2905,1,0,0,0,2905,2916,1,0,0,0,2906,2904,1,0,0,0,2907,
  	2912,5,123,0,0,2908,2909,5,83,0,0,2909,2911,5,123,0,0,2910,2908,1,0,0,
  	0,2911,2914,1,0,0,0,2912,2910,1,0,0,0,2912,2913,1,0,0,0,2913,2916,1,0,
  	0,0,2914,2912,1,0,0,0,2915,2899,1,0,0,0,2915,2907,1,0,0,0,2916,479,1,
  	0,0,0,2917,2919,3,164,82,0,2918,2917,1,0,0,0,2919,2922,1,0,0,0,2920,2918,
  	1,0,0,0,2920,2921,1,0,0,0,2921,2923,1,0,0,0,2922,2920,1,0,0,0,2923,2924,
  	3,482,241,0,2924,2925,3,124,62,0,2925,2928,1,0,0,0,2926,2928,3,162,81,
  	0,2927,2920,1,0,0,0,2927,2926,1,0,0,0,2928,481,1,0,0,0,2929,2932,3,128,
  	64,0,2930,2932,5,15,0,0,2931,2929,1,0,0,0,2931,2930,1,0,0,0,2932,483,
  	1,0,0,0,2933,2936,3,388,194,0,2934,2936,3,276,138,0,2935,2933,1,0,0,0,
  	2935,2934,1,0,0,0,2936,485,1,0,0,0,2937,2938,5,58,0,0,2938,2939,5,76,
  	0,0,2939,2940,3,388,194,0,2940,2941,5,77,0,0,2941,2942,3,316,158,0,2942,
  	487,1,0,0,0,2943,2944,3,388,194,0,2944,489,1,0,0,0,360,502,507,511,520,
  	526,531,534,539,544,549,552,557,562,569,574,581,586,588,595,609,614,622,
  	629,635,640,650,653,667,672,677,682,688,693,698,703,708,713,722,726,729,
  	734,740,746,754,763,774,803,808,812,820,827,836,850,853,865,868,884,889,
  	896,901,907,910,913,916,930,941,955,964,971,980,987,992,1007,1014,1020,
  	1024,1028,1032,1036,1041,1048,1051,1055,1058,1064,1069,1072,1076,1080,
  	1086,1091,1093,1102,1109,1125,1131,1134,1139,1143,1150,1153,1157,1162,
  	1168,1177,1183,1190,1195,1202,1210,1220,1225,1229,1239,1244,1252,1255,
  	1262,1265,1273,1276,1281,1286,1292,1296,1301,1306,1311,1317,1323,1326,
  	1329,1338,1344,1350,1353,1356,1364,1370,1376,1380,1386,1395,1401,1408,
  	1413,1420,1432,1439,1444,1452,1457,1463,1466,1469,1482,1493,1500,1510,
  	1515,1526,1531,1544,1549,1561,1571,1576,1584,1587,1594,1602,1608,1617,
  	1627,1631,1634,1643,1657,1660,1669,1674,1682,1688,1692,1697,1702,1706,
  	1717,1724,1739,1761,1789,1804,1813,1821,1825,1834,1843,1854,1858,1884,
  	1888,1893,1897,1901,1909,1913,1917,1924,1933,1954,1960,1966,1991,1996,
  	2002,2014,2025,2035,2038,2043,2052,2057,2061,2073,2077,2081,2085,2089,
  	2095,2101,2105,2111,2117,2123,2129,2137,2144,2151,2156,2160,2165,2170,
  	2174,2179,2184,2188,2193,2198,2202,2207,2212,2216,2223,2228,2232,2237,
  	2241,2246,2250,2255,2259,2264,2268,2275,2279,2284,2288,2294,2296,2301,
  	2306,2312,2316,2321,2325,2329,2333,2335,2342,2353,2364,2372,2383,2387,
  	2392,2396,2401,2409,2415,2419,2423,2427,2433,2439,2441,2453,2459,2465,
  	2487,2502,2507,2514,2519,2526,2531,2538,2543,2550,2555,2563,2568,2572,
  	2579,2585,2592,2599,2606,2614,2621,2629,2633,2637,2639,2643,2647,2649,
  	2664,2679,2691,2702,2708,2722,2724,2736,2738,2757,2759,2781,2783,2785,
  	2797,2799,2810,2821,2832,2843,2854,2870,2874,2883,2893,2897,2904,2912,
  	2915,2920,2927,2931,2935
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  java20parserParserStaticData = std::move(staticData);
}

}

Java20Parser::Java20Parser(TokenStream *input) : Java20Parser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

Java20Parser::Java20Parser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  Java20Parser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *java20parserParserStaticData->atn, java20parserParserStaticData->decisionToDFA, java20parserParserStaticData->sharedContextCache, options);
}

Java20Parser::~Java20Parser() {
  delete _interpreter;
}

const atn::ATN& Java20Parser::getATN() const {
  return *java20parserParserStaticData->atn;
}

std::string Java20Parser::getGrammarFileName() const {
  return "Java20Parser.g4";
}

const std::vector<std::string>& Java20Parser::getRuleNames() const {
  return java20parserParserStaticData->ruleNames;
}

const dfa::Vocabulary& Java20Parser::getVocabulary() const {
  return java20parserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView Java20Parser::getSerializedATN() const {
  return java20parserParserStaticData->serializedATN;
}


//----------------- Start_Context ------------------------------------------------------------------

Java20Parser::Start_Context::Start_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::CompilationUnitContext* Java20Parser::Start_Context::compilationUnit() {
  return getRuleContext<Java20Parser::CompilationUnitContext>(0);
}

tree::TerminalNode* Java20Parser::Start_Context::EOF() {
  return getToken(Java20Parser::EOF, 0);
}


size_t Java20Parser::Start_Context::getRuleIndex() const {
  return Java20Parser::RuleStart_;
}


std::any Java20Parser::Start_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitStart_(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::Start_Context* Java20Parser::start_() {
  Start_Context *_localctx = _tracker.createInstance<Start_Context>(_ctx, getState());
  enterRule(_localctx, 0, Java20Parser::RuleStart_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(490);
    compilationUnit();
    setState(491);
    match(Java20Parser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

Java20Parser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::LiteralContext::IntegerLiteral() {
  return getToken(Java20Parser::IntegerLiteral, 0);
}

tree::TerminalNode* Java20Parser::LiteralContext::FloatingPointLiteral() {
  return getToken(Java20Parser::FloatingPointLiteral, 0);
}

tree::TerminalNode* Java20Parser::LiteralContext::BooleanLiteral() {
  return getToken(Java20Parser::BooleanLiteral, 0);
}

tree::TerminalNode* Java20Parser::LiteralContext::CharacterLiteral() {
  return getToken(Java20Parser::CharacterLiteral, 0);
}

tree::TerminalNode* Java20Parser::LiteralContext::StringLiteral() {
  return getToken(Java20Parser::StringLiteral, 0);
}

tree::TerminalNode* Java20Parser::LiteralContext::TextBlock() {
  return getToken(Java20Parser::TextBlock, 0);
}

tree::TerminalNode* Java20Parser::LiteralContext::NullLiteral() {
  return getToken(Java20Parser::NullLiteral, 0);
}


size_t Java20Parser::LiteralContext::getRuleIndex() const {
  return Java20Parser::RuleLiteral;
}


std::any Java20Parser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LiteralContext* Java20Parser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 2, Java20Parser::RuleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(493);
    _la = _input->LA(1);
    if (!(((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 127) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeIdentifierContext ------------------------------------------------------------------

Java20Parser::TypeIdentifierContext::TypeIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::TypeIdentifierContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}


size_t Java20Parser::TypeIdentifierContext::getRuleIndex() const {
  return Java20Parser::RuleTypeIdentifier;
}


std::any Java20Parser::TypeIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypeIdentifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypeIdentifierContext* Java20Parser::typeIdentifier() {
  TypeIdentifierContext *_localctx = _tracker.createInstance<TypeIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 4, Java20Parser::RuleTypeIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(495);
    match(Java20Parser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnqualifiedMethodIdentifierContext ------------------------------------------------------------------

Java20Parser::UnqualifiedMethodIdentifierContext::UnqualifiedMethodIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::UnqualifiedMethodIdentifierContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}


size_t Java20Parser::UnqualifiedMethodIdentifierContext::getRuleIndex() const {
  return Java20Parser::RuleUnqualifiedMethodIdentifier;
}


std::any Java20Parser::UnqualifiedMethodIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitUnqualifiedMethodIdentifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::UnqualifiedMethodIdentifierContext* Java20Parser::unqualifiedMethodIdentifier() {
  UnqualifiedMethodIdentifierContext *_localctx = _tracker.createInstance<UnqualifiedMethodIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 6, Java20Parser::RuleUnqualifiedMethodIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(497);
    match(Java20Parser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveTypeContext ------------------------------------------------------------------

Java20Parser::PrimitiveTypeContext::PrimitiveTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::NumericTypeContext* Java20Parser::PrimitiveTypeContext::numericType() {
  return getRuleContext<Java20Parser::NumericTypeContext>(0);
}

tree::TerminalNode* Java20Parser::PrimitiveTypeContext::BOOLEAN() {
  return getToken(Java20Parser::BOOLEAN, 0);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::PrimitiveTypeContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::PrimitiveTypeContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}


size_t Java20Parser::PrimitiveTypeContext::getRuleIndex() const {
  return Java20Parser::RulePrimitiveType;
}


std::any Java20Parser::PrimitiveTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPrimitiveType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PrimitiveTypeContext* Java20Parser::primitiveType() {
  PrimitiveTypeContext *_localctx = _tracker.createInstance<PrimitiveTypeContext>(_ctx, getState());
  enterRule(_localctx, 8, Java20Parser::RulePrimitiveType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(502);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(499);
      annotation();
      setState(504);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(507);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::BYTE:
      case Java20Parser::CHAR:
      case Java20Parser::DOUBLE:
      case Java20Parser::FLOAT:
      case Java20Parser::INT:
      case Java20Parser::LONG:
      case Java20Parser::SHORT: {
        setState(505);
        numericType();
        break;
      }

      case Java20Parser::BOOLEAN: {
        setState(506);
        match(Java20Parser::BOOLEAN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericTypeContext ------------------------------------------------------------------

Java20Parser::NumericTypeContext::NumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::IntegralTypeContext* Java20Parser::NumericTypeContext::integralType() {
  return getRuleContext<Java20Parser::IntegralTypeContext>(0);
}

Java20Parser::FloatingPointTypeContext* Java20Parser::NumericTypeContext::floatingPointType() {
  return getRuleContext<Java20Parser::FloatingPointTypeContext>(0);
}


size_t Java20Parser::NumericTypeContext::getRuleIndex() const {
  return Java20Parser::RuleNumericType;
}


std::any Java20Parser::NumericTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitNumericType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::NumericTypeContext* Java20Parser::numericType() {
  NumericTypeContext *_localctx = _tracker.createInstance<NumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 10, Java20Parser::RuleNumericType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(511);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::BYTE:
      case Java20Parser::CHAR:
      case Java20Parser::INT:
      case Java20Parser::LONG:
      case Java20Parser::SHORT: {
        enterOuterAlt(_localctx, 1);
        setState(509);
        integralType();
        break;
      }

      case Java20Parser::DOUBLE:
      case Java20Parser::FLOAT: {
        enterOuterAlt(_localctx, 2);
        setState(510);
        floatingPointType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegralTypeContext ------------------------------------------------------------------

Java20Parser::IntegralTypeContext::IntegralTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::IntegralTypeContext::BYTE() {
  return getToken(Java20Parser::BYTE, 0);
}

tree::TerminalNode* Java20Parser::IntegralTypeContext::SHORT() {
  return getToken(Java20Parser::SHORT, 0);
}

tree::TerminalNode* Java20Parser::IntegralTypeContext::INT() {
  return getToken(Java20Parser::INT, 0);
}

tree::TerminalNode* Java20Parser::IntegralTypeContext::LONG() {
  return getToken(Java20Parser::LONG, 0);
}

tree::TerminalNode* Java20Parser::IntegralTypeContext::CHAR() {
  return getToken(Java20Parser::CHAR, 0);
}


size_t Java20Parser::IntegralTypeContext::getRuleIndex() const {
  return Java20Parser::RuleIntegralType;
}


std::any Java20Parser::IntegralTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitIntegralType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::IntegralTypeContext* Java20Parser::integralType() {
  IntegralTypeContext *_localctx = _tracker.createInstance<IntegralTypeContext>(_ctx, getState());
  enterRule(_localctx, 12, Java20Parser::RuleIntegralType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(513);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18102359477452800) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatingPointTypeContext ------------------------------------------------------------------

Java20Parser::FloatingPointTypeContext::FloatingPointTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::FloatingPointTypeContext::FLOAT() {
  return getToken(Java20Parser::FLOAT, 0);
}

tree::TerminalNode* Java20Parser::FloatingPointTypeContext::DOUBLE() {
  return getToken(Java20Parser::DOUBLE, 0);
}


size_t Java20Parser::FloatingPointTypeContext::getRuleIndex() const {
  return Java20Parser::RuleFloatingPointType;
}


std::any Java20Parser::FloatingPointTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitFloatingPointType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::FloatingPointTypeContext* Java20Parser::floatingPointType() {
  FloatingPointTypeContext *_localctx = _tracker.createInstance<FloatingPointTypeContext>(_ctx, getState());
  enterRule(_localctx, 14, Java20Parser::RuleFloatingPointType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(515);
    _la = _input->LA(1);
    if (!(_la == Java20Parser::DOUBLE

    || _la == Java20Parser::FLOAT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceTypeContext ------------------------------------------------------------------

Java20Parser::ReferenceTypeContext::ReferenceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ClassOrInterfaceTypeContext* Java20Parser::ReferenceTypeContext::classOrInterfaceType() {
  return getRuleContext<Java20Parser::ClassOrInterfaceTypeContext>(0);
}

Java20Parser::TypeVariableContext* Java20Parser::ReferenceTypeContext::typeVariable() {
  return getRuleContext<Java20Parser::TypeVariableContext>(0);
}

Java20Parser::ArrayTypeContext* Java20Parser::ReferenceTypeContext::arrayType() {
  return getRuleContext<Java20Parser::ArrayTypeContext>(0);
}


size_t Java20Parser::ReferenceTypeContext::getRuleIndex() const {
  return Java20Parser::RuleReferenceType;
}


std::any Java20Parser::ReferenceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitReferenceType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ReferenceTypeContext* Java20Parser::referenceType() {
  ReferenceTypeContext *_localctx = _tracker.createInstance<ReferenceTypeContext>(_ctx, getState());
  enterRule(_localctx, 16, Java20Parser::RuleReferenceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(520);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(517);
      classOrInterfaceType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(518);
      typeVariable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(519);
      arrayType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CoitContext ------------------------------------------------------------------

Java20Parser::CoitContext::CoitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::CoitContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::TypeIdentifierContext* Java20Parser::CoitContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::CoitContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::CoitContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}

Java20Parser::TypeArgumentsContext* Java20Parser::CoitContext::typeArguments() {
  return getRuleContext<Java20Parser::TypeArgumentsContext>(0);
}

Java20Parser::CoitContext* Java20Parser::CoitContext::coit() {
  return getRuleContext<Java20Parser::CoitContext>(0);
}


size_t Java20Parser::CoitContext::getRuleIndex() const {
  return Java20Parser::RuleCoit;
}


std::any Java20Parser::CoitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitCoit(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::CoitContext* Java20Parser::coit() {
  CoitContext *_localctx = _tracker.createInstance<CoitContext>(_ctx, getState());
  enterRule(_localctx, 18, Java20Parser::RuleCoit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(522);
    match(Java20Parser::DOT);
    setState(526);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(523);
      annotation();
      setState(528);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(529);
    typeIdentifier();
    setState(531);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      setState(530);
      typeArguments();
      break;
    }

    default:
      break;
    }
    setState(534);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      setState(533);
      coit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassOrInterfaceTypeContext ------------------------------------------------------------------

Java20Parser::ClassOrInterfaceTypeContext::ClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::TypeIdentifierContext* Java20Parser::ClassOrInterfaceTypeContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}

Java20Parser::PackageNameContext* Java20Parser::ClassOrInterfaceTypeContext::packageName() {
  return getRuleContext<Java20Parser::PackageNameContext>(0);
}

tree::TerminalNode* Java20Parser::ClassOrInterfaceTypeContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::ClassOrInterfaceTypeContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::ClassOrInterfaceTypeContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}

Java20Parser::TypeArgumentsContext* Java20Parser::ClassOrInterfaceTypeContext::typeArguments() {
  return getRuleContext<Java20Parser::TypeArgumentsContext>(0);
}

Java20Parser::CoitContext* Java20Parser::ClassOrInterfaceTypeContext::coit() {
  return getRuleContext<Java20Parser::CoitContext>(0);
}


size_t Java20Parser::ClassOrInterfaceTypeContext::getRuleIndex() const {
  return Java20Parser::RuleClassOrInterfaceType;
}


std::any Java20Parser::ClassOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitClassOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ClassOrInterfaceTypeContext* Java20Parser::classOrInterfaceType() {
  ClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<ClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 20, Java20Parser::RuleClassOrInterfaceType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(539);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(536);
      packageName();
      setState(537);
      match(Java20Parser::DOT);
      break;
    }

    default:
      break;
    }
    setState(544);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(541);
      annotation();
      setState(546);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(547);
    typeIdentifier();
    setState(549);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      setState(548);
      typeArguments();
      break;
    }

    default:
      break;
    }
    setState(552);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      setState(551);
      coit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassTypeContext ------------------------------------------------------------------

Java20Parser::ClassTypeContext::ClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::TypeIdentifierContext* Java20Parser::ClassTypeContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::ClassTypeContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::ClassTypeContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}

Java20Parser::TypeArgumentsContext* Java20Parser::ClassTypeContext::typeArguments() {
  return getRuleContext<Java20Parser::TypeArgumentsContext>(0);
}

Java20Parser::PackageNameContext* Java20Parser::ClassTypeContext::packageName() {
  return getRuleContext<Java20Parser::PackageNameContext>(0);
}

tree::TerminalNode* Java20Parser::ClassTypeContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::ClassOrInterfaceTypeContext* Java20Parser::ClassTypeContext::classOrInterfaceType() {
  return getRuleContext<Java20Parser::ClassOrInterfaceTypeContext>(0);
}


size_t Java20Parser::ClassTypeContext::getRuleIndex() const {
  return Java20Parser::RuleClassType;
}


std::any Java20Parser::ClassTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitClassType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ClassTypeContext* Java20Parser::classType() {
  ClassTypeContext *_localctx = _tracker.createInstance<ClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 22, Java20Parser::RuleClassType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(588);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(557);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::AT) {
        setState(554);
        annotation();
        setState(559);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(560);
      typeIdentifier();
      setState(562);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(561);
        typeArguments();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(564);
      packageName();
      setState(565);
      match(Java20Parser::DOT);
      setState(569);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::AT) {
        setState(566);
        annotation();
        setState(571);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(572);
      typeIdentifier();
      setState(574);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(573);
        typeArguments();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(576);
      classOrInterfaceType();
      setState(577);
      match(Java20Parser::DOT);
      setState(581);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::AT) {
        setState(578);
        annotation();
        setState(583);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(584);
      typeIdentifier();
      setState(586);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(585);
        typeArguments();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceTypeContext ------------------------------------------------------------------

Java20Parser::InterfaceTypeContext::InterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ClassTypeContext* Java20Parser::InterfaceTypeContext::classType() {
  return getRuleContext<Java20Parser::ClassTypeContext>(0);
}


size_t Java20Parser::InterfaceTypeContext::getRuleIndex() const {
  return Java20Parser::RuleInterfaceType;
}


std::any Java20Parser::InterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::InterfaceTypeContext* Java20Parser::interfaceType() {
  InterfaceTypeContext *_localctx = _tracker.createInstance<InterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 24, Java20Parser::RuleInterfaceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(590);
    classType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeVariableContext ------------------------------------------------------------------

Java20Parser::TypeVariableContext::TypeVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::TypeIdentifierContext* Java20Parser::TypeVariableContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::TypeVariableContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::TypeVariableContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}


size_t Java20Parser::TypeVariableContext::getRuleIndex() const {
  return Java20Parser::RuleTypeVariable;
}


std::any Java20Parser::TypeVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypeVariable(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypeVariableContext* Java20Parser::typeVariable() {
  TypeVariableContext *_localctx = _tracker.createInstance<TypeVariableContext>(_ctx, getState());
  enterRule(_localctx, 26, Java20Parser::RuleTypeVariable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(595);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(592);
      annotation();
      setState(597);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(598);
    typeIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayTypeContext ------------------------------------------------------------------

Java20Parser::ArrayTypeContext::ArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::PrimitiveTypeContext* Java20Parser::ArrayTypeContext::primitiveType() {
  return getRuleContext<Java20Parser::PrimitiveTypeContext>(0);
}

Java20Parser::DimsContext* Java20Parser::ArrayTypeContext::dims() {
  return getRuleContext<Java20Parser::DimsContext>(0);
}

Java20Parser::ClassTypeContext* Java20Parser::ArrayTypeContext::classType() {
  return getRuleContext<Java20Parser::ClassTypeContext>(0);
}

Java20Parser::TypeVariableContext* Java20Parser::ArrayTypeContext::typeVariable() {
  return getRuleContext<Java20Parser::TypeVariableContext>(0);
}


size_t Java20Parser::ArrayTypeContext::getRuleIndex() const {
  return Java20Parser::RuleArrayType;
}


std::any Java20Parser::ArrayTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitArrayType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ArrayTypeContext* Java20Parser::arrayType() {
  ArrayTypeContext *_localctx = _tracker.createInstance<ArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 28, Java20Parser::RuleArrayType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(609);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(600);
      primitiveType();
      setState(601);
      dims();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(603);
      classType();
      setState(604);
      dims();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(606);
      typeVariable();
      setState(607);
      dims();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimsContext ------------------------------------------------------------------

Java20Parser::DimsContext::DimsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Java20Parser::DimsContext::LBRACK() {
  return getTokens(Java20Parser::LBRACK);
}

tree::TerminalNode* Java20Parser::DimsContext::LBRACK(size_t i) {
  return getToken(Java20Parser::LBRACK, i);
}

std::vector<tree::TerminalNode *> Java20Parser::DimsContext::RBRACK() {
  return getTokens(Java20Parser::RBRACK);
}

tree::TerminalNode* Java20Parser::DimsContext::RBRACK(size_t i) {
  return getToken(Java20Parser::RBRACK, i);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::DimsContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::DimsContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}


size_t Java20Parser::DimsContext::getRuleIndex() const {
  return Java20Parser::RuleDims;
}


std::any Java20Parser::DimsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitDims(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::DimsContext* Java20Parser::dims() {
  DimsContext *_localctx = _tracker.createInstance<DimsContext>(_ctx, getState());
  enterRule(_localctx, 30, Java20Parser::RuleDims);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(614);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(611);
      annotation();
      setState(616);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(617);
    match(Java20Parser::LBRACK);
    setState(618);
    match(Java20Parser::RBRACK);
    setState(629);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(622);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java20Parser::AT) {
          setState(619);
          annotation();
          setState(624);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(625);
        match(Java20Parser::LBRACK);
        setState(626);
        match(Java20Parser::RBRACK); 
      }
      setState(631);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterContext ------------------------------------------------------------------

Java20Parser::TypeParameterContext::TypeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::TypeIdentifierContext* Java20Parser::TypeParameterContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}

std::vector<Java20Parser::TypeParameterModifierContext *> Java20Parser::TypeParameterContext::typeParameterModifier() {
  return getRuleContexts<Java20Parser::TypeParameterModifierContext>();
}

Java20Parser::TypeParameterModifierContext* Java20Parser::TypeParameterContext::typeParameterModifier(size_t i) {
  return getRuleContext<Java20Parser::TypeParameterModifierContext>(i);
}

Java20Parser::TypeBoundContext* Java20Parser::TypeParameterContext::typeBound() {
  return getRuleContext<Java20Parser::TypeBoundContext>(0);
}


size_t Java20Parser::TypeParameterContext::getRuleIndex() const {
  return Java20Parser::RuleTypeParameter;
}


std::any Java20Parser::TypeParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypeParameter(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypeParameterContext* Java20Parser::typeParameter() {
  TypeParameterContext *_localctx = _tracker.createInstance<TypeParameterContext>(_ctx, getState());
  enterRule(_localctx, 32, Java20Parser::RuleTypeParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(635);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(632);
      typeParameterModifier();
      setState(637);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(638);
    typeIdentifier();
    setState(640);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::EXTENDS) {
      setState(639);
      typeBound();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterModifierContext ------------------------------------------------------------------

Java20Parser::TypeParameterModifierContext::TypeParameterModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationContext* Java20Parser::TypeParameterModifierContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}


size_t Java20Parser::TypeParameterModifierContext::getRuleIndex() const {
  return Java20Parser::RuleTypeParameterModifier;
}


std::any Java20Parser::TypeParameterModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypeParameterModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypeParameterModifierContext* Java20Parser::typeParameterModifier() {
  TypeParameterModifierContext *_localctx = _tracker.createInstance<TypeParameterModifierContext>(_ctx, getState());
  enterRule(_localctx, 34, Java20Parser::RuleTypeParameterModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(642);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeBoundContext ------------------------------------------------------------------

Java20Parser::TypeBoundContext::TypeBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::TypeBoundContext::EXTENDS() {
  return getToken(Java20Parser::EXTENDS, 0);
}

Java20Parser::TypeVariableContext* Java20Parser::TypeBoundContext::typeVariable() {
  return getRuleContext<Java20Parser::TypeVariableContext>(0);
}

Java20Parser::ClassOrInterfaceTypeContext* Java20Parser::TypeBoundContext::classOrInterfaceType() {
  return getRuleContext<Java20Parser::ClassOrInterfaceTypeContext>(0);
}

std::vector<Java20Parser::AdditionalBoundContext *> Java20Parser::TypeBoundContext::additionalBound() {
  return getRuleContexts<Java20Parser::AdditionalBoundContext>();
}

Java20Parser::AdditionalBoundContext* Java20Parser::TypeBoundContext::additionalBound(size_t i) {
  return getRuleContext<Java20Parser::AdditionalBoundContext>(i);
}


size_t Java20Parser::TypeBoundContext::getRuleIndex() const {
  return Java20Parser::RuleTypeBound;
}


std::any Java20Parser::TypeBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypeBound(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypeBoundContext* Java20Parser::typeBound() {
  TypeBoundContext *_localctx = _tracker.createInstance<TypeBoundContext>(_ctx, getState());
  enterRule(_localctx, 36, Java20Parser::RuleTypeBound);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(644);
    match(Java20Parser::EXTENDS);
    setState(653);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
    case 1: {
      setState(645);
      typeVariable();
      break;
    }

    case 2: {
      setState(646);
      classOrInterfaceType();
      setState(650);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::BITAND) {
        setState(647);
        additionalBound();
        setState(652);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditionalBoundContext ------------------------------------------------------------------

Java20Parser::AdditionalBoundContext::AdditionalBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::AdditionalBoundContext::BITAND() {
  return getToken(Java20Parser::BITAND, 0);
}

Java20Parser::InterfaceTypeContext* Java20Parser::AdditionalBoundContext::interfaceType() {
  return getRuleContext<Java20Parser::InterfaceTypeContext>(0);
}


size_t Java20Parser::AdditionalBoundContext::getRuleIndex() const {
  return Java20Parser::RuleAdditionalBound;
}


std::any Java20Parser::AdditionalBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAdditionalBound(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::AdditionalBoundContext* Java20Parser::additionalBound() {
  AdditionalBoundContext *_localctx = _tracker.createInstance<AdditionalBoundContext>(_ctx, getState());
  enterRule(_localctx, 38, Java20Parser::RuleAdditionalBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(655);
    match(Java20Parser::BITAND);
    setState(656);
    interfaceType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsContext ------------------------------------------------------------------

Java20Parser::TypeArgumentsContext::TypeArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::TypeArgumentsContext::LT() {
  return getToken(Java20Parser::LT, 0);
}

Java20Parser::TypeArgumentListContext* Java20Parser::TypeArgumentsContext::typeArgumentList() {
  return getRuleContext<Java20Parser::TypeArgumentListContext>(0);
}

tree::TerminalNode* Java20Parser::TypeArgumentsContext::GT() {
  return getToken(Java20Parser::GT, 0);
}


size_t Java20Parser::TypeArgumentsContext::getRuleIndex() const {
  return Java20Parser::RuleTypeArguments;
}


std::any Java20Parser::TypeArgumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypeArguments(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypeArgumentsContext* Java20Parser::typeArguments() {
  TypeArgumentsContext *_localctx = _tracker.createInstance<TypeArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 40, Java20Parser::RuleTypeArguments);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(658);
    match(Java20Parser::LT);
    setState(659);
    typeArgumentList();
    setState(660);
    match(Java20Parser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentListContext ------------------------------------------------------------------

Java20Parser::TypeArgumentListContext::TypeArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::TypeArgumentContext *> Java20Parser::TypeArgumentListContext::typeArgument() {
  return getRuleContexts<Java20Parser::TypeArgumentContext>();
}

Java20Parser::TypeArgumentContext* Java20Parser::TypeArgumentListContext::typeArgument(size_t i) {
  return getRuleContext<Java20Parser::TypeArgumentContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::TypeArgumentListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::TypeArgumentListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::TypeArgumentListContext::getRuleIndex() const {
  return Java20Parser::RuleTypeArgumentList;
}


std::any Java20Parser::TypeArgumentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypeArgumentList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypeArgumentListContext* Java20Parser::typeArgumentList() {
  TypeArgumentListContext *_localctx = _tracker.createInstance<TypeArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 42, Java20Parser::RuleTypeArgumentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(662);
    typeArgument();
    setState(667);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::COMMA) {
      setState(663);
      match(Java20Parser::COMMA);
      setState(664);
      typeArgument();
      setState(669);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentContext ------------------------------------------------------------------

Java20Parser::TypeArgumentContext::TypeArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ReferenceTypeContext* Java20Parser::TypeArgumentContext::referenceType() {
  return getRuleContext<Java20Parser::ReferenceTypeContext>(0);
}

Java20Parser::WildcardContext* Java20Parser::TypeArgumentContext::wildcard() {
  return getRuleContext<Java20Parser::WildcardContext>(0);
}


size_t Java20Parser::TypeArgumentContext::getRuleIndex() const {
  return Java20Parser::RuleTypeArgument;
}


std::any Java20Parser::TypeArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypeArgument(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypeArgumentContext* Java20Parser::typeArgument() {
  TypeArgumentContext *_localctx = _tracker.createInstance<TypeArgumentContext>(_ctx, getState());
  enterRule(_localctx, 44, Java20Parser::RuleTypeArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(672);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(670);
      referenceType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(671);
      wildcard();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WildcardContext ------------------------------------------------------------------

Java20Parser::WildcardContext::WildcardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::WildcardContext::QUESTION() {
  return getToken(Java20Parser::QUESTION, 0);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::WildcardContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::WildcardContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}

Java20Parser::WildcardBoundsContext* Java20Parser::WildcardContext::wildcardBounds() {
  return getRuleContext<Java20Parser::WildcardBoundsContext>(0);
}


size_t Java20Parser::WildcardContext::getRuleIndex() const {
  return Java20Parser::RuleWildcard;
}


std::any Java20Parser::WildcardContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitWildcard(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::WildcardContext* Java20Parser::wildcard() {
  WildcardContext *_localctx = _tracker.createInstance<WildcardContext>(_ctx, getState());
  enterRule(_localctx, 46, Java20Parser::RuleWildcard);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(677);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(674);
      annotation();
      setState(679);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(680);
    match(Java20Parser::QUESTION);
    setState(682);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::EXTENDS

    || _la == Java20Parser::SUPER) {
      setState(681);
      wildcardBounds();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WildcardBoundsContext ------------------------------------------------------------------

Java20Parser::WildcardBoundsContext::WildcardBoundsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::WildcardBoundsContext::EXTENDS() {
  return getToken(Java20Parser::EXTENDS, 0);
}

Java20Parser::ReferenceTypeContext* Java20Parser::WildcardBoundsContext::referenceType() {
  return getRuleContext<Java20Parser::ReferenceTypeContext>(0);
}

tree::TerminalNode* Java20Parser::WildcardBoundsContext::SUPER() {
  return getToken(Java20Parser::SUPER, 0);
}


size_t Java20Parser::WildcardBoundsContext::getRuleIndex() const {
  return Java20Parser::RuleWildcardBounds;
}


std::any Java20Parser::WildcardBoundsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitWildcardBounds(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::WildcardBoundsContext* Java20Parser::wildcardBounds() {
  WildcardBoundsContext *_localctx = _tracker.createInstance<WildcardBoundsContext>(_ctx, getState());
  enterRule(_localctx, 48, Java20Parser::RuleWildcardBounds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(688);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::EXTENDS: {
        enterOuterAlt(_localctx, 1);
        setState(684);
        match(Java20Parser::EXTENDS);
        setState(685);
        referenceType();
        break;
      }

      case Java20Parser::SUPER: {
        enterOuterAlt(_localctx, 2);
        setState(686);
        match(Java20Parser::SUPER);
        setState(687);
        referenceType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleNameContext ------------------------------------------------------------------

Java20Parser::ModuleNameContext::ModuleNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ModuleNameContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::ModuleNameContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::ModuleNameContext* Java20Parser::ModuleNameContext::moduleName() {
  return getRuleContext<Java20Parser::ModuleNameContext>(0);
}


size_t Java20Parser::ModuleNameContext::getRuleIndex() const {
  return Java20Parser::RuleModuleName;
}


std::any Java20Parser::ModuleNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitModuleName(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ModuleNameContext* Java20Parser::moduleName() {
  ModuleNameContext *_localctx = _tracker.createInstance<ModuleNameContext>(_ctx, getState());
  enterRule(_localctx, 50, Java20Parser::RuleModuleName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(690);
    match(Java20Parser::Identifier);
    setState(693);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::DOT) {
      setState(691);
      match(Java20Parser::DOT);
      setState(692);
      moduleName();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageNameContext ------------------------------------------------------------------

Java20Parser::PackageNameContext::PackageNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::PackageNameContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::PackageNameContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::PackageNameContext* Java20Parser::PackageNameContext::packageName() {
  return getRuleContext<Java20Parser::PackageNameContext>(0);
}


size_t Java20Parser::PackageNameContext::getRuleIndex() const {
  return Java20Parser::RulePackageName;
}


std::any Java20Parser::PackageNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPackageName(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PackageNameContext* Java20Parser::packageName() {
  PackageNameContext *_localctx = _tracker.createInstance<PackageNameContext>(_ctx, getState());
  enterRule(_localctx, 52, Java20Parser::RulePackageName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(695);
    match(Java20Parser::Identifier);
    setState(698);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(696);
      match(Java20Parser::DOT);
      setState(697);
      packageName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNameContext ------------------------------------------------------------------

Java20Parser::TypeNameContext::TypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::PackageNameContext* Java20Parser::TypeNameContext::packageName() {
  return getRuleContext<Java20Parser::PackageNameContext>(0);
}

tree::TerminalNode* Java20Parser::TypeNameContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::TypeIdentifierContext* Java20Parser::TypeNameContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}


size_t Java20Parser::TypeNameContext::getRuleIndex() const {
  return Java20Parser::RuleTypeName;
}


std::any Java20Parser::TypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypeName(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypeNameContext* Java20Parser::typeName() {
  TypeNameContext *_localctx = _tracker.createInstance<TypeNameContext>(_ctx, getState());
  enterRule(_localctx, 54, Java20Parser::RuleTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(700);
    packageName();
    setState(703);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      setState(701);
      match(Java20Parser::DOT);
      setState(702);
      typeIdentifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageOrTypeNameContext ------------------------------------------------------------------

Java20Parser::PackageOrTypeNameContext::PackageOrTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::PackageOrTypeNameContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::PackageOrTypeNameContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::PackageOrTypeNameContext* Java20Parser::PackageOrTypeNameContext::packageOrTypeName() {
  return getRuleContext<Java20Parser::PackageOrTypeNameContext>(0);
}


size_t Java20Parser::PackageOrTypeNameContext::getRuleIndex() const {
  return Java20Parser::RulePackageOrTypeName;
}


std::any Java20Parser::PackageOrTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPackageOrTypeName(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PackageOrTypeNameContext* Java20Parser::packageOrTypeName() {
  PackageOrTypeNameContext *_localctx = _tracker.createInstance<PackageOrTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 56, Java20Parser::RulePackageOrTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(705);
    match(Java20Parser::Identifier);
    setState(708);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      setState(706);
      match(Java20Parser::DOT);
      setState(707);
      packageOrTypeName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionNameContext ------------------------------------------------------------------

Java20Parser::ExpressionNameContext::ExpressionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ExpressionNameContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

Java20Parser::AmbiguousNameContext* Java20Parser::ExpressionNameContext::ambiguousName() {
  return getRuleContext<Java20Parser::AmbiguousNameContext>(0);
}

tree::TerminalNode* Java20Parser::ExpressionNameContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}


size_t Java20Parser::ExpressionNameContext::getRuleIndex() const {
  return Java20Parser::RuleExpressionName;
}


std::any Java20Parser::ExpressionNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitExpressionName(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ExpressionNameContext* Java20Parser::expressionName() {
  ExpressionNameContext *_localctx = _tracker.createInstance<ExpressionNameContext>(_ctx, getState());
  enterRule(_localctx, 58, Java20Parser::RuleExpressionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(713);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      setState(710);
      ambiguousName();
      setState(711);
      match(Java20Parser::DOT);
      break;
    }

    default:
      break;
    }
    setState(715);
    match(Java20Parser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodNameContext ------------------------------------------------------------------

Java20Parser::MethodNameContext::MethodNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnqualifiedMethodIdentifierContext* Java20Parser::MethodNameContext::unqualifiedMethodIdentifier() {
  return getRuleContext<Java20Parser::UnqualifiedMethodIdentifierContext>(0);
}


size_t Java20Parser::MethodNameContext::getRuleIndex() const {
  return Java20Parser::RuleMethodName;
}


std::any Java20Parser::MethodNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitMethodName(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::MethodNameContext* Java20Parser::methodName() {
  MethodNameContext *_localctx = _tracker.createInstance<MethodNameContext>(_ctx, getState());
  enterRule(_localctx, 60, Java20Parser::RuleMethodName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(717);
    unqualifiedMethodIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AmbiguousNameContext ------------------------------------------------------------------

Java20Parser::AmbiguousNameContext::AmbiguousNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::AmbiguousNameContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::AmbiguousNameContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::AmbiguousNameContext* Java20Parser::AmbiguousNameContext::ambiguousName() {
  return getRuleContext<Java20Parser::AmbiguousNameContext>(0);
}


size_t Java20Parser::AmbiguousNameContext::getRuleIndex() const {
  return Java20Parser::RuleAmbiguousName;
}


std::any Java20Parser::AmbiguousNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAmbiguousName(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::AmbiguousNameContext* Java20Parser::ambiguousName() {
  AmbiguousNameContext *_localctx = _tracker.createInstance<AmbiguousNameContext>(_ctx, getState());
  enterRule(_localctx, 62, Java20Parser::RuleAmbiguousName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(719);
    match(Java20Parser::Identifier);
    setState(722);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(720);
      match(Java20Parser::DOT);
      setState(721);
      ambiguousName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompilationUnitContext ------------------------------------------------------------------

Java20Parser::CompilationUnitContext::CompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::OrdinaryCompilationUnitContext* Java20Parser::CompilationUnitContext::ordinaryCompilationUnit() {
  return getRuleContext<Java20Parser::OrdinaryCompilationUnitContext>(0);
}

Java20Parser::ModularCompilationUnitContext* Java20Parser::CompilationUnitContext::modularCompilationUnit() {
  return getRuleContext<Java20Parser::ModularCompilationUnitContext>(0);
}


size_t Java20Parser::CompilationUnitContext::getRuleIndex() const {
  return Java20Parser::RuleCompilationUnit;
}


std::any Java20Parser::CompilationUnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitCompilationUnit(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::CompilationUnitContext* Java20Parser::compilationUnit() {
  CompilationUnitContext *_localctx = _tracker.createInstance<CompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 64, Java20Parser::RuleCompilationUnit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(726);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(724);
      ordinaryCompilationUnit();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(725);
      modularCompilationUnit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrdinaryCompilationUnitContext ------------------------------------------------------------------

Java20Parser::OrdinaryCompilationUnitContext::OrdinaryCompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::PackageDeclarationContext* Java20Parser::OrdinaryCompilationUnitContext::packageDeclaration() {
  return getRuleContext<Java20Parser::PackageDeclarationContext>(0);
}

std::vector<Java20Parser::ImportDeclarationContext *> Java20Parser::OrdinaryCompilationUnitContext::importDeclaration() {
  return getRuleContexts<Java20Parser::ImportDeclarationContext>();
}

Java20Parser::ImportDeclarationContext* Java20Parser::OrdinaryCompilationUnitContext::importDeclaration(size_t i) {
  return getRuleContext<Java20Parser::ImportDeclarationContext>(i);
}

std::vector<Java20Parser::TopLevelClassOrInterfaceDeclarationContext *> Java20Parser::OrdinaryCompilationUnitContext::topLevelClassOrInterfaceDeclaration() {
  return getRuleContexts<Java20Parser::TopLevelClassOrInterfaceDeclarationContext>();
}

Java20Parser::TopLevelClassOrInterfaceDeclarationContext* Java20Parser::OrdinaryCompilationUnitContext::topLevelClassOrInterfaceDeclaration(size_t i) {
  return getRuleContext<Java20Parser::TopLevelClassOrInterfaceDeclarationContext>(i);
}


size_t Java20Parser::OrdinaryCompilationUnitContext::getRuleIndex() const {
  return Java20Parser::RuleOrdinaryCompilationUnit;
}


std::any Java20Parser::OrdinaryCompilationUnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitOrdinaryCompilationUnit(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::OrdinaryCompilationUnitContext* Java20Parser::ordinaryCompilationUnit() {
  OrdinaryCompilationUnitContext *_localctx = _tracker.createInstance<OrdinaryCompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 66, Java20Parser::RuleOrdinaryCompilationUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(729);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      setState(728);
      packageDeclaration();
      break;
    }

    default:
      break;
    }
    setState(734);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::IMPORT) {
      setState(731);
      importDeclaration();
      setState(736);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(740);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 116002917793925640) != 0) || _la == Java20Parser::SEMI

    || _la == Java20Parser::AT) {
      setState(737);
      topLevelClassOrInterfaceDeclaration();
      setState(742);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModularCompilationUnitContext ------------------------------------------------------------------

Java20Parser::ModularCompilationUnitContext::ModularCompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ModuleDeclarationContext* Java20Parser::ModularCompilationUnitContext::moduleDeclaration() {
  return getRuleContext<Java20Parser::ModuleDeclarationContext>(0);
}

std::vector<Java20Parser::ImportDeclarationContext *> Java20Parser::ModularCompilationUnitContext::importDeclaration() {
  return getRuleContexts<Java20Parser::ImportDeclarationContext>();
}

Java20Parser::ImportDeclarationContext* Java20Parser::ModularCompilationUnitContext::importDeclaration(size_t i) {
  return getRuleContext<Java20Parser::ImportDeclarationContext>(i);
}


size_t Java20Parser::ModularCompilationUnitContext::getRuleIndex() const {
  return Java20Parser::RuleModularCompilationUnit;
}


std::any Java20Parser::ModularCompilationUnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitModularCompilationUnit(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ModularCompilationUnitContext* Java20Parser::modularCompilationUnit() {
  ModularCompilationUnitContext *_localctx = _tracker.createInstance<ModularCompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 68, Java20Parser::RuleModularCompilationUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(746);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::IMPORT) {
      setState(743);
      importDeclaration();
      setState(748);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(749);
    moduleDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageDeclarationContext ------------------------------------------------------------------

Java20Parser::PackageDeclarationContext::PackageDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::PackageDeclarationContext::PACKAGE() {
  return getToken(Java20Parser::PACKAGE, 0);
}

std::vector<tree::TerminalNode *> Java20Parser::PackageDeclarationContext::Identifier() {
  return getTokens(Java20Parser::Identifier);
}

tree::TerminalNode* Java20Parser::PackageDeclarationContext::Identifier(size_t i) {
  return getToken(Java20Parser::Identifier, i);
}

tree::TerminalNode* Java20Parser::PackageDeclarationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}

std::vector<Java20Parser::PackageModifierContext *> Java20Parser::PackageDeclarationContext::packageModifier() {
  return getRuleContexts<Java20Parser::PackageModifierContext>();
}

Java20Parser::PackageModifierContext* Java20Parser::PackageDeclarationContext::packageModifier(size_t i) {
  return getRuleContext<Java20Parser::PackageModifierContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::PackageDeclarationContext::DOT() {
  return getTokens(Java20Parser::DOT);
}

tree::TerminalNode* Java20Parser::PackageDeclarationContext::DOT(size_t i) {
  return getToken(Java20Parser::DOT, i);
}


size_t Java20Parser::PackageDeclarationContext::getRuleIndex() const {
  return Java20Parser::RulePackageDeclaration;
}


std::any Java20Parser::PackageDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPackageDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PackageDeclarationContext* Java20Parser::packageDeclaration() {
  PackageDeclarationContext *_localctx = _tracker.createInstance<PackageDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 70, Java20Parser::RulePackageDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(754);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(751);
      packageModifier();
      setState(756);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(757);
    match(Java20Parser::PACKAGE);
    setState(758);
    match(Java20Parser::Identifier);
    setState(763);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::DOT) {
      setState(759);
      match(Java20Parser::DOT);
      setState(760);
      match(Java20Parser::Identifier);
      setState(765);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(766);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageModifierContext ------------------------------------------------------------------

Java20Parser::PackageModifierContext::PackageModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationContext* Java20Parser::PackageModifierContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}


size_t Java20Parser::PackageModifierContext::getRuleIndex() const {
  return Java20Parser::RulePackageModifier;
}


std::any Java20Parser::PackageModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPackageModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PackageModifierContext* Java20Parser::packageModifier() {
  PackageModifierContext *_localctx = _tracker.createInstance<PackageModifierContext>(_ctx, getState());
  enterRule(_localctx, 72, Java20Parser::RulePackageModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(768);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportDeclarationContext ------------------------------------------------------------------

Java20Parser::ImportDeclarationContext::ImportDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::SingleTypeImportDeclarationContext* Java20Parser::ImportDeclarationContext::singleTypeImportDeclaration() {
  return getRuleContext<Java20Parser::SingleTypeImportDeclarationContext>(0);
}

Java20Parser::TypeImportOnDemandDeclarationContext* Java20Parser::ImportDeclarationContext::typeImportOnDemandDeclaration() {
  return getRuleContext<Java20Parser::TypeImportOnDemandDeclarationContext>(0);
}

Java20Parser::SingleStaticImportDeclarationContext* Java20Parser::ImportDeclarationContext::singleStaticImportDeclaration() {
  return getRuleContext<Java20Parser::SingleStaticImportDeclarationContext>(0);
}

Java20Parser::StaticImportOnDemandDeclarationContext* Java20Parser::ImportDeclarationContext::staticImportOnDemandDeclaration() {
  return getRuleContext<Java20Parser::StaticImportOnDemandDeclarationContext>(0);
}


size_t Java20Parser::ImportDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleImportDeclaration;
}


std::any Java20Parser::ImportDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitImportDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ImportDeclarationContext* Java20Parser::importDeclaration() {
  ImportDeclarationContext *_localctx = _tracker.createInstance<ImportDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 74, Java20Parser::RuleImportDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(774);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(770);
      singleTypeImportDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(771);
      typeImportOnDemandDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(772);
      singleStaticImportDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(773);
      staticImportOnDemandDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleTypeImportDeclarationContext ------------------------------------------------------------------

Java20Parser::SingleTypeImportDeclarationContext::SingleTypeImportDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::SingleTypeImportDeclarationContext::IMPORT() {
  return getToken(Java20Parser::IMPORT, 0);
}

Java20Parser::TypeNameContext* Java20Parser::SingleTypeImportDeclarationContext::typeName() {
  return getRuleContext<Java20Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java20Parser::SingleTypeImportDeclarationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::SingleTypeImportDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleSingleTypeImportDeclaration;
}


std::any Java20Parser::SingleTypeImportDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitSingleTypeImportDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::SingleTypeImportDeclarationContext* Java20Parser::singleTypeImportDeclaration() {
  SingleTypeImportDeclarationContext *_localctx = _tracker.createInstance<SingleTypeImportDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 76, Java20Parser::RuleSingleTypeImportDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(776);
    match(Java20Parser::IMPORT);
    setState(777);
    typeName();
    setState(778);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeImportOnDemandDeclarationContext ------------------------------------------------------------------

Java20Parser::TypeImportOnDemandDeclarationContext::TypeImportOnDemandDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::TypeImportOnDemandDeclarationContext::IMPORT() {
  return getToken(Java20Parser::IMPORT, 0);
}

Java20Parser::PackageOrTypeNameContext* Java20Parser::TypeImportOnDemandDeclarationContext::packageOrTypeName() {
  return getRuleContext<Java20Parser::PackageOrTypeNameContext>(0);
}

tree::TerminalNode* Java20Parser::TypeImportOnDemandDeclarationContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

tree::TerminalNode* Java20Parser::TypeImportOnDemandDeclarationContext::MUL() {
  return getToken(Java20Parser::MUL, 0);
}

tree::TerminalNode* Java20Parser::TypeImportOnDemandDeclarationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::TypeImportOnDemandDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleTypeImportOnDemandDeclaration;
}


std::any Java20Parser::TypeImportOnDemandDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypeImportOnDemandDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypeImportOnDemandDeclarationContext* Java20Parser::typeImportOnDemandDeclaration() {
  TypeImportOnDemandDeclarationContext *_localctx = _tracker.createInstance<TypeImportOnDemandDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 78, Java20Parser::RuleTypeImportOnDemandDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(780);
    match(Java20Parser::IMPORT);
    setState(781);
    packageOrTypeName();
    setState(782);
    match(Java20Parser::DOT);
    setState(783);
    match(Java20Parser::MUL);
    setState(784);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleStaticImportDeclarationContext ------------------------------------------------------------------

Java20Parser::SingleStaticImportDeclarationContext::SingleStaticImportDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::SingleStaticImportDeclarationContext::IMPORT() {
  return getToken(Java20Parser::IMPORT, 0);
}

tree::TerminalNode* Java20Parser::SingleStaticImportDeclarationContext::STATIC() {
  return getToken(Java20Parser::STATIC, 0);
}

Java20Parser::TypeNameContext* Java20Parser::SingleStaticImportDeclarationContext::typeName() {
  return getRuleContext<Java20Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java20Parser::SingleStaticImportDeclarationContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

tree::TerminalNode* Java20Parser::SingleStaticImportDeclarationContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::SingleStaticImportDeclarationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::SingleStaticImportDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleSingleStaticImportDeclaration;
}


std::any Java20Parser::SingleStaticImportDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitSingleStaticImportDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::SingleStaticImportDeclarationContext* Java20Parser::singleStaticImportDeclaration() {
  SingleStaticImportDeclarationContext *_localctx = _tracker.createInstance<SingleStaticImportDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 80, Java20Parser::RuleSingleStaticImportDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(786);
    match(Java20Parser::IMPORT);
    setState(787);
    match(Java20Parser::STATIC);
    setState(788);
    typeName();
    setState(789);
    match(Java20Parser::DOT);
    setState(790);
    match(Java20Parser::Identifier);
    setState(791);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StaticImportOnDemandDeclarationContext ------------------------------------------------------------------

Java20Parser::StaticImportOnDemandDeclarationContext::StaticImportOnDemandDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::StaticImportOnDemandDeclarationContext::IMPORT() {
  return getToken(Java20Parser::IMPORT, 0);
}

tree::TerminalNode* Java20Parser::StaticImportOnDemandDeclarationContext::STATIC() {
  return getToken(Java20Parser::STATIC, 0);
}

Java20Parser::TypeNameContext* Java20Parser::StaticImportOnDemandDeclarationContext::typeName() {
  return getRuleContext<Java20Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java20Parser::StaticImportOnDemandDeclarationContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

tree::TerminalNode* Java20Parser::StaticImportOnDemandDeclarationContext::MUL() {
  return getToken(Java20Parser::MUL, 0);
}

tree::TerminalNode* Java20Parser::StaticImportOnDemandDeclarationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::StaticImportOnDemandDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleStaticImportOnDemandDeclaration;
}


std::any Java20Parser::StaticImportOnDemandDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitStaticImportOnDemandDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::StaticImportOnDemandDeclarationContext* Java20Parser::staticImportOnDemandDeclaration() {
  StaticImportOnDemandDeclarationContext *_localctx = _tracker.createInstance<StaticImportOnDemandDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 82, Java20Parser::RuleStaticImportOnDemandDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(793);
    match(Java20Parser::IMPORT);
    setState(794);
    match(Java20Parser::STATIC);
    setState(795);
    typeName();
    setState(796);
    match(Java20Parser::DOT);
    setState(797);
    match(Java20Parser::MUL);
    setState(798);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopLevelClassOrInterfaceDeclarationContext ------------------------------------------------------------------

Java20Parser::TopLevelClassOrInterfaceDeclarationContext::TopLevelClassOrInterfaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ClassDeclarationContext* Java20Parser::TopLevelClassOrInterfaceDeclarationContext::classDeclaration() {
  return getRuleContext<Java20Parser::ClassDeclarationContext>(0);
}

Java20Parser::InterfaceDeclarationContext* Java20Parser::TopLevelClassOrInterfaceDeclarationContext::interfaceDeclaration() {
  return getRuleContext<Java20Parser::InterfaceDeclarationContext>(0);
}

tree::TerminalNode* Java20Parser::TopLevelClassOrInterfaceDeclarationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::TopLevelClassOrInterfaceDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleTopLevelClassOrInterfaceDeclaration;
}


std::any Java20Parser::TopLevelClassOrInterfaceDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTopLevelClassOrInterfaceDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TopLevelClassOrInterfaceDeclarationContext* Java20Parser::topLevelClassOrInterfaceDeclaration() {
  TopLevelClassOrInterfaceDeclarationContext *_localctx = _tracker.createInstance<TopLevelClassOrInterfaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 84, Java20Parser::RuleTopLevelClassOrInterfaceDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(803);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(800);
      classDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(801);
      interfaceDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(802);
      match(Java20Parser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDeclarationContext ------------------------------------------------------------------

Java20Parser::ModuleDeclarationContext::ModuleDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ModuleDeclarationContext::MODULE() {
  return getToken(Java20Parser::MODULE, 0);
}

std::vector<tree::TerminalNode *> Java20Parser::ModuleDeclarationContext::Identifier() {
  return getTokens(Java20Parser::Identifier);
}

tree::TerminalNode* Java20Parser::ModuleDeclarationContext::Identifier(size_t i) {
  return getToken(Java20Parser::Identifier, i);
}

tree::TerminalNode* Java20Parser::ModuleDeclarationContext::LBRACE() {
  return getToken(Java20Parser::LBRACE, 0);
}

tree::TerminalNode* Java20Parser::ModuleDeclarationContext::RBRACE() {
  return getToken(Java20Parser::RBRACE, 0);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::ModuleDeclarationContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::ModuleDeclarationContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}

tree::TerminalNode* Java20Parser::ModuleDeclarationContext::OPEN() {
  return getToken(Java20Parser::OPEN, 0);
}

std::vector<tree::TerminalNode *> Java20Parser::ModuleDeclarationContext::DOT() {
  return getTokens(Java20Parser::DOT);
}

tree::TerminalNode* Java20Parser::ModuleDeclarationContext::DOT(size_t i) {
  return getToken(Java20Parser::DOT, i);
}

std::vector<Java20Parser::ModuleDirectiveContext *> Java20Parser::ModuleDeclarationContext::moduleDirective() {
  return getRuleContexts<Java20Parser::ModuleDirectiveContext>();
}

Java20Parser::ModuleDirectiveContext* Java20Parser::ModuleDeclarationContext::moduleDirective(size_t i) {
  return getRuleContext<Java20Parser::ModuleDirectiveContext>(i);
}


size_t Java20Parser::ModuleDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleModuleDeclaration;
}


std::any Java20Parser::ModuleDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitModuleDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ModuleDeclarationContext* Java20Parser::moduleDeclaration() {
  ModuleDeclarationContext *_localctx = _tracker.createInstance<ModuleDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 86, Java20Parser::RuleModuleDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(808);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(805);
      annotation();
      setState(810);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(812);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::OPEN) {
      setState(811);
      match(Java20Parser::OPEN);
    }
    setState(814);
    match(Java20Parser::MODULE);
    setState(815);
    match(Java20Parser::Identifier);
    setState(820);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::DOT) {
      setState(816);
      match(Java20Parser::DOT);
      setState(817);
      match(Java20Parser::Identifier);
      setState(822);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(823);
    match(Java20Parser::LBRACE);
    setState(827);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 17730) != 0)) {
      setState(824);
      moduleDirective();
      setState(829);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(830);
    match(Java20Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDirectiveContext ------------------------------------------------------------------

Java20Parser::ModuleDirectiveContext::ModuleDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ModuleDirectiveContext::REQUIRES() {
  return getToken(Java20Parser::REQUIRES, 0);
}

std::vector<Java20Parser::ModuleNameContext *> Java20Parser::ModuleDirectiveContext::moduleName() {
  return getRuleContexts<Java20Parser::ModuleNameContext>();
}

Java20Parser::ModuleNameContext* Java20Parser::ModuleDirectiveContext::moduleName(size_t i) {
  return getRuleContext<Java20Parser::ModuleNameContext>(i);
}

tree::TerminalNode* Java20Parser::ModuleDirectiveContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}

std::vector<Java20Parser::RequiresModifierContext *> Java20Parser::ModuleDirectiveContext::requiresModifier() {
  return getRuleContexts<Java20Parser::RequiresModifierContext>();
}

Java20Parser::RequiresModifierContext* Java20Parser::ModuleDirectiveContext::requiresModifier(size_t i) {
  return getRuleContext<Java20Parser::RequiresModifierContext>(i);
}

tree::TerminalNode* Java20Parser::ModuleDirectiveContext::EXPORTS() {
  return getToken(Java20Parser::EXPORTS, 0);
}

Java20Parser::PackageNameContext* Java20Parser::ModuleDirectiveContext::packageName() {
  return getRuleContext<Java20Parser::PackageNameContext>(0);
}

tree::TerminalNode* Java20Parser::ModuleDirectiveContext::TO() {
  return getToken(Java20Parser::TO, 0);
}

std::vector<tree::TerminalNode *> Java20Parser::ModuleDirectiveContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::ModuleDirectiveContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}

tree::TerminalNode* Java20Parser::ModuleDirectiveContext::OPENS() {
  return getToken(Java20Parser::OPENS, 0);
}

tree::TerminalNode* Java20Parser::ModuleDirectiveContext::USES() {
  return getToken(Java20Parser::USES, 0);
}

std::vector<Java20Parser::TypeNameContext *> Java20Parser::ModuleDirectiveContext::typeName() {
  return getRuleContexts<Java20Parser::TypeNameContext>();
}

Java20Parser::TypeNameContext* Java20Parser::ModuleDirectiveContext::typeName(size_t i) {
  return getRuleContext<Java20Parser::TypeNameContext>(i);
}

tree::TerminalNode* Java20Parser::ModuleDirectiveContext::PROVIDES() {
  return getToken(Java20Parser::PROVIDES, 0);
}

tree::TerminalNode* Java20Parser::ModuleDirectiveContext::WITH() {
  return getToken(Java20Parser::WITH, 0);
}


size_t Java20Parser::ModuleDirectiveContext::getRuleIndex() const {
  return Java20Parser::RuleModuleDirective;
}


std::any Java20Parser::ModuleDirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitModuleDirective(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ModuleDirectiveContext* Java20Parser::moduleDirective() {
  ModuleDirectiveContext *_localctx = _tracker.createInstance<ModuleDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 88, Java20Parser::RuleModuleDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(889);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::REQUIRES: {
        enterOuterAlt(_localctx, 1);
        setState(832);
        match(Java20Parser::REQUIRES);
        setState(836);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java20Parser::TRANSITIVE

        || _la == Java20Parser::STATIC) {
          setState(833);
          requiresModifier();
          setState(838);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(839);
        moduleName();
        setState(840);
        match(Java20Parser::SEMI);
        break;
      }

      case Java20Parser::EXPORTS: {
        enterOuterAlt(_localctx, 2);
        setState(842);
        match(Java20Parser::EXPORTS);
        setState(843);
        packageName();
        setState(853);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Java20Parser::TO) {
          setState(844);
          match(Java20Parser::TO);
          setState(845);
          moduleName();
          setState(850);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == Java20Parser::COMMA) {
            setState(846);
            match(Java20Parser::COMMA);
            setState(847);
            moduleName();
            setState(852);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(855);
        match(Java20Parser::SEMI);
        break;
      }

      case Java20Parser::OPENS: {
        enterOuterAlt(_localctx, 3);
        setState(857);
        match(Java20Parser::OPENS);
        setState(858);
        packageName();
        setState(868);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Java20Parser::TO) {
          setState(859);
          match(Java20Parser::TO);
          setState(860);
          moduleName();
          setState(865);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == Java20Parser::COMMA) {
            setState(861);
            match(Java20Parser::COMMA);
            setState(862);
            moduleName();
            setState(867);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(870);
        match(Java20Parser::SEMI);
        break;
      }

      case Java20Parser::USES: {
        enterOuterAlt(_localctx, 4);
        setState(872);
        match(Java20Parser::USES);
        setState(873);
        typeName();
        setState(874);
        match(Java20Parser::SEMI);
        break;
      }

      case Java20Parser::PROVIDES: {
        enterOuterAlt(_localctx, 5);
        setState(876);
        match(Java20Parser::PROVIDES);
        setState(877);
        typeName();
        setState(878);
        match(Java20Parser::WITH);
        setState(879);
        typeName();
        setState(884);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java20Parser::COMMA) {
          setState(880);
          match(Java20Parser::COMMA);
          setState(881);
          typeName();
          setState(886);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(887);
        match(Java20Parser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RequiresModifierContext ------------------------------------------------------------------

Java20Parser::RequiresModifierContext::RequiresModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::RequiresModifierContext::TRANSITIVE() {
  return getToken(Java20Parser::TRANSITIVE, 0);
}

tree::TerminalNode* Java20Parser::RequiresModifierContext::STATIC() {
  return getToken(Java20Parser::STATIC, 0);
}


size_t Java20Parser::RequiresModifierContext::getRuleIndex() const {
  return Java20Parser::RuleRequiresModifier;
}


std::any Java20Parser::RequiresModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitRequiresModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::RequiresModifierContext* Java20Parser::requiresModifier() {
  RequiresModifierContext *_localctx = _tracker.createInstance<RequiresModifierContext>(_ctx, getState());
  enterRule(_localctx, 90, Java20Parser::RuleRequiresModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(891);
    _la = _input->LA(1);
    if (!(_la == Java20Parser::TRANSITIVE

    || _la == Java20Parser::STATIC)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDeclarationContext ------------------------------------------------------------------

Java20Parser::ClassDeclarationContext::ClassDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::NormalClassDeclarationContext* Java20Parser::ClassDeclarationContext::normalClassDeclaration() {
  return getRuleContext<Java20Parser::NormalClassDeclarationContext>(0);
}

Java20Parser::EnumDeclarationContext* Java20Parser::ClassDeclarationContext::enumDeclaration() {
  return getRuleContext<Java20Parser::EnumDeclarationContext>(0);
}

Java20Parser::RecordDeclarationContext* Java20Parser::ClassDeclarationContext::recordDeclaration() {
  return getRuleContext<Java20Parser::RecordDeclarationContext>(0);
}


size_t Java20Parser::ClassDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleClassDeclaration;
}


std::any Java20Parser::ClassDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitClassDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ClassDeclarationContext* Java20Parser::classDeclaration() {
  ClassDeclarationContext *_localctx = _tracker.createInstance<ClassDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 92, Java20Parser::RuleClassDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(896);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(893);
      normalClassDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(894);
      enumDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(895);
      recordDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalClassDeclarationContext ------------------------------------------------------------------

Java20Parser::NormalClassDeclarationContext::NormalClassDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::NormalClassDeclarationContext::CLASS() {
  return getToken(Java20Parser::CLASS, 0);
}

Java20Parser::TypeIdentifierContext* Java20Parser::NormalClassDeclarationContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}

Java20Parser::ClassBodyContext* Java20Parser::NormalClassDeclarationContext::classBody() {
  return getRuleContext<Java20Parser::ClassBodyContext>(0);
}

std::vector<Java20Parser::ClassModifierContext *> Java20Parser::NormalClassDeclarationContext::classModifier() {
  return getRuleContexts<Java20Parser::ClassModifierContext>();
}

Java20Parser::ClassModifierContext* Java20Parser::NormalClassDeclarationContext::classModifier(size_t i) {
  return getRuleContext<Java20Parser::ClassModifierContext>(i);
}

Java20Parser::TypeParametersContext* Java20Parser::NormalClassDeclarationContext::typeParameters() {
  return getRuleContext<Java20Parser::TypeParametersContext>(0);
}

Java20Parser::ClassExtendsContext* Java20Parser::NormalClassDeclarationContext::classExtends() {
  return getRuleContext<Java20Parser::ClassExtendsContext>(0);
}

Java20Parser::ClassImplementsContext* Java20Parser::NormalClassDeclarationContext::classImplements() {
  return getRuleContext<Java20Parser::ClassImplementsContext>(0);
}

Java20Parser::ClassPermitsContext* Java20Parser::NormalClassDeclarationContext::classPermits() {
  return getRuleContext<Java20Parser::ClassPermitsContext>(0);
}


size_t Java20Parser::NormalClassDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleNormalClassDeclaration;
}


std::any Java20Parser::NormalClassDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitNormalClassDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::NormalClassDeclarationContext* Java20Parser::normalClassDeclaration() {
  NormalClassDeclarationContext *_localctx = _tracker.createInstance<NormalClassDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 94, Java20Parser::RuleNormalClassDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(901);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 115967724764792840) != 0) || _la == Java20Parser::AT) {
      setState(898);
      classModifier();
      setState(903);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(904);
    match(Java20Parser::CLASS);
    setState(905);
    typeIdentifier();
    setState(907);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::LT) {
      setState(906);
      typeParameters();
    }
    setState(910);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::EXTENDS) {
      setState(909);
      classExtends();
    }
    setState(913);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::IMPLEMENTS) {
      setState(912);
      classImplements();
    }
    setState(916);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::PERMITS) {
      setState(915);
      classPermits();
    }
    setState(918);
    classBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassModifierContext ------------------------------------------------------------------

Java20Parser::ClassModifierContext::ClassModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationContext* Java20Parser::ClassModifierContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java20Parser::ClassModifierContext::PUBLIC() {
  return getToken(Java20Parser::PUBLIC, 0);
}

tree::TerminalNode* Java20Parser::ClassModifierContext::PROTECTED() {
  return getToken(Java20Parser::PROTECTED, 0);
}

tree::TerminalNode* Java20Parser::ClassModifierContext::PRIVATE() {
  return getToken(Java20Parser::PRIVATE, 0);
}

tree::TerminalNode* Java20Parser::ClassModifierContext::ABSTRACT() {
  return getToken(Java20Parser::ABSTRACT, 0);
}

tree::TerminalNode* Java20Parser::ClassModifierContext::STATIC() {
  return getToken(Java20Parser::STATIC, 0);
}

tree::TerminalNode* Java20Parser::ClassModifierContext::FINAL() {
  return getToken(Java20Parser::FINAL, 0);
}

tree::TerminalNode* Java20Parser::ClassModifierContext::SEALED() {
  return getToken(Java20Parser::SEALED, 0);
}

tree::TerminalNode* Java20Parser::ClassModifierContext::NONSEALED() {
  return getToken(Java20Parser::NONSEALED, 0);
}

tree::TerminalNode* Java20Parser::ClassModifierContext::STRICTFP() {
  return getToken(Java20Parser::STRICTFP, 0);
}


size_t Java20Parser::ClassModifierContext::getRuleIndex() const {
  return Java20Parser::RuleClassModifier;
}


std::any Java20Parser::ClassModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitClassModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ClassModifierContext* Java20Parser::classModifier() {
  ClassModifierContext *_localctx = _tracker.createInstance<ClassModifierContext>(_ctx, getState());
  enterRule(_localctx, 96, Java20Parser::RuleClassModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(930);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(920);
        annotation();
        break;
      }

      case Java20Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(921);
        match(Java20Parser::PUBLIC);
        break;
      }

      case Java20Parser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(922);
        match(Java20Parser::PROTECTED);
        break;
      }

      case Java20Parser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(923);
        match(Java20Parser::PRIVATE);
        break;
      }

      case Java20Parser::ABSTRACT: {
        enterOuterAlt(_localctx, 5);
        setState(924);
        match(Java20Parser::ABSTRACT);
        break;
      }

      case Java20Parser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(925);
        match(Java20Parser::STATIC);
        break;
      }

      case Java20Parser::FINAL: {
        enterOuterAlt(_localctx, 7);
        setState(926);
        match(Java20Parser::FINAL);
        break;
      }

      case Java20Parser::SEALED: {
        enterOuterAlt(_localctx, 8);
        setState(927);
        match(Java20Parser::SEALED);
        break;
      }

      case Java20Parser::NONSEALED: {
        enterOuterAlt(_localctx, 9);
        setState(928);
        match(Java20Parser::NONSEALED);
        break;
      }

      case Java20Parser::STRICTFP: {
        enterOuterAlt(_localctx, 10);
        setState(929);
        match(Java20Parser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParametersContext ------------------------------------------------------------------

Java20Parser::TypeParametersContext::TypeParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::TypeParametersContext::LT() {
  return getToken(Java20Parser::LT, 0);
}

Java20Parser::TypeParameterListContext* Java20Parser::TypeParametersContext::typeParameterList() {
  return getRuleContext<Java20Parser::TypeParameterListContext>(0);
}

tree::TerminalNode* Java20Parser::TypeParametersContext::GT() {
  return getToken(Java20Parser::GT, 0);
}


size_t Java20Parser::TypeParametersContext::getRuleIndex() const {
  return Java20Parser::RuleTypeParameters;
}


std::any Java20Parser::TypeParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypeParameters(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypeParametersContext* Java20Parser::typeParameters() {
  TypeParametersContext *_localctx = _tracker.createInstance<TypeParametersContext>(_ctx, getState());
  enterRule(_localctx, 98, Java20Parser::RuleTypeParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(932);
    match(Java20Parser::LT);
    setState(933);
    typeParameterList();
    setState(934);
    match(Java20Parser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterListContext ------------------------------------------------------------------

Java20Parser::TypeParameterListContext::TypeParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::TypeParameterContext *> Java20Parser::TypeParameterListContext::typeParameter() {
  return getRuleContexts<Java20Parser::TypeParameterContext>();
}

Java20Parser::TypeParameterContext* Java20Parser::TypeParameterListContext::typeParameter(size_t i) {
  return getRuleContext<Java20Parser::TypeParameterContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::TypeParameterListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::TypeParameterListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::TypeParameterListContext::getRuleIndex() const {
  return Java20Parser::RuleTypeParameterList;
}


std::any Java20Parser::TypeParameterListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypeParameterList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypeParameterListContext* Java20Parser::typeParameterList() {
  TypeParameterListContext *_localctx = _tracker.createInstance<TypeParameterListContext>(_ctx, getState());
  enterRule(_localctx, 100, Java20Parser::RuleTypeParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(936);
    typeParameter();
    setState(941);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::COMMA) {
      setState(937);
      match(Java20Parser::COMMA);
      setState(938);
      typeParameter();
      setState(943);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassExtendsContext ------------------------------------------------------------------

Java20Parser::ClassExtendsContext::ClassExtendsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ClassExtendsContext::EXTENDS() {
  return getToken(Java20Parser::EXTENDS, 0);
}

Java20Parser::ClassTypeContext* Java20Parser::ClassExtendsContext::classType() {
  return getRuleContext<Java20Parser::ClassTypeContext>(0);
}


size_t Java20Parser::ClassExtendsContext::getRuleIndex() const {
  return Java20Parser::RuleClassExtends;
}


std::any Java20Parser::ClassExtendsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitClassExtends(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ClassExtendsContext* Java20Parser::classExtends() {
  ClassExtendsContext *_localctx = _tracker.createInstance<ClassExtendsContext>(_ctx, getState());
  enterRule(_localctx, 102, Java20Parser::RuleClassExtends);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(944);
    match(Java20Parser::EXTENDS);
    setState(945);
    classType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassImplementsContext ------------------------------------------------------------------

Java20Parser::ClassImplementsContext::ClassImplementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ClassImplementsContext::IMPLEMENTS() {
  return getToken(Java20Parser::IMPLEMENTS, 0);
}

Java20Parser::InterfaceTypeListContext* Java20Parser::ClassImplementsContext::interfaceTypeList() {
  return getRuleContext<Java20Parser::InterfaceTypeListContext>(0);
}


size_t Java20Parser::ClassImplementsContext::getRuleIndex() const {
  return Java20Parser::RuleClassImplements;
}


std::any Java20Parser::ClassImplementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitClassImplements(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ClassImplementsContext* Java20Parser::classImplements() {
  ClassImplementsContext *_localctx = _tracker.createInstance<ClassImplementsContext>(_ctx, getState());
  enterRule(_localctx, 104, Java20Parser::RuleClassImplements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(947);
    match(Java20Parser::IMPLEMENTS);
    setState(948);
    interfaceTypeList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceTypeListContext ------------------------------------------------------------------

Java20Parser::InterfaceTypeListContext::InterfaceTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::InterfaceTypeContext *> Java20Parser::InterfaceTypeListContext::interfaceType() {
  return getRuleContexts<Java20Parser::InterfaceTypeContext>();
}

Java20Parser::InterfaceTypeContext* Java20Parser::InterfaceTypeListContext::interfaceType(size_t i) {
  return getRuleContext<Java20Parser::InterfaceTypeContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::InterfaceTypeListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::InterfaceTypeListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::InterfaceTypeListContext::getRuleIndex() const {
  return Java20Parser::RuleInterfaceTypeList;
}


std::any Java20Parser::InterfaceTypeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceTypeList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::InterfaceTypeListContext* Java20Parser::interfaceTypeList() {
  InterfaceTypeListContext *_localctx = _tracker.createInstance<InterfaceTypeListContext>(_ctx, getState());
  enterRule(_localctx, 106, Java20Parser::RuleInterfaceTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(950);
    interfaceType();
    setState(955);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::COMMA) {
      setState(951);
      match(Java20Parser::COMMA);
      setState(952);
      interfaceType();
      setState(957);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassPermitsContext ------------------------------------------------------------------

Java20Parser::ClassPermitsContext::ClassPermitsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ClassPermitsContext::PERMITS() {
  return getToken(Java20Parser::PERMITS, 0);
}

std::vector<Java20Parser::TypeNameContext *> Java20Parser::ClassPermitsContext::typeName() {
  return getRuleContexts<Java20Parser::TypeNameContext>();
}

Java20Parser::TypeNameContext* Java20Parser::ClassPermitsContext::typeName(size_t i) {
  return getRuleContext<Java20Parser::TypeNameContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::ClassPermitsContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::ClassPermitsContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::ClassPermitsContext::getRuleIndex() const {
  return Java20Parser::RuleClassPermits;
}


std::any Java20Parser::ClassPermitsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitClassPermits(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ClassPermitsContext* Java20Parser::classPermits() {
  ClassPermitsContext *_localctx = _tracker.createInstance<ClassPermitsContext>(_ctx, getState());
  enterRule(_localctx, 108, Java20Parser::RuleClassPermits);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(958);
    match(Java20Parser::PERMITS);
    setState(959);
    typeName();
    setState(964);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::COMMA) {
      setState(960);
      match(Java20Parser::COMMA);
      setState(961);
      typeName();
      setState(966);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyContext ------------------------------------------------------------------

Java20Parser::ClassBodyContext::ClassBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ClassBodyContext::LBRACE() {
  return getToken(Java20Parser::LBRACE, 0);
}

tree::TerminalNode* Java20Parser::ClassBodyContext::RBRACE() {
  return getToken(Java20Parser::RBRACE, 0);
}

std::vector<Java20Parser::ClassBodyDeclarationContext *> Java20Parser::ClassBodyContext::classBodyDeclaration() {
  return getRuleContexts<Java20Parser::ClassBodyDeclarationContext>();
}

Java20Parser::ClassBodyDeclarationContext* Java20Parser::ClassBodyContext::classBodyDeclaration(size_t i) {
  return getRuleContext<Java20Parser::ClassBodyDeclarationContext>(i);
}


size_t Java20Parser::ClassBodyContext::getRuleIndex() const {
  return Java20Parser::RuleClassBody;
}


std::any Java20Parser::ClassBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitClassBody(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ClassBodyContext* Java20Parser::classBody() {
  ClassBodyContext *_localctx = _tracker.createInstance<ClassBodyContext>(_ctx, getState());
  enterRule(_localctx, 110, Java20Parser::RuleClassBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(967);
    match(Java20Parser::LBRACE);
    setState(971);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8512665130204132856) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288230376187502595) != 0)) {
      setState(968);
      classBodyDeclaration();
      setState(973);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(974);
    match(Java20Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyDeclarationContext ------------------------------------------------------------------

Java20Parser::ClassBodyDeclarationContext::ClassBodyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ClassMemberDeclarationContext* Java20Parser::ClassBodyDeclarationContext::classMemberDeclaration() {
  return getRuleContext<Java20Parser::ClassMemberDeclarationContext>(0);
}

Java20Parser::InstanceInitializerContext* Java20Parser::ClassBodyDeclarationContext::instanceInitializer() {
  return getRuleContext<Java20Parser::InstanceInitializerContext>(0);
}

Java20Parser::StaticInitializerContext* Java20Parser::ClassBodyDeclarationContext::staticInitializer() {
  return getRuleContext<Java20Parser::StaticInitializerContext>(0);
}

Java20Parser::ConstructorDeclarationContext* Java20Parser::ClassBodyDeclarationContext::constructorDeclaration() {
  return getRuleContext<Java20Parser::ConstructorDeclarationContext>(0);
}


size_t Java20Parser::ClassBodyDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleClassBodyDeclaration;
}


std::any Java20Parser::ClassBodyDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitClassBodyDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ClassBodyDeclarationContext* Java20Parser::classBodyDeclaration() {
  ClassBodyDeclarationContext *_localctx = _tracker.createInstance<ClassBodyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 112, Java20Parser::RuleClassBodyDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(980);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(976);
      classMemberDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(977);
      instanceInitializer();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(978);
      staticInitializer();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(979);
      constructorDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassMemberDeclarationContext ------------------------------------------------------------------

Java20Parser::ClassMemberDeclarationContext::ClassMemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::FieldDeclarationContext* Java20Parser::ClassMemberDeclarationContext::fieldDeclaration() {
  return getRuleContext<Java20Parser::FieldDeclarationContext>(0);
}

Java20Parser::MethodDeclarationContext* Java20Parser::ClassMemberDeclarationContext::methodDeclaration() {
  return getRuleContext<Java20Parser::MethodDeclarationContext>(0);
}

Java20Parser::ClassDeclarationContext* Java20Parser::ClassMemberDeclarationContext::classDeclaration() {
  return getRuleContext<Java20Parser::ClassDeclarationContext>(0);
}

Java20Parser::InterfaceDeclarationContext* Java20Parser::ClassMemberDeclarationContext::interfaceDeclaration() {
  return getRuleContext<Java20Parser::InterfaceDeclarationContext>(0);
}

tree::TerminalNode* Java20Parser::ClassMemberDeclarationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::ClassMemberDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleClassMemberDeclaration;
}


std::any Java20Parser::ClassMemberDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitClassMemberDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ClassMemberDeclarationContext* Java20Parser::classMemberDeclaration() {
  ClassMemberDeclarationContext *_localctx = _tracker.createInstance<ClassMemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 114, Java20Parser::RuleClassMemberDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(987);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(982);
      fieldDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(983);
      methodDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(984);
      classDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(985);
      interfaceDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(986);
      match(Java20Parser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclarationContext ------------------------------------------------------------------

Java20Parser::FieldDeclarationContext::FieldDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannTypeContext* Java20Parser::FieldDeclarationContext::unannType() {
  return getRuleContext<Java20Parser::UnannTypeContext>(0);
}

Java20Parser::VariableDeclaratorListContext* Java20Parser::FieldDeclarationContext::variableDeclaratorList() {
  return getRuleContext<Java20Parser::VariableDeclaratorListContext>(0);
}

tree::TerminalNode* Java20Parser::FieldDeclarationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}

std::vector<Java20Parser::FieldModifierContext *> Java20Parser::FieldDeclarationContext::fieldModifier() {
  return getRuleContexts<Java20Parser::FieldModifierContext>();
}

Java20Parser::FieldModifierContext* Java20Parser::FieldDeclarationContext::fieldModifier(size_t i) {
  return getRuleContext<Java20Parser::FieldModifierContext>(i);
}


size_t Java20Parser::FieldDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleFieldDeclaration;
}


std::any Java20Parser::FieldDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitFieldDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::FieldDeclarationContext* Java20Parser::fieldDeclaration() {
  FieldDeclarationContext *_localctx = _tracker.createInstance<FieldDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 116, Java20Parser::RuleFieldDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(992);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 35) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 35)) & 2251802230882305) != 0)) {
      setState(989);
      fieldModifier();
      setState(994);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(995);
    unannType();
    setState(996);
    variableDeclaratorList();
    setState(997);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldModifierContext ------------------------------------------------------------------

Java20Parser::FieldModifierContext::FieldModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationContext* Java20Parser::FieldModifierContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java20Parser::FieldModifierContext::PUBLIC() {
  return getToken(Java20Parser::PUBLIC, 0);
}

tree::TerminalNode* Java20Parser::FieldModifierContext::PROTECTED() {
  return getToken(Java20Parser::PROTECTED, 0);
}

tree::TerminalNode* Java20Parser::FieldModifierContext::PRIVATE() {
  return getToken(Java20Parser::PRIVATE, 0);
}

tree::TerminalNode* Java20Parser::FieldModifierContext::STATIC() {
  return getToken(Java20Parser::STATIC, 0);
}

tree::TerminalNode* Java20Parser::FieldModifierContext::FINAL() {
  return getToken(Java20Parser::FINAL, 0);
}

tree::TerminalNode* Java20Parser::FieldModifierContext::TRANSIENT() {
  return getToken(Java20Parser::TRANSIENT, 0);
}

tree::TerminalNode* Java20Parser::FieldModifierContext::VOLATILE() {
  return getToken(Java20Parser::VOLATILE, 0);
}


size_t Java20Parser::FieldModifierContext::getRuleIndex() const {
  return Java20Parser::RuleFieldModifier;
}


std::any Java20Parser::FieldModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitFieldModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::FieldModifierContext* Java20Parser::fieldModifier() {
  FieldModifierContext *_localctx = _tracker.createInstance<FieldModifierContext>(_ctx, getState());
  enterRule(_localctx, 118, Java20Parser::RuleFieldModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1007);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(999);
        annotation();
        break;
      }

      case Java20Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1000);
        match(Java20Parser::PUBLIC);
        break;
      }

      case Java20Parser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(1001);
        match(Java20Parser::PROTECTED);
        break;
      }

      case Java20Parser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(1002);
        match(Java20Parser::PRIVATE);
        break;
      }

      case Java20Parser::STATIC: {
        enterOuterAlt(_localctx, 5);
        setState(1003);
        match(Java20Parser::STATIC);
        break;
      }

      case Java20Parser::FINAL: {
        enterOuterAlt(_localctx, 6);
        setState(1004);
        match(Java20Parser::FINAL);
        break;
      }

      case Java20Parser::TRANSIENT: {
        enterOuterAlt(_localctx, 7);
        setState(1005);
        match(Java20Parser::TRANSIENT);
        break;
      }

      case Java20Parser::VOLATILE: {
        enterOuterAlt(_localctx, 8);
        setState(1006);
        match(Java20Parser::VOLATILE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorListContext ------------------------------------------------------------------

Java20Parser::VariableDeclaratorListContext::VariableDeclaratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::VariableDeclaratorContext *> Java20Parser::VariableDeclaratorListContext::variableDeclarator() {
  return getRuleContexts<Java20Parser::VariableDeclaratorContext>();
}

Java20Parser::VariableDeclaratorContext* Java20Parser::VariableDeclaratorListContext::variableDeclarator(size_t i) {
  return getRuleContext<Java20Parser::VariableDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::VariableDeclaratorListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::VariableDeclaratorListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::VariableDeclaratorListContext::getRuleIndex() const {
  return Java20Parser::RuleVariableDeclaratorList;
}


std::any Java20Parser::VariableDeclaratorListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitVariableDeclaratorList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::VariableDeclaratorListContext* Java20Parser::variableDeclaratorList() {
  VariableDeclaratorListContext *_localctx = _tracker.createInstance<VariableDeclaratorListContext>(_ctx, getState());
  enterRule(_localctx, 120, Java20Parser::RuleVariableDeclaratorList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1009);
    variableDeclarator();
    setState(1014);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1010);
        match(Java20Parser::COMMA);
        setState(1011);
        variableDeclarator(); 
      }
      setState(1016);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorContext ------------------------------------------------------------------

Java20Parser::VariableDeclaratorContext::VariableDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::VariableDeclaratorIdContext* Java20Parser::VariableDeclaratorContext::variableDeclaratorId() {
  return getRuleContext<Java20Parser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* Java20Parser::VariableDeclaratorContext::ASSIGN() {
  return getToken(Java20Parser::ASSIGN, 0);
}

Java20Parser::VariableInitializerContext* Java20Parser::VariableDeclaratorContext::variableInitializer() {
  return getRuleContext<Java20Parser::VariableInitializerContext>(0);
}


size_t Java20Parser::VariableDeclaratorContext::getRuleIndex() const {
  return Java20Parser::RuleVariableDeclarator;
}


std::any Java20Parser::VariableDeclaratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitVariableDeclarator(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::VariableDeclaratorContext* Java20Parser::variableDeclarator() {
  VariableDeclaratorContext *_localctx = _tracker.createInstance<VariableDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 122, Java20Parser::RuleVariableDeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1017);
    variableDeclaratorId();
    setState(1020);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      setState(1018);
      match(Java20Parser::ASSIGN);
      setState(1019);
      variableInitializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorIdContext ------------------------------------------------------------------

Java20Parser::VariableDeclaratorIdContext::VariableDeclaratorIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::VariableDeclaratorIdContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

Java20Parser::DimsContext* Java20Parser::VariableDeclaratorIdContext::dims() {
  return getRuleContext<Java20Parser::DimsContext>(0);
}


size_t Java20Parser::VariableDeclaratorIdContext::getRuleIndex() const {
  return Java20Parser::RuleVariableDeclaratorId;
}


std::any Java20Parser::VariableDeclaratorIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitVariableDeclaratorId(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::VariableDeclaratorIdContext* Java20Parser::variableDeclaratorId() {
  VariableDeclaratorIdContext *_localctx = _tracker.createInstance<VariableDeclaratorIdContext>(_ctx, getState());
  enterRule(_localctx, 124, Java20Parser::RuleVariableDeclaratorId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1022);
    match(Java20Parser::Identifier);
    setState(1024);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      setState(1023);
      dims();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializerContext ------------------------------------------------------------------

Java20Parser::VariableInitializerContext::VariableInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ExpressionContext* Java20Parser::VariableInitializerContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

Java20Parser::ArrayInitializerContext* Java20Parser::VariableInitializerContext::arrayInitializer() {
  return getRuleContext<Java20Parser::ArrayInitializerContext>(0);
}


size_t Java20Parser::VariableInitializerContext::getRuleIndex() const {
  return Java20Parser::RuleVariableInitializer;
}


std::any Java20Parser::VariableInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitVariableInitializer(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::VariableInitializerContext* Java20Parser::variableInitializer() {
  VariableInitializerContext *_localctx = _tracker.createInstance<VariableInitializerContext>(_ctx, getState());
  enterRule(_localctx, 126, Java20Parser::RuleVariableInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1028);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::BOOLEAN:
      case Java20Parser::BYTE:
      case Java20Parser::CHAR:
      case Java20Parser::DOUBLE:
      case Java20Parser::FLOAT:
      case Java20Parser::INT:
      case Java20Parser::LONG:
      case Java20Parser::NEW:
      case Java20Parser::SHORT:
      case Java20Parser::SUPER:
      case Java20Parser::SWITCH:
      case Java20Parser::THIS:
      case Java20Parser::VOID:
      case Java20Parser::IntegerLiteral:
      case Java20Parser::FloatingPointLiteral:
      case Java20Parser::BooleanLiteral:
      case Java20Parser::CharacterLiteral:
      case Java20Parser::StringLiteral:
      case Java20Parser::TextBlock:
      case Java20Parser::NullLiteral:
      case Java20Parser::LPAREN:
      case Java20Parser::AT:
      case Java20Parser::BANG:
      case Java20Parser::TILDE:
      case Java20Parser::INC:
      case Java20Parser::DEC:
      case Java20Parser::ADD:
      case Java20Parser::SUB:
      case Java20Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1026);
        expression();
        break;
      }

      case Java20Parser::LBRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1027);
        arrayInitializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannTypeContext ------------------------------------------------------------------

Java20Parser::UnannTypeContext::UnannTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannPrimitiveTypeContext* Java20Parser::UnannTypeContext::unannPrimitiveType() {
  return getRuleContext<Java20Parser::UnannPrimitiveTypeContext>(0);
}

Java20Parser::UnannReferenceTypeContext* Java20Parser::UnannTypeContext::unannReferenceType() {
  return getRuleContext<Java20Parser::UnannReferenceTypeContext>(0);
}


size_t Java20Parser::UnannTypeContext::getRuleIndex() const {
  return Java20Parser::RuleUnannType;
}


std::any Java20Parser::UnannTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitUnannType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::UnannTypeContext* Java20Parser::unannType() {
  UnannTypeContext *_localctx = _tracker.createInstance<UnannTypeContext>(_ctx, getState());
  enterRule(_localctx, 128, Java20Parser::RuleUnannType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1032);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1030);
      unannPrimitiveType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1031);
      unannReferenceType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannPrimitiveTypeContext ------------------------------------------------------------------

Java20Parser::UnannPrimitiveTypeContext::UnannPrimitiveTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::NumericTypeContext* Java20Parser::UnannPrimitiveTypeContext::numericType() {
  return getRuleContext<Java20Parser::NumericTypeContext>(0);
}

tree::TerminalNode* Java20Parser::UnannPrimitiveTypeContext::BOOLEAN() {
  return getToken(Java20Parser::BOOLEAN, 0);
}


size_t Java20Parser::UnannPrimitiveTypeContext::getRuleIndex() const {
  return Java20Parser::RuleUnannPrimitiveType;
}


std::any Java20Parser::UnannPrimitiveTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitUnannPrimitiveType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::UnannPrimitiveTypeContext* Java20Parser::unannPrimitiveType() {
  UnannPrimitiveTypeContext *_localctx = _tracker.createInstance<UnannPrimitiveTypeContext>(_ctx, getState());
  enterRule(_localctx, 130, Java20Parser::RuleUnannPrimitiveType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1036);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::BYTE:
      case Java20Parser::CHAR:
      case Java20Parser::DOUBLE:
      case Java20Parser::FLOAT:
      case Java20Parser::INT:
      case Java20Parser::LONG:
      case Java20Parser::SHORT: {
        enterOuterAlt(_localctx, 1);
        setState(1034);
        numericType();
        break;
      }

      case Java20Parser::BOOLEAN: {
        enterOuterAlt(_localctx, 2);
        setState(1035);
        match(Java20Parser::BOOLEAN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannReferenceTypeContext ------------------------------------------------------------------

Java20Parser::UnannReferenceTypeContext::UnannReferenceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannClassOrInterfaceTypeContext* Java20Parser::UnannReferenceTypeContext::unannClassOrInterfaceType() {
  return getRuleContext<Java20Parser::UnannClassOrInterfaceTypeContext>(0);
}

Java20Parser::UnannTypeVariableContext* Java20Parser::UnannReferenceTypeContext::unannTypeVariable() {
  return getRuleContext<Java20Parser::UnannTypeVariableContext>(0);
}

Java20Parser::UnannArrayTypeContext* Java20Parser::UnannReferenceTypeContext::unannArrayType() {
  return getRuleContext<Java20Parser::UnannArrayTypeContext>(0);
}


size_t Java20Parser::UnannReferenceTypeContext::getRuleIndex() const {
  return Java20Parser::RuleUnannReferenceType;
}


std::any Java20Parser::UnannReferenceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitUnannReferenceType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::UnannReferenceTypeContext* Java20Parser::unannReferenceType() {
  UnannReferenceTypeContext *_localctx = _tracker.createInstance<UnannReferenceTypeContext>(_ctx, getState());
  enterRule(_localctx, 132, Java20Parser::RuleUnannReferenceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1041);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1038);
      unannClassOrInterfaceType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1039);
      unannTypeVariable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1040);
      unannArrayType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassOrInterfaceTypeContext ------------------------------------------------------------------

Java20Parser::UnannClassOrInterfaceTypeContext::UnannClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::TypeIdentifierContext* Java20Parser::UnannClassOrInterfaceTypeContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}

Java20Parser::PackageNameContext* Java20Parser::UnannClassOrInterfaceTypeContext::packageName() {
  return getRuleContext<Java20Parser::PackageNameContext>(0);
}

tree::TerminalNode* Java20Parser::UnannClassOrInterfaceTypeContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::TypeArgumentsContext* Java20Parser::UnannClassOrInterfaceTypeContext::typeArguments() {
  return getRuleContext<Java20Parser::TypeArgumentsContext>(0);
}

Java20Parser::UCOITContext* Java20Parser::UnannClassOrInterfaceTypeContext::uCOIT() {
  return getRuleContext<Java20Parser::UCOITContext>(0);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::UnannClassOrInterfaceTypeContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::UnannClassOrInterfaceTypeContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}


size_t Java20Parser::UnannClassOrInterfaceTypeContext::getRuleIndex() const {
  return Java20Parser::RuleUnannClassOrInterfaceType;
}


std::any Java20Parser::UnannClassOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitUnannClassOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::UnannClassOrInterfaceTypeContext* Java20Parser::unannClassOrInterfaceType() {
  UnannClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<UnannClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 134, Java20Parser::RuleUnannClassOrInterfaceType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1051);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      setState(1043);
      packageName();
      setState(1044);
      match(Java20Parser::DOT);
      setState(1048);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::AT) {
        setState(1045);
        annotation();
        setState(1050);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
    setState(1053);
    typeIdentifier();
    setState(1055);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      setState(1054);
      typeArguments();
      break;
    }

    default:
      break;
    }
    setState(1058);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
    case 1: {
      setState(1057);
      uCOIT();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UCOITContext ------------------------------------------------------------------

Java20Parser::UCOITContext::UCOITContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::UCOITContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::TypeIdentifierContext* Java20Parser::UCOITContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::UCOITContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::UCOITContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}

Java20Parser::TypeArgumentsContext* Java20Parser::UCOITContext::typeArguments() {
  return getRuleContext<Java20Parser::TypeArgumentsContext>(0);
}

Java20Parser::UCOITContext* Java20Parser::UCOITContext::uCOIT() {
  return getRuleContext<Java20Parser::UCOITContext>(0);
}


size_t Java20Parser::UCOITContext::getRuleIndex() const {
  return Java20Parser::RuleUCOIT;
}


std::any Java20Parser::UCOITContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitUCOIT(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::UCOITContext* Java20Parser::uCOIT() {
  UCOITContext *_localctx = _tracker.createInstance<UCOITContext>(_ctx, getState());
  enterRule(_localctx, 136, Java20Parser::RuleUCOIT);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1060);
    match(Java20Parser::DOT);
    setState(1064);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(1061);
      annotation();
      setState(1066);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1067);
    typeIdentifier();
    setState(1069);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      setState(1068);
      typeArguments();
      break;
    }

    default:
      break;
    }
    setState(1072);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      setState(1071);
      uCOIT();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannClassTypeContext ------------------------------------------------------------------

Java20Parser::UnannClassTypeContext::UnannClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::TypeIdentifierContext* Java20Parser::UnannClassTypeContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}

Java20Parser::TypeArgumentsContext* Java20Parser::UnannClassTypeContext::typeArguments() {
  return getRuleContext<Java20Parser::TypeArgumentsContext>(0);
}

tree::TerminalNode* Java20Parser::UnannClassTypeContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::PackageNameContext* Java20Parser::UnannClassTypeContext::packageName() {
  return getRuleContext<Java20Parser::PackageNameContext>(0);
}

Java20Parser::UnannClassOrInterfaceTypeContext* Java20Parser::UnannClassTypeContext::unannClassOrInterfaceType() {
  return getRuleContext<Java20Parser::UnannClassOrInterfaceTypeContext>(0);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::UnannClassTypeContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::UnannClassTypeContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}


size_t Java20Parser::UnannClassTypeContext::getRuleIndex() const {
  return Java20Parser::RuleUnannClassType;
}


std::any Java20Parser::UnannClassTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitUnannClassType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::UnannClassTypeContext* Java20Parser::unannClassType() {
  UnannClassTypeContext *_localctx = _tracker.createInstance<UnannClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 138, Java20Parser::RuleUnannClassType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1093);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1074);
      typeIdentifier();
      setState(1076);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(1075);
        typeArguments();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1080);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
      case 1: {
        setState(1078);
        packageName();
        break;
      }

      case 2: {
        setState(1079);
        unannClassOrInterfaceType();
        break;
      }

      default:
        break;
      }
      setState(1082);
      match(Java20Parser::DOT);
      setState(1086);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::AT) {
        setState(1083);
        annotation();
        setState(1088);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1089);
      typeIdentifier();
      setState(1091);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(1090);
        typeArguments();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannInterfaceTypeContext ------------------------------------------------------------------

Java20Parser::UnannInterfaceTypeContext::UnannInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannClassTypeContext* Java20Parser::UnannInterfaceTypeContext::unannClassType() {
  return getRuleContext<Java20Parser::UnannClassTypeContext>(0);
}


size_t Java20Parser::UnannInterfaceTypeContext::getRuleIndex() const {
  return Java20Parser::RuleUnannInterfaceType;
}


std::any Java20Parser::UnannInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitUnannInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::UnannInterfaceTypeContext* Java20Parser::unannInterfaceType() {
  UnannInterfaceTypeContext *_localctx = _tracker.createInstance<UnannInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 140, Java20Parser::RuleUnannInterfaceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1095);
    unannClassType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannTypeVariableContext ------------------------------------------------------------------

Java20Parser::UnannTypeVariableContext::UnannTypeVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::TypeIdentifierContext* Java20Parser::UnannTypeVariableContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}


size_t Java20Parser::UnannTypeVariableContext::getRuleIndex() const {
  return Java20Parser::RuleUnannTypeVariable;
}


std::any Java20Parser::UnannTypeVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitUnannTypeVariable(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::UnannTypeVariableContext* Java20Parser::unannTypeVariable() {
  UnannTypeVariableContext *_localctx = _tracker.createInstance<UnannTypeVariableContext>(_ctx, getState());
  enterRule(_localctx, 142, Java20Parser::RuleUnannTypeVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1097);
    typeIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnannArrayTypeContext ------------------------------------------------------------------

Java20Parser::UnannArrayTypeContext::UnannArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::DimsContext* Java20Parser::UnannArrayTypeContext::dims() {
  return getRuleContext<Java20Parser::DimsContext>(0);
}

Java20Parser::UnannPrimitiveTypeContext* Java20Parser::UnannArrayTypeContext::unannPrimitiveType() {
  return getRuleContext<Java20Parser::UnannPrimitiveTypeContext>(0);
}

Java20Parser::UnannClassOrInterfaceTypeContext* Java20Parser::UnannArrayTypeContext::unannClassOrInterfaceType() {
  return getRuleContext<Java20Parser::UnannClassOrInterfaceTypeContext>(0);
}

Java20Parser::UnannTypeVariableContext* Java20Parser::UnannArrayTypeContext::unannTypeVariable() {
  return getRuleContext<Java20Parser::UnannTypeVariableContext>(0);
}


size_t Java20Parser::UnannArrayTypeContext::getRuleIndex() const {
  return Java20Parser::RuleUnannArrayType;
}


std::any Java20Parser::UnannArrayTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitUnannArrayType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::UnannArrayTypeContext* Java20Parser::unannArrayType() {
  UnannArrayTypeContext *_localctx = _tracker.createInstance<UnannArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 144, Java20Parser::RuleUnannArrayType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1102);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      setState(1099);
      unannPrimitiveType();
      break;
    }

    case 2: {
      setState(1100);
      unannClassOrInterfaceType();
      break;
    }

    case 3: {
      setState(1101);
      unannTypeVariable();
      break;
    }

    default:
      break;
    }
    setState(1104);
    dims();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDeclarationContext ------------------------------------------------------------------

Java20Parser::MethodDeclarationContext::MethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::MethodHeaderContext* Java20Parser::MethodDeclarationContext::methodHeader() {
  return getRuleContext<Java20Parser::MethodHeaderContext>(0);
}

Java20Parser::MethodBodyContext* Java20Parser::MethodDeclarationContext::methodBody() {
  return getRuleContext<Java20Parser::MethodBodyContext>(0);
}

std::vector<Java20Parser::MethodModifierContext *> Java20Parser::MethodDeclarationContext::methodModifier() {
  return getRuleContexts<Java20Parser::MethodModifierContext>();
}

Java20Parser::MethodModifierContext* Java20Parser::MethodDeclarationContext::methodModifier(size_t i) {
  return getRuleContext<Java20Parser::MethodModifierContext>(i);
}


size_t Java20Parser::MethodDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleMethodDeclaration;
}


std::any Java20Parser::MethodDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitMethodDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::MethodDeclarationContext* Java20Parser::methodDeclaration() {
  MethodDeclarationContext *_localctx = _tracker.createInstance<MethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 146, Java20Parser::RuleMethodDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1109);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 692569214556569600) != 0) || _la == Java20Parser::AT) {
      setState(1106);
      methodModifier();
      setState(1111);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1112);
    methodHeader();
    setState(1113);
    methodBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodModifierContext ------------------------------------------------------------------

Java20Parser::MethodModifierContext::MethodModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationContext* Java20Parser::MethodModifierContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java20Parser::MethodModifierContext::PUBLIC() {
  return getToken(Java20Parser::PUBLIC, 0);
}

tree::TerminalNode* Java20Parser::MethodModifierContext::PROTECTED() {
  return getToken(Java20Parser::PROTECTED, 0);
}

tree::TerminalNode* Java20Parser::MethodModifierContext::PRIVATE() {
  return getToken(Java20Parser::PRIVATE, 0);
}

tree::TerminalNode* Java20Parser::MethodModifierContext::ABSTRACT() {
  return getToken(Java20Parser::ABSTRACT, 0);
}

tree::TerminalNode* Java20Parser::MethodModifierContext::STATIC() {
  return getToken(Java20Parser::STATIC, 0);
}

tree::TerminalNode* Java20Parser::MethodModifierContext::FINAL() {
  return getToken(Java20Parser::FINAL, 0);
}

tree::TerminalNode* Java20Parser::MethodModifierContext::SYNCHRONIZED() {
  return getToken(Java20Parser::SYNCHRONIZED, 0);
}

tree::TerminalNode* Java20Parser::MethodModifierContext::NATIVE() {
  return getToken(Java20Parser::NATIVE, 0);
}

tree::TerminalNode* Java20Parser::MethodModifierContext::STRICTFP() {
  return getToken(Java20Parser::STRICTFP, 0);
}


size_t Java20Parser::MethodModifierContext::getRuleIndex() const {
  return Java20Parser::RuleMethodModifier;
}


std::any Java20Parser::MethodModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitMethodModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::MethodModifierContext* Java20Parser::methodModifier() {
  MethodModifierContext *_localctx = _tracker.createInstance<MethodModifierContext>(_ctx, getState());
  enterRule(_localctx, 148, Java20Parser::RuleMethodModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1125);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1115);
        annotation();
        break;
      }

      case Java20Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1116);
        match(Java20Parser::PUBLIC);
        break;
      }

      case Java20Parser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(1117);
        match(Java20Parser::PROTECTED);
        break;
      }

      case Java20Parser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(1118);
        match(Java20Parser::PRIVATE);
        break;
      }

      case Java20Parser::ABSTRACT: {
        enterOuterAlt(_localctx, 5);
        setState(1119);
        match(Java20Parser::ABSTRACT);
        break;
      }

      case Java20Parser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(1120);
        match(Java20Parser::STATIC);
        break;
      }

      case Java20Parser::FINAL: {
        enterOuterAlt(_localctx, 7);
        setState(1121);
        match(Java20Parser::FINAL);
        break;
      }

      case Java20Parser::SYNCHRONIZED: {
        enterOuterAlt(_localctx, 8);
        setState(1122);
        match(Java20Parser::SYNCHRONIZED);
        break;
      }

      case Java20Parser::NATIVE: {
        enterOuterAlt(_localctx, 9);
        setState(1123);
        match(Java20Parser::NATIVE);
        break;
      }

      case Java20Parser::STRICTFP: {
        enterOuterAlt(_localctx, 10);
        setState(1124);
        match(Java20Parser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodHeaderContext ------------------------------------------------------------------

Java20Parser::MethodHeaderContext::MethodHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ResultContext* Java20Parser::MethodHeaderContext::result() {
  return getRuleContext<Java20Parser::ResultContext>(0);
}

Java20Parser::MethodDeclaratorContext* Java20Parser::MethodHeaderContext::methodDeclarator() {
  return getRuleContext<Java20Parser::MethodDeclaratorContext>(0);
}

Java20Parser::TypeParametersContext* Java20Parser::MethodHeaderContext::typeParameters() {
  return getRuleContext<Java20Parser::TypeParametersContext>(0);
}

Java20Parser::ThrowsTContext* Java20Parser::MethodHeaderContext::throwsT() {
  return getRuleContext<Java20Parser::ThrowsTContext>(0);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::MethodHeaderContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::MethodHeaderContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}


size_t Java20Parser::MethodHeaderContext::getRuleIndex() const {
  return Java20Parser::RuleMethodHeader;
}


std::any Java20Parser::MethodHeaderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitMethodHeader(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::MethodHeaderContext* Java20Parser::methodHeader() {
  MethodHeaderContext *_localctx = _tracker.createInstance<MethodHeaderContext>(_ctx, getState());
  enterRule(_localctx, 150, Java20Parser::RuleMethodHeader);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1134);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::LT) {
      setState(1127);
      typeParameters();
      setState(1131);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::AT) {
        setState(1128);
        annotation();
        setState(1133);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1136);
    result();
    setState(1137);
    methodDeclarator();
    setState(1139);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::THROWS) {
      setState(1138);
      throwsT();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResultContext ------------------------------------------------------------------

Java20Parser::ResultContext::ResultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannTypeContext* Java20Parser::ResultContext::unannType() {
  return getRuleContext<Java20Parser::UnannTypeContext>(0);
}

tree::TerminalNode* Java20Parser::ResultContext::VOID() {
  return getToken(Java20Parser::VOID, 0);
}


size_t Java20Parser::ResultContext::getRuleIndex() const {
  return Java20Parser::RuleResult;
}


std::any Java20Parser::ResultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitResult(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ResultContext* Java20Parser::result() {
  ResultContext *_localctx = _tracker.createInstance<ResultContext>(_ctx, getState());
  enterRule(_localctx, 152, Java20Parser::RuleResult);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1143);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::BOOLEAN:
      case Java20Parser::BYTE:
      case Java20Parser::CHAR:
      case Java20Parser::DOUBLE:
      case Java20Parser::FLOAT:
      case Java20Parser::INT:
      case Java20Parser::LONG:
      case Java20Parser::SHORT:
      case Java20Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1141);
        unannType();
        break;
      }

      case Java20Parser::VOID: {
        enterOuterAlt(_localctx, 2);
        setState(1142);
        match(Java20Parser::VOID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDeclaratorContext ------------------------------------------------------------------

Java20Parser::MethodDeclaratorContext::MethodDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::MethodDeclaratorContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::MethodDeclaratorContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

tree::TerminalNode* Java20Parser::MethodDeclaratorContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::ReceiverParameterContext* Java20Parser::MethodDeclaratorContext::receiverParameter() {
  return getRuleContext<Java20Parser::ReceiverParameterContext>(0);
}

tree::TerminalNode* Java20Parser::MethodDeclaratorContext::COMMA() {
  return getToken(Java20Parser::COMMA, 0);
}

Java20Parser::FormalParameterListContext* Java20Parser::MethodDeclaratorContext::formalParameterList() {
  return getRuleContext<Java20Parser::FormalParameterListContext>(0);
}

Java20Parser::DimsContext* Java20Parser::MethodDeclaratorContext::dims() {
  return getRuleContext<Java20Parser::DimsContext>(0);
}


size_t Java20Parser::MethodDeclaratorContext::getRuleIndex() const {
  return Java20Parser::RuleMethodDeclarator;
}


std::any Java20Parser::MethodDeclaratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitMethodDeclarator(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::MethodDeclaratorContext* Java20Parser::methodDeclarator() {
  MethodDeclaratorContext *_localctx = _tracker.createInstance<MethodDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 154, Java20Parser::RuleMethodDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1145);
    match(Java20Parser::Identifier);
    setState(1146);
    match(Java20Parser::LPAREN);
    setState(1150);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      setState(1147);
      receiverParameter();
      setState(1148);
      match(Java20Parser::COMMA);
      break;
    }

    default:
      break;
    }
    setState(1153);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18102533424676864) != 0) || _la == Java20Parser::AT

    || _la == Java20Parser::Identifier) {
      setState(1152);
      formalParameterList();
    }
    setState(1155);
    match(Java20Parser::RPAREN);
    setState(1157);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::LBRACK

    || _la == Java20Parser::AT) {
      setState(1156);
      dims();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiverParameterContext ------------------------------------------------------------------

Java20Parser::ReceiverParameterContext::ReceiverParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannTypeContext* Java20Parser::ReceiverParameterContext::unannType() {
  return getRuleContext<Java20Parser::UnannTypeContext>(0);
}

tree::TerminalNode* Java20Parser::ReceiverParameterContext::THIS() {
  return getToken(Java20Parser::THIS, 0);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::ReceiverParameterContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::ReceiverParameterContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}

tree::TerminalNode* Java20Parser::ReceiverParameterContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::ReceiverParameterContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}


size_t Java20Parser::ReceiverParameterContext::getRuleIndex() const {
  return Java20Parser::RuleReceiverParameter;
}


std::any Java20Parser::ReceiverParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitReceiverParameter(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ReceiverParameterContext* Java20Parser::receiverParameter() {
  ReceiverParameterContext *_localctx = _tracker.createInstance<ReceiverParameterContext>(_ctx, getState());
  enterRule(_localctx, 156, Java20Parser::RuleReceiverParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1162);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(1159);
      annotation();
      setState(1164);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1165);
    unannType();
    setState(1168);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::Identifier) {
      setState(1166);
      match(Java20Parser::Identifier);
      setState(1167);
      match(Java20Parser::DOT);
    }
    setState(1170);
    match(Java20Parser::THIS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterListContext ------------------------------------------------------------------

Java20Parser::FormalParameterListContext::FormalParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::FormalParameterContext *> Java20Parser::FormalParameterListContext::formalParameter() {
  return getRuleContexts<Java20Parser::FormalParameterContext>();
}

Java20Parser::FormalParameterContext* Java20Parser::FormalParameterListContext::formalParameter(size_t i) {
  return getRuleContext<Java20Parser::FormalParameterContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::FormalParameterListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::FormalParameterListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::FormalParameterListContext::getRuleIndex() const {
  return Java20Parser::RuleFormalParameterList;
}


std::any Java20Parser::FormalParameterListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitFormalParameterList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::FormalParameterListContext* Java20Parser::formalParameterList() {
  FormalParameterListContext *_localctx = _tracker.createInstance<FormalParameterListContext>(_ctx, getState());
  enterRule(_localctx, 158, Java20Parser::RuleFormalParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1172);
    formalParameter();
    setState(1177);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::COMMA) {
      setState(1173);
      match(Java20Parser::COMMA);
      setState(1174);
      formalParameter();
      setState(1179);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterContext ------------------------------------------------------------------

Java20Parser::FormalParameterContext::FormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannTypeContext* Java20Parser::FormalParameterContext::unannType() {
  return getRuleContext<Java20Parser::UnannTypeContext>(0);
}

Java20Parser::VariableDeclaratorIdContext* Java20Parser::FormalParameterContext::variableDeclaratorId() {
  return getRuleContext<Java20Parser::VariableDeclaratorIdContext>(0);
}

std::vector<Java20Parser::VariableModifierContext *> Java20Parser::FormalParameterContext::variableModifier() {
  return getRuleContexts<Java20Parser::VariableModifierContext>();
}

Java20Parser::VariableModifierContext* Java20Parser::FormalParameterContext::variableModifier(size_t i) {
  return getRuleContext<Java20Parser::VariableModifierContext>(i);
}

Java20Parser::VariableArityParameterContext* Java20Parser::FormalParameterContext::variableArityParameter() {
  return getRuleContext<Java20Parser::VariableArityParameterContext>(0);
}


size_t Java20Parser::FormalParameterContext::getRuleIndex() const {
  return Java20Parser::RuleFormalParameter;
}


std::any Java20Parser::FormalParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitFormalParameter(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::FormalParameterContext* Java20Parser::formalParameter() {
  FormalParameterContext *_localctx = _tracker.createInstance<FormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 160, Java20Parser::RuleFormalParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1190);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1183);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::FINAL

      || _la == Java20Parser::AT) {
        setState(1180);
        variableModifier();
        setState(1185);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1186);
      unannType();
      setState(1187);
      variableDeclaratorId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1189);
      variableArityParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableArityParameterContext ------------------------------------------------------------------

Java20Parser::VariableArityParameterContext::VariableArityParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannTypeContext* Java20Parser::VariableArityParameterContext::unannType() {
  return getRuleContext<Java20Parser::UnannTypeContext>(0);
}

tree::TerminalNode* Java20Parser::VariableArityParameterContext::ELLIPSIS() {
  return getToken(Java20Parser::ELLIPSIS, 0);
}

tree::TerminalNode* Java20Parser::VariableArityParameterContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

std::vector<Java20Parser::VariableModifierContext *> Java20Parser::VariableArityParameterContext::variableModifier() {
  return getRuleContexts<Java20Parser::VariableModifierContext>();
}

Java20Parser::VariableModifierContext* Java20Parser::VariableArityParameterContext::variableModifier(size_t i) {
  return getRuleContext<Java20Parser::VariableModifierContext>(i);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::VariableArityParameterContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::VariableArityParameterContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}


size_t Java20Parser::VariableArityParameterContext::getRuleIndex() const {
  return Java20Parser::RuleVariableArityParameter;
}


std::any Java20Parser::VariableArityParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitVariableArityParameter(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::VariableArityParameterContext* Java20Parser::variableArityParameter() {
  VariableArityParameterContext *_localctx = _tracker.createInstance<VariableArityParameterContext>(_ctx, getState());
  enterRule(_localctx, 162, Java20Parser::RuleVariableArityParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1195);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::FINAL

    || _la == Java20Parser::AT) {
      setState(1192);
      variableModifier();
      setState(1197);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1198);
    unannType();
    setState(1202);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(1199);
      annotation();
      setState(1204);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1205);
    match(Java20Parser::ELLIPSIS);
    setState(1206);
    match(Java20Parser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableModifierContext ------------------------------------------------------------------

Java20Parser::VariableModifierContext::VariableModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationContext* Java20Parser::VariableModifierContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java20Parser::VariableModifierContext::FINAL() {
  return getToken(Java20Parser::FINAL, 0);
}


size_t Java20Parser::VariableModifierContext::getRuleIndex() const {
  return Java20Parser::RuleVariableModifier;
}


std::any Java20Parser::VariableModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitVariableModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::VariableModifierContext* Java20Parser::variableModifier() {
  VariableModifierContext *_localctx = _tracker.createInstance<VariableModifierContext>(_ctx, getState());
  enterRule(_localctx, 164, Java20Parser::RuleVariableModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1210);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1208);
        annotation();
        break;
      }

      case Java20Parser::FINAL: {
        enterOuterAlt(_localctx, 2);
        setState(1209);
        match(Java20Parser::FINAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowsTContext ------------------------------------------------------------------

Java20Parser::ThrowsTContext::ThrowsTContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ThrowsTContext::THROWS() {
  return getToken(Java20Parser::THROWS, 0);
}

Java20Parser::ExceptionTypeListContext* Java20Parser::ThrowsTContext::exceptionTypeList() {
  return getRuleContext<Java20Parser::ExceptionTypeListContext>(0);
}


size_t Java20Parser::ThrowsTContext::getRuleIndex() const {
  return Java20Parser::RuleThrowsT;
}


std::any Java20Parser::ThrowsTContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitThrowsT(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ThrowsTContext* Java20Parser::throwsT() {
  ThrowsTContext *_localctx = _tracker.createInstance<ThrowsTContext>(_ctx, getState());
  enterRule(_localctx, 166, Java20Parser::RuleThrowsT);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1212);
    match(Java20Parser::THROWS);
    setState(1213);
    exceptionTypeList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionTypeListContext ------------------------------------------------------------------

Java20Parser::ExceptionTypeListContext::ExceptionTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::ExceptionTypeContext *> Java20Parser::ExceptionTypeListContext::exceptionType() {
  return getRuleContexts<Java20Parser::ExceptionTypeContext>();
}

Java20Parser::ExceptionTypeContext* Java20Parser::ExceptionTypeListContext::exceptionType(size_t i) {
  return getRuleContext<Java20Parser::ExceptionTypeContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::ExceptionTypeListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::ExceptionTypeListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::ExceptionTypeListContext::getRuleIndex() const {
  return Java20Parser::RuleExceptionTypeList;
}


std::any Java20Parser::ExceptionTypeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitExceptionTypeList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ExceptionTypeListContext* Java20Parser::exceptionTypeList() {
  ExceptionTypeListContext *_localctx = _tracker.createInstance<ExceptionTypeListContext>(_ctx, getState());
  enterRule(_localctx, 168, Java20Parser::RuleExceptionTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1215);
    exceptionType();
    setState(1220);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::COMMA) {
      setState(1216);
      match(Java20Parser::COMMA);
      setState(1217);
      exceptionType();
      setState(1222);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionTypeContext ------------------------------------------------------------------

Java20Parser::ExceptionTypeContext::ExceptionTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ClassTypeContext* Java20Parser::ExceptionTypeContext::classType() {
  return getRuleContext<Java20Parser::ClassTypeContext>(0);
}

Java20Parser::TypeVariableContext* Java20Parser::ExceptionTypeContext::typeVariable() {
  return getRuleContext<Java20Parser::TypeVariableContext>(0);
}


size_t Java20Parser::ExceptionTypeContext::getRuleIndex() const {
  return Java20Parser::RuleExceptionType;
}


std::any Java20Parser::ExceptionTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitExceptionType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ExceptionTypeContext* Java20Parser::exceptionType() {
  ExceptionTypeContext *_localctx = _tracker.createInstance<ExceptionTypeContext>(_ctx, getState());
  enterRule(_localctx, 170, Java20Parser::RuleExceptionType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1225);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1223);
      classType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1224);
      typeVariable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodBodyContext ------------------------------------------------------------------

Java20Parser::MethodBodyContext::MethodBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::BlockContext* Java20Parser::MethodBodyContext::block() {
  return getRuleContext<Java20Parser::BlockContext>(0);
}

tree::TerminalNode* Java20Parser::MethodBodyContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::MethodBodyContext::getRuleIndex() const {
  return Java20Parser::RuleMethodBody;
}


std::any Java20Parser::MethodBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitMethodBody(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::MethodBodyContext* Java20Parser::methodBody() {
  MethodBodyContext *_localctx = _tracker.createInstance<MethodBodyContext>(_ctx, getState());
  enterRule(_localctx, 172, Java20Parser::RuleMethodBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1229);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1227);
        block();
        break;
      }

      case Java20Parser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(1228);
        match(Java20Parser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstanceInitializerContext ------------------------------------------------------------------

Java20Parser::InstanceInitializerContext::InstanceInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::BlockContext* Java20Parser::InstanceInitializerContext::block() {
  return getRuleContext<Java20Parser::BlockContext>(0);
}


size_t Java20Parser::InstanceInitializerContext::getRuleIndex() const {
  return Java20Parser::RuleInstanceInitializer;
}


std::any Java20Parser::InstanceInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitInstanceInitializer(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::InstanceInitializerContext* Java20Parser::instanceInitializer() {
  InstanceInitializerContext *_localctx = _tracker.createInstance<InstanceInitializerContext>(_ctx, getState());
  enterRule(_localctx, 174, Java20Parser::RuleInstanceInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1231);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StaticInitializerContext ------------------------------------------------------------------

Java20Parser::StaticInitializerContext::StaticInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::StaticInitializerContext::STATIC() {
  return getToken(Java20Parser::STATIC, 0);
}

Java20Parser::BlockContext* Java20Parser::StaticInitializerContext::block() {
  return getRuleContext<Java20Parser::BlockContext>(0);
}


size_t Java20Parser::StaticInitializerContext::getRuleIndex() const {
  return Java20Parser::RuleStaticInitializer;
}


std::any Java20Parser::StaticInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitStaticInitializer(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::StaticInitializerContext* Java20Parser::staticInitializer() {
  StaticInitializerContext *_localctx = _tracker.createInstance<StaticInitializerContext>(_ctx, getState());
  enterRule(_localctx, 176, Java20Parser::RuleStaticInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1233);
    match(Java20Parser::STATIC);
    setState(1234);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDeclarationContext ------------------------------------------------------------------

Java20Parser::ConstructorDeclarationContext::ConstructorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ConstructorDeclaratorContext* Java20Parser::ConstructorDeclarationContext::constructorDeclarator() {
  return getRuleContext<Java20Parser::ConstructorDeclaratorContext>(0);
}

Java20Parser::ConstructorBodyContext* Java20Parser::ConstructorDeclarationContext::constructorBody() {
  return getRuleContext<Java20Parser::ConstructorBodyContext>(0);
}

std::vector<Java20Parser::ConstructorModifierContext *> Java20Parser::ConstructorDeclarationContext::constructorModifier() {
  return getRuleContexts<Java20Parser::ConstructorModifierContext>();
}

Java20Parser::ConstructorModifierContext* Java20Parser::ConstructorDeclarationContext::constructorModifier(size_t i) {
  return getRuleContext<Java20Parser::ConstructorModifierContext>(i);
}

Java20Parser::ThrowsTContext* Java20Parser::ConstructorDeclarationContext::throwsT() {
  return getRuleContext<Java20Parser::ThrowsTContext>(0);
}


size_t Java20Parser::ConstructorDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleConstructorDeclaration;
}


std::any Java20Parser::ConstructorDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitConstructorDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ConstructorDeclarationContext* Java20Parser::constructorDeclaration() {
  ConstructorDeclarationContext *_localctx = _tracker.createInstance<ConstructorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 178, Java20Parser::RuleConstructorDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1239);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 50) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 50)) & 68719476743) != 0)) {
      setState(1236);
      constructorModifier();
      setState(1241);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1242);
    constructorDeclarator();
    setState(1244);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::THROWS) {
      setState(1243);
      throwsT();
    }
    setState(1246);
    constructorBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorModifierContext ------------------------------------------------------------------

Java20Parser::ConstructorModifierContext::ConstructorModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationContext* Java20Parser::ConstructorModifierContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java20Parser::ConstructorModifierContext::PUBLIC() {
  return getToken(Java20Parser::PUBLIC, 0);
}

tree::TerminalNode* Java20Parser::ConstructorModifierContext::PROTECTED() {
  return getToken(Java20Parser::PROTECTED, 0);
}

tree::TerminalNode* Java20Parser::ConstructorModifierContext::PRIVATE() {
  return getToken(Java20Parser::PRIVATE, 0);
}


size_t Java20Parser::ConstructorModifierContext::getRuleIndex() const {
  return Java20Parser::RuleConstructorModifier;
}


std::any Java20Parser::ConstructorModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitConstructorModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ConstructorModifierContext* Java20Parser::constructorModifier() {
  ConstructorModifierContext *_localctx = _tracker.createInstance<ConstructorModifierContext>(_ctx, getState());
  enterRule(_localctx, 180, Java20Parser::RuleConstructorModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1252);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1248);
        annotation();
        break;
      }

      case Java20Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1249);
        match(Java20Parser::PUBLIC);
        break;
      }

      case Java20Parser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(1250);
        match(Java20Parser::PROTECTED);
        break;
      }

      case Java20Parser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(1251);
        match(Java20Parser::PRIVATE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDeclaratorContext ------------------------------------------------------------------

Java20Parser::ConstructorDeclaratorContext::ConstructorDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::SimpleTypeNameContext* Java20Parser::ConstructorDeclaratorContext::simpleTypeName() {
  return getRuleContext<Java20Parser::SimpleTypeNameContext>(0);
}

tree::TerminalNode* Java20Parser::ConstructorDeclaratorContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

tree::TerminalNode* Java20Parser::ConstructorDeclaratorContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::TypeParametersContext* Java20Parser::ConstructorDeclaratorContext::typeParameters() {
  return getRuleContext<Java20Parser::TypeParametersContext>(0);
}

Java20Parser::ReceiverParameterContext* Java20Parser::ConstructorDeclaratorContext::receiverParameter() {
  return getRuleContext<Java20Parser::ReceiverParameterContext>(0);
}

tree::TerminalNode* Java20Parser::ConstructorDeclaratorContext::COMMA() {
  return getToken(Java20Parser::COMMA, 0);
}

Java20Parser::FormalParameterListContext* Java20Parser::ConstructorDeclaratorContext::formalParameterList() {
  return getRuleContext<Java20Parser::FormalParameterListContext>(0);
}


size_t Java20Parser::ConstructorDeclaratorContext::getRuleIndex() const {
  return Java20Parser::RuleConstructorDeclarator;
}


std::any Java20Parser::ConstructorDeclaratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitConstructorDeclarator(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ConstructorDeclaratorContext* Java20Parser::constructorDeclarator() {
  ConstructorDeclaratorContext *_localctx = _tracker.createInstance<ConstructorDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 182, Java20Parser::RuleConstructorDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1255);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::LT) {
      setState(1254);
      typeParameters();
    }
    setState(1257);
    simpleTypeName();
    setState(1258);
    match(Java20Parser::LPAREN);
    setState(1262);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
    case 1: {
      setState(1259);
      receiverParameter();
      setState(1260);
      match(Java20Parser::COMMA);
      break;
    }

    default:
      break;
    }
    setState(1265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18102533424676864) != 0) || _la == Java20Parser::AT

    || _la == Java20Parser::Identifier) {
      setState(1264);
      formalParameterList();
    }
    setState(1267);
    match(Java20Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeNameContext ------------------------------------------------------------------

Java20Parser::SimpleTypeNameContext::SimpleTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::TypeIdentifierContext* Java20Parser::SimpleTypeNameContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}


size_t Java20Parser::SimpleTypeNameContext::getRuleIndex() const {
  return Java20Parser::RuleSimpleTypeName;
}


std::any Java20Parser::SimpleTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitSimpleTypeName(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::SimpleTypeNameContext* Java20Parser::simpleTypeName() {
  SimpleTypeNameContext *_localctx = _tracker.createInstance<SimpleTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 184, Java20Parser::RuleSimpleTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1269);
    typeIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorBodyContext ------------------------------------------------------------------

Java20Parser::ConstructorBodyContext::ConstructorBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ConstructorBodyContext::LBRACE() {
  return getToken(Java20Parser::LBRACE, 0);
}

tree::TerminalNode* Java20Parser::ConstructorBodyContext::RBRACE() {
  return getToken(Java20Parser::RBRACE, 0);
}

Java20Parser::ExplicitConstructorInvocationContext* Java20Parser::ConstructorBodyContext::explicitConstructorInvocation() {
  return getRuleContext<Java20Parser::ExplicitConstructorInvocationContext>(0);
}

Java20Parser::BlockStatementsContext* Java20Parser::ConstructorBodyContext::blockStatements() {
  return getRuleContext<Java20Parser::BlockStatementsContext>(0);
}


size_t Java20Parser::ConstructorBodyContext::getRuleIndex() const {
  return Java20Parser::RuleConstructorBody;
}


std::any Java20Parser::ConstructorBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitConstructorBody(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ConstructorBodyContext* Java20Parser::constructorBody() {
  ConstructorBodyContext *_localctx = _tracker.createInstance<ConstructorBodyContext>(_ctx, getState());
  enterRule(_localctx, 186, Java20Parser::RuleConstructorBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1271);
    match(Java20Parser::LBRACE);
    setState(1273);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      setState(1272);
      explicitConstructorInvocation();
      break;
    }

    default:
      break;
    }
    setState(1276);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4610965747420531208) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 576461576941625323) != 0)) {
      setState(1275);
      blockStatements();
    }
    setState(1278);
    match(Java20Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitConstructorInvocationContext ------------------------------------------------------------------

Java20Parser::ExplicitConstructorInvocationContext::ExplicitConstructorInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ExplicitConstructorInvocationContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

tree::TerminalNode* Java20Parser::ExplicitConstructorInvocationContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

tree::TerminalNode* Java20Parser::ExplicitConstructorInvocationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}

tree::TerminalNode* Java20Parser::ExplicitConstructorInvocationContext::THIS() {
  return getToken(Java20Parser::THIS, 0);
}

tree::TerminalNode* Java20Parser::ExplicitConstructorInvocationContext::SUPER() {
  return getToken(Java20Parser::SUPER, 0);
}

Java20Parser::TypeArgumentsContext* Java20Parser::ExplicitConstructorInvocationContext::typeArguments() {
  return getRuleContext<Java20Parser::TypeArgumentsContext>(0);
}

Java20Parser::ArgumentListContext* Java20Parser::ExplicitConstructorInvocationContext::argumentList() {
  return getRuleContext<Java20Parser::ArgumentListContext>(0);
}

tree::TerminalNode* Java20Parser::ExplicitConstructorInvocationContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::ExpressionNameContext* Java20Parser::ExplicitConstructorInvocationContext::expressionName() {
  return getRuleContext<Java20Parser::ExpressionNameContext>(0);
}

Java20Parser::PrimaryContext* Java20Parser::ExplicitConstructorInvocationContext::primary() {
  return getRuleContext<Java20Parser::PrimaryContext>(0);
}


size_t Java20Parser::ExplicitConstructorInvocationContext::getRuleIndex() const {
  return Java20Parser::RuleExplicitConstructorInvocation;
}


std::any Java20Parser::ExplicitConstructorInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitExplicitConstructorInvocation(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ExplicitConstructorInvocationContext* Java20Parser::explicitConstructorInvocation() {
  ExplicitConstructorInvocationContext *_localctx = _tracker.createInstance<ExplicitConstructorInvocationContext>(_ctx, getState());
  enterRule(_localctx, 188, Java20Parser::RuleExplicitConstructorInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1306);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1281);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(1280);
        typeArguments();
      }
      setState(1283);
      _la = _input->LA(1);
      if (!(_la == Java20Parser::SUPER

      || _la == Java20Parser::THIS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1284);
      match(Java20Parser::LPAREN);
      setState(1286);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(1285);
        argumentList();
      }
      setState(1288);
      match(Java20Parser::RPAREN);
      setState(1289);
      match(Java20Parser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1292);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
      case 1: {
        setState(1290);
        expressionName();
        break;
      }

      case 2: {
        setState(1291);
        primary();
        break;
      }

      default:
        break;
      }
      setState(1294);
      match(Java20Parser::DOT);
      setState(1296);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(1295);
        typeArguments();
      }
      setState(1298);
      match(Java20Parser::SUPER);
      setState(1299);
      match(Java20Parser::LPAREN);
      setState(1301);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(1300);
        argumentList();
      }
      setState(1303);
      match(Java20Parser::RPAREN);
      setState(1304);
      match(Java20Parser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumDeclarationContext ------------------------------------------------------------------

Java20Parser::EnumDeclarationContext::EnumDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::EnumDeclarationContext::ENUM() {
  return getToken(Java20Parser::ENUM, 0);
}

Java20Parser::TypeIdentifierContext* Java20Parser::EnumDeclarationContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}

Java20Parser::EnumBodyContext* Java20Parser::EnumDeclarationContext::enumBody() {
  return getRuleContext<Java20Parser::EnumBodyContext>(0);
}

std::vector<Java20Parser::ClassModifierContext *> Java20Parser::EnumDeclarationContext::classModifier() {
  return getRuleContexts<Java20Parser::ClassModifierContext>();
}

Java20Parser::ClassModifierContext* Java20Parser::EnumDeclarationContext::classModifier(size_t i) {
  return getRuleContext<Java20Parser::ClassModifierContext>(i);
}

Java20Parser::ClassImplementsContext* Java20Parser::EnumDeclarationContext::classImplements() {
  return getRuleContext<Java20Parser::ClassImplementsContext>(0);
}


size_t Java20Parser::EnumDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleEnumDeclaration;
}


std::any Java20Parser::EnumDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitEnumDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::EnumDeclarationContext* Java20Parser::enumDeclaration() {
  EnumDeclarationContext *_localctx = _tracker.createInstance<EnumDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 190, Java20Parser::RuleEnumDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1311);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 115967724764792840) != 0) || _la == Java20Parser::AT) {
      setState(1308);
      classModifier();
      setState(1313);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1314);
    match(Java20Parser::ENUM);
    setState(1315);
    typeIdentifier();
    setState(1317);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::IMPLEMENTS) {
      setState(1316);
      classImplements();
    }
    setState(1319);
    enumBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumBodyContext ------------------------------------------------------------------

Java20Parser::EnumBodyContext::EnumBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::EnumBodyContext::LBRACE() {
  return getToken(Java20Parser::LBRACE, 0);
}

tree::TerminalNode* Java20Parser::EnumBodyContext::RBRACE() {
  return getToken(Java20Parser::RBRACE, 0);
}

Java20Parser::EnumConstantListContext* Java20Parser::EnumBodyContext::enumConstantList() {
  return getRuleContext<Java20Parser::EnumConstantListContext>(0);
}

tree::TerminalNode* Java20Parser::EnumBodyContext::COMMA() {
  return getToken(Java20Parser::COMMA, 0);
}

Java20Parser::EnumBodyDeclarationsContext* Java20Parser::EnumBodyContext::enumBodyDeclarations() {
  return getRuleContext<Java20Parser::EnumBodyDeclarationsContext>(0);
}


size_t Java20Parser::EnumBodyContext::getRuleIndex() const {
  return Java20Parser::RuleEnumBody;
}


std::any Java20Parser::EnumBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitEnumBody(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::EnumBodyContext* Java20Parser::enumBody() {
  EnumBodyContext *_localctx = _tracker.createInstance<EnumBodyContext>(_ctx, getState());
  enterRule(_localctx, 192, Java20Parser::RuleEnumBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1321);
    match(Java20Parser::LBRACE);
    setState(1323);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::AT

    || _la == Java20Parser::Identifier) {
      setState(1322);
      enumConstantList();
    }
    setState(1326);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::COMMA) {
      setState(1325);
      match(Java20Parser::COMMA);
    }
    setState(1329);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::SEMI) {
      setState(1328);
      enumBodyDeclarations();
    }
    setState(1331);
    match(Java20Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantListContext ------------------------------------------------------------------

Java20Parser::EnumConstantListContext::EnumConstantListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::EnumConstantContext *> Java20Parser::EnumConstantListContext::enumConstant() {
  return getRuleContexts<Java20Parser::EnumConstantContext>();
}

Java20Parser::EnumConstantContext* Java20Parser::EnumConstantListContext::enumConstant(size_t i) {
  return getRuleContext<Java20Parser::EnumConstantContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::EnumConstantListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::EnumConstantListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::EnumConstantListContext::getRuleIndex() const {
  return Java20Parser::RuleEnumConstantList;
}


std::any Java20Parser::EnumConstantListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitEnumConstantList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::EnumConstantListContext* Java20Parser::enumConstantList() {
  EnumConstantListContext *_localctx = _tracker.createInstance<EnumConstantListContext>(_ctx, getState());
  enterRule(_localctx, 194, Java20Parser::RuleEnumConstantList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1333);
    enumConstant();
    setState(1338);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1334);
        match(Java20Parser::COMMA);
        setState(1335);
        enumConstant(); 
      }
      setState(1340);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantContext ------------------------------------------------------------------

Java20Parser::EnumConstantContext::EnumConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::EnumConstantContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

std::vector<Java20Parser::EnumConstantModifierContext *> Java20Parser::EnumConstantContext::enumConstantModifier() {
  return getRuleContexts<Java20Parser::EnumConstantModifierContext>();
}

Java20Parser::EnumConstantModifierContext* Java20Parser::EnumConstantContext::enumConstantModifier(size_t i) {
  return getRuleContext<Java20Parser::EnumConstantModifierContext>(i);
}

tree::TerminalNode* Java20Parser::EnumConstantContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

tree::TerminalNode* Java20Parser::EnumConstantContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::ClassBodyContext* Java20Parser::EnumConstantContext::classBody() {
  return getRuleContext<Java20Parser::ClassBodyContext>(0);
}

Java20Parser::ArgumentListContext* Java20Parser::EnumConstantContext::argumentList() {
  return getRuleContext<Java20Parser::ArgumentListContext>(0);
}


size_t Java20Parser::EnumConstantContext::getRuleIndex() const {
  return Java20Parser::RuleEnumConstant;
}


std::any Java20Parser::EnumConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitEnumConstant(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::EnumConstantContext* Java20Parser::enumConstant() {
  EnumConstantContext *_localctx = _tracker.createInstance<EnumConstantContext>(_ctx, getState());
  enterRule(_localctx, 196, Java20Parser::RuleEnumConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1344);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(1341);
      enumConstantModifier();
      setState(1346);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1347);
    match(Java20Parser::Identifier);
    setState(1353);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::LPAREN) {
      setState(1348);
      match(Java20Parser::LPAREN);
      setState(1350);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(1349);
        argumentList();
      }
      setState(1352);
      match(Java20Parser::RPAREN);
    }
    setState(1356);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::LBRACE) {
      setState(1355);
      classBody();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantModifierContext ------------------------------------------------------------------

Java20Parser::EnumConstantModifierContext::EnumConstantModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationContext* Java20Parser::EnumConstantModifierContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}


size_t Java20Parser::EnumConstantModifierContext::getRuleIndex() const {
  return Java20Parser::RuleEnumConstantModifier;
}


std::any Java20Parser::EnumConstantModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitEnumConstantModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::EnumConstantModifierContext* Java20Parser::enumConstantModifier() {
  EnumConstantModifierContext *_localctx = _tracker.createInstance<EnumConstantModifierContext>(_ctx, getState());
  enterRule(_localctx, 198, Java20Parser::RuleEnumConstantModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1358);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumBodyDeclarationsContext ------------------------------------------------------------------

Java20Parser::EnumBodyDeclarationsContext::EnumBodyDeclarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::EnumBodyDeclarationsContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}

std::vector<Java20Parser::ClassBodyDeclarationContext *> Java20Parser::EnumBodyDeclarationsContext::classBodyDeclaration() {
  return getRuleContexts<Java20Parser::ClassBodyDeclarationContext>();
}

Java20Parser::ClassBodyDeclarationContext* Java20Parser::EnumBodyDeclarationsContext::classBodyDeclaration(size_t i) {
  return getRuleContext<Java20Parser::ClassBodyDeclarationContext>(i);
}


size_t Java20Parser::EnumBodyDeclarationsContext::getRuleIndex() const {
  return Java20Parser::RuleEnumBodyDeclarations;
}


std::any Java20Parser::EnumBodyDeclarationsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitEnumBodyDeclarations(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::EnumBodyDeclarationsContext* Java20Parser::enumBodyDeclarations() {
  EnumBodyDeclarationsContext *_localctx = _tracker.createInstance<EnumBodyDeclarationsContext>(_ctx, getState());
  enterRule(_localctx, 200, Java20Parser::RuleEnumBodyDeclarations);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1360);
    match(Java20Parser::SEMI);
    setState(1364);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8512665130204132856) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288230376187502595) != 0)) {
      setState(1361);
      classBodyDeclaration();
      setState(1366);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordDeclarationContext ------------------------------------------------------------------

Java20Parser::RecordDeclarationContext::RecordDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::RecordDeclarationContext::RECORD() {
  return getToken(Java20Parser::RECORD, 0);
}

Java20Parser::TypeIdentifierContext* Java20Parser::RecordDeclarationContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}

Java20Parser::RecordHeaderContext* Java20Parser::RecordDeclarationContext::recordHeader() {
  return getRuleContext<Java20Parser::RecordHeaderContext>(0);
}

Java20Parser::RecordBodyContext* Java20Parser::RecordDeclarationContext::recordBody() {
  return getRuleContext<Java20Parser::RecordBodyContext>(0);
}

std::vector<Java20Parser::ClassModifierContext *> Java20Parser::RecordDeclarationContext::classModifier() {
  return getRuleContexts<Java20Parser::ClassModifierContext>();
}

Java20Parser::ClassModifierContext* Java20Parser::RecordDeclarationContext::classModifier(size_t i) {
  return getRuleContext<Java20Parser::ClassModifierContext>(i);
}

Java20Parser::TypeParametersContext* Java20Parser::RecordDeclarationContext::typeParameters() {
  return getRuleContext<Java20Parser::TypeParametersContext>(0);
}

Java20Parser::ClassImplementsContext* Java20Parser::RecordDeclarationContext::classImplements() {
  return getRuleContext<Java20Parser::ClassImplementsContext>(0);
}


size_t Java20Parser::RecordDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleRecordDeclaration;
}


std::any Java20Parser::RecordDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitRecordDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::RecordDeclarationContext* Java20Parser::recordDeclaration() {
  RecordDeclarationContext *_localctx = _tracker.createInstance<RecordDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 202, Java20Parser::RuleRecordDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1370);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 115967724764792840) != 0) || _la == Java20Parser::AT) {
      setState(1367);
      classModifier();
      setState(1372);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1373);
    match(Java20Parser::RECORD);
    setState(1374);
    typeIdentifier();
    setState(1376);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::LT) {
      setState(1375);
      typeParameters();
    }
    setState(1378);
    recordHeader();
    setState(1380);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::IMPLEMENTS) {
      setState(1379);
      classImplements();
    }
    setState(1382);
    recordBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordHeaderContext ------------------------------------------------------------------

Java20Parser::RecordHeaderContext::RecordHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::RecordHeaderContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

tree::TerminalNode* Java20Parser::RecordHeaderContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::RecordComponentListContext* Java20Parser::RecordHeaderContext::recordComponentList() {
  return getRuleContext<Java20Parser::RecordComponentListContext>(0);
}


size_t Java20Parser::RecordHeaderContext::getRuleIndex() const {
  return Java20Parser::RuleRecordHeader;
}


std::any Java20Parser::RecordHeaderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitRecordHeader(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::RecordHeaderContext* Java20Parser::recordHeader() {
  RecordHeaderContext *_localctx = _tracker.createInstance<RecordHeaderContext>(_ctx, getState());
  enterRule(_localctx, 204, Java20Parser::RuleRecordHeader);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1384);
    match(Java20Parser::LPAREN);
    setState(1386);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18102499064938496) != 0) || _la == Java20Parser::AT

    || _la == Java20Parser::Identifier) {
      setState(1385);
      recordComponentList();
    }
    setState(1388);
    match(Java20Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordComponentListContext ------------------------------------------------------------------

Java20Parser::RecordComponentListContext::RecordComponentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::RecordComponentContext *> Java20Parser::RecordComponentListContext::recordComponent() {
  return getRuleContexts<Java20Parser::RecordComponentContext>();
}

Java20Parser::RecordComponentContext* Java20Parser::RecordComponentListContext::recordComponent(size_t i) {
  return getRuleContext<Java20Parser::RecordComponentContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::RecordComponentListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::RecordComponentListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::RecordComponentListContext::getRuleIndex() const {
  return Java20Parser::RuleRecordComponentList;
}


std::any Java20Parser::RecordComponentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitRecordComponentList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::RecordComponentListContext* Java20Parser::recordComponentList() {
  RecordComponentListContext *_localctx = _tracker.createInstance<RecordComponentListContext>(_ctx, getState());
  enterRule(_localctx, 206, Java20Parser::RuleRecordComponentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1390);
    recordComponent();
    setState(1395);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::COMMA) {
      setState(1391);
      match(Java20Parser::COMMA);
      setState(1392);
      recordComponent();
      setState(1397);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordComponentContext ------------------------------------------------------------------

Java20Parser::RecordComponentContext::RecordComponentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannTypeContext* Java20Parser::RecordComponentContext::unannType() {
  return getRuleContext<Java20Parser::UnannTypeContext>(0);
}

tree::TerminalNode* Java20Parser::RecordComponentContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

std::vector<Java20Parser::RecordComponentModifierContext *> Java20Parser::RecordComponentContext::recordComponentModifier() {
  return getRuleContexts<Java20Parser::RecordComponentModifierContext>();
}

Java20Parser::RecordComponentModifierContext* Java20Parser::RecordComponentContext::recordComponentModifier(size_t i) {
  return getRuleContext<Java20Parser::RecordComponentModifierContext>(i);
}

Java20Parser::VariableArityRecordComponentContext* Java20Parser::RecordComponentContext::variableArityRecordComponent() {
  return getRuleContext<Java20Parser::VariableArityRecordComponentContext>(0);
}


size_t Java20Parser::RecordComponentContext::getRuleIndex() const {
  return Java20Parser::RuleRecordComponent;
}


std::any Java20Parser::RecordComponentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitRecordComponent(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::RecordComponentContext* Java20Parser::recordComponent() {
  RecordComponentContext *_localctx = _tracker.createInstance<RecordComponentContext>(_ctx, getState());
  enterRule(_localctx, 208, Java20Parser::RuleRecordComponent);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1408);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1401);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::AT) {
        setState(1398);
        recordComponentModifier();
        setState(1403);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1404);
      unannType();
      setState(1405);
      match(Java20Parser::Identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1407);
      variableArityRecordComponent();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableArityRecordComponentContext ------------------------------------------------------------------

Java20Parser::VariableArityRecordComponentContext::VariableArityRecordComponentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannTypeContext* Java20Parser::VariableArityRecordComponentContext::unannType() {
  return getRuleContext<Java20Parser::UnannTypeContext>(0);
}

tree::TerminalNode* Java20Parser::VariableArityRecordComponentContext::ELLIPSIS() {
  return getToken(Java20Parser::ELLIPSIS, 0);
}

tree::TerminalNode* Java20Parser::VariableArityRecordComponentContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

std::vector<Java20Parser::RecordComponentModifierContext *> Java20Parser::VariableArityRecordComponentContext::recordComponentModifier() {
  return getRuleContexts<Java20Parser::RecordComponentModifierContext>();
}

Java20Parser::RecordComponentModifierContext* Java20Parser::VariableArityRecordComponentContext::recordComponentModifier(size_t i) {
  return getRuleContext<Java20Parser::RecordComponentModifierContext>(i);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::VariableArityRecordComponentContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::VariableArityRecordComponentContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}


size_t Java20Parser::VariableArityRecordComponentContext::getRuleIndex() const {
  return Java20Parser::RuleVariableArityRecordComponent;
}


std::any Java20Parser::VariableArityRecordComponentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitVariableArityRecordComponent(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::VariableArityRecordComponentContext* Java20Parser::variableArityRecordComponent() {
  VariableArityRecordComponentContext *_localctx = _tracker.createInstance<VariableArityRecordComponentContext>(_ctx, getState());
  enterRule(_localctx, 210, Java20Parser::RuleVariableArityRecordComponent);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1413);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(1410);
      recordComponentModifier();
      setState(1415);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1416);
    unannType();
    setState(1420);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(1417);
      annotation();
      setState(1422);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1423);
    match(Java20Parser::ELLIPSIS);
    setState(1424);
    match(Java20Parser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordComponentModifierContext ------------------------------------------------------------------

Java20Parser::RecordComponentModifierContext::RecordComponentModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationContext* Java20Parser::RecordComponentModifierContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}


size_t Java20Parser::RecordComponentModifierContext::getRuleIndex() const {
  return Java20Parser::RuleRecordComponentModifier;
}


std::any Java20Parser::RecordComponentModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitRecordComponentModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::RecordComponentModifierContext* Java20Parser::recordComponentModifier() {
  RecordComponentModifierContext *_localctx = _tracker.createInstance<RecordComponentModifierContext>(_ctx, getState());
  enterRule(_localctx, 212, Java20Parser::RuleRecordComponentModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1426);
    annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordBodyContext ------------------------------------------------------------------

Java20Parser::RecordBodyContext::RecordBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::RecordBodyContext::LBRACE() {
  return getToken(Java20Parser::LBRACE, 0);
}

tree::TerminalNode* Java20Parser::RecordBodyContext::RBRACE() {
  return getToken(Java20Parser::RBRACE, 0);
}

std::vector<Java20Parser::RecordBodyDeclarationContext *> Java20Parser::RecordBodyContext::recordBodyDeclaration() {
  return getRuleContexts<Java20Parser::RecordBodyDeclarationContext>();
}

Java20Parser::RecordBodyDeclarationContext* Java20Parser::RecordBodyContext::recordBodyDeclaration(size_t i) {
  return getRuleContext<Java20Parser::RecordBodyDeclarationContext>(i);
}


size_t Java20Parser::RecordBodyContext::getRuleIndex() const {
  return Java20Parser::RuleRecordBody;
}


std::any Java20Parser::RecordBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitRecordBody(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::RecordBodyContext* Java20Parser::recordBody() {
  RecordBodyContext *_localctx = _tracker.createInstance<RecordBodyContext>(_ctx, getState());
  enterRule(_localctx, 214, Java20Parser::RuleRecordBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1428);
    match(Java20Parser::LBRACE);
    setState(1432);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8512665130204132856) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288230376187502595) != 0)) {
      setState(1429);
      recordBodyDeclaration();
      setState(1434);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1435);
    match(Java20Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordBodyDeclarationContext ------------------------------------------------------------------

Java20Parser::RecordBodyDeclarationContext::RecordBodyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ClassBodyDeclarationContext* Java20Parser::RecordBodyDeclarationContext::classBodyDeclaration() {
  return getRuleContext<Java20Parser::ClassBodyDeclarationContext>(0);
}

Java20Parser::CompactConstructorDeclarationContext* Java20Parser::RecordBodyDeclarationContext::compactConstructorDeclaration() {
  return getRuleContext<Java20Parser::CompactConstructorDeclarationContext>(0);
}


size_t Java20Parser::RecordBodyDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleRecordBodyDeclaration;
}


std::any Java20Parser::RecordBodyDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitRecordBodyDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::RecordBodyDeclarationContext* Java20Parser::recordBodyDeclaration() {
  RecordBodyDeclarationContext *_localctx = _tracker.createInstance<RecordBodyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 216, Java20Parser::RuleRecordBodyDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1439);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1437);
      classBodyDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1438);
      compactConstructorDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompactConstructorDeclarationContext ------------------------------------------------------------------

Java20Parser::CompactConstructorDeclarationContext::CompactConstructorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::SimpleTypeNameContext* Java20Parser::CompactConstructorDeclarationContext::simpleTypeName() {
  return getRuleContext<Java20Parser::SimpleTypeNameContext>(0);
}

Java20Parser::ConstructorBodyContext* Java20Parser::CompactConstructorDeclarationContext::constructorBody() {
  return getRuleContext<Java20Parser::ConstructorBodyContext>(0);
}

std::vector<Java20Parser::ConstructorModifierContext *> Java20Parser::CompactConstructorDeclarationContext::constructorModifier() {
  return getRuleContexts<Java20Parser::ConstructorModifierContext>();
}

Java20Parser::ConstructorModifierContext* Java20Parser::CompactConstructorDeclarationContext::constructorModifier(size_t i) {
  return getRuleContext<Java20Parser::ConstructorModifierContext>(i);
}


size_t Java20Parser::CompactConstructorDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleCompactConstructorDeclaration;
}


std::any Java20Parser::CompactConstructorDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitCompactConstructorDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::CompactConstructorDeclarationContext* Java20Parser::compactConstructorDeclaration() {
  CompactConstructorDeclarationContext *_localctx = _tracker.createInstance<CompactConstructorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 218, Java20Parser::RuleCompactConstructorDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1444);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 50) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 50)) & 68719476743) != 0)) {
      setState(1441);
      constructorModifier();
      setState(1446);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1447);
    simpleTypeName();
    setState(1448);
    constructorBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceDeclarationContext ------------------------------------------------------------------

Java20Parser::InterfaceDeclarationContext::InterfaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::NormalInterfaceDeclarationContext* Java20Parser::InterfaceDeclarationContext::normalInterfaceDeclaration() {
  return getRuleContext<Java20Parser::NormalInterfaceDeclarationContext>(0);
}

Java20Parser::AnnotationInterfaceDeclarationContext* Java20Parser::InterfaceDeclarationContext::annotationInterfaceDeclaration() {
  return getRuleContext<Java20Parser::AnnotationInterfaceDeclarationContext>(0);
}


size_t Java20Parser::InterfaceDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleInterfaceDeclaration;
}


std::any Java20Parser::InterfaceDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::InterfaceDeclarationContext* Java20Parser::interfaceDeclaration() {
  InterfaceDeclarationContext *_localctx = _tracker.createInstance<InterfaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 220, Java20Parser::RuleInterfaceDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1452);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1450);
      normalInterfaceDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1451);
      annotationInterfaceDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalInterfaceDeclarationContext ------------------------------------------------------------------

Java20Parser::NormalInterfaceDeclarationContext::NormalInterfaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::NormalInterfaceDeclarationContext::INTERFACE() {
  return getToken(Java20Parser::INTERFACE, 0);
}

Java20Parser::TypeIdentifierContext* Java20Parser::NormalInterfaceDeclarationContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}

Java20Parser::InterfaceBodyContext* Java20Parser::NormalInterfaceDeclarationContext::interfaceBody() {
  return getRuleContext<Java20Parser::InterfaceBodyContext>(0);
}

std::vector<Java20Parser::InterfaceModifierContext *> Java20Parser::NormalInterfaceDeclarationContext::interfaceModifier() {
  return getRuleContexts<Java20Parser::InterfaceModifierContext>();
}

Java20Parser::InterfaceModifierContext* Java20Parser::NormalInterfaceDeclarationContext::interfaceModifier(size_t i) {
  return getRuleContext<Java20Parser::InterfaceModifierContext>(i);
}

Java20Parser::TypeParametersContext* Java20Parser::NormalInterfaceDeclarationContext::typeParameters() {
  return getRuleContext<Java20Parser::TypeParametersContext>(0);
}

Java20Parser::InterfaceExtendsContext* Java20Parser::NormalInterfaceDeclarationContext::interfaceExtends() {
  return getRuleContext<Java20Parser::InterfaceExtendsContext>(0);
}

Java20Parser::InterfacePermitsContext* Java20Parser::NormalInterfaceDeclarationContext::interfacePermits() {
  return getRuleContext<Java20Parser::InterfacePermitsContext>(0);
}


size_t Java20Parser::NormalInterfaceDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleNormalInterfaceDeclaration;
}


std::any Java20Parser::NormalInterfaceDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitNormalInterfaceDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::NormalInterfaceDeclarationContext* Java20Parser::normalInterfaceDeclaration() {
  NormalInterfaceDeclarationContext *_localctx = _tracker.createInstance<NormalInterfaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 222, Java20Parser::RuleNormalInterfaceDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1457);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 115967690405054472) != 0) || _la == Java20Parser::AT) {
      setState(1454);
      interfaceModifier();
      setState(1459);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1460);
    match(Java20Parser::INTERFACE);
    setState(1461);
    typeIdentifier();
    setState(1463);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::LT) {
      setState(1462);
      typeParameters();
    }
    setState(1466);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::EXTENDS) {
      setState(1465);
      interfaceExtends();
    }
    setState(1469);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::PERMITS) {
      setState(1468);
      interfacePermits();
    }
    setState(1471);
    interfaceBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceModifierContext ------------------------------------------------------------------

Java20Parser::InterfaceModifierContext::InterfaceModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationContext* Java20Parser::InterfaceModifierContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java20Parser::InterfaceModifierContext::PUBLIC() {
  return getToken(Java20Parser::PUBLIC, 0);
}

tree::TerminalNode* Java20Parser::InterfaceModifierContext::PROTECTED() {
  return getToken(Java20Parser::PROTECTED, 0);
}

tree::TerminalNode* Java20Parser::InterfaceModifierContext::PRIVATE() {
  return getToken(Java20Parser::PRIVATE, 0);
}

tree::TerminalNode* Java20Parser::InterfaceModifierContext::ABSTRACT() {
  return getToken(Java20Parser::ABSTRACT, 0);
}

tree::TerminalNode* Java20Parser::InterfaceModifierContext::STATIC() {
  return getToken(Java20Parser::STATIC, 0);
}

tree::TerminalNode* Java20Parser::InterfaceModifierContext::SEALED() {
  return getToken(Java20Parser::SEALED, 0);
}

tree::TerminalNode* Java20Parser::InterfaceModifierContext::NONSEALED() {
  return getToken(Java20Parser::NONSEALED, 0);
}

tree::TerminalNode* Java20Parser::InterfaceModifierContext::STRICTFP() {
  return getToken(Java20Parser::STRICTFP, 0);
}


size_t Java20Parser::InterfaceModifierContext::getRuleIndex() const {
  return Java20Parser::RuleInterfaceModifier;
}


std::any Java20Parser::InterfaceModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::InterfaceModifierContext* Java20Parser::interfaceModifier() {
  InterfaceModifierContext *_localctx = _tracker.createInstance<InterfaceModifierContext>(_ctx, getState());
  enterRule(_localctx, 224, Java20Parser::RuleInterfaceModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1482);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1473);
        annotation();
        break;
      }

      case Java20Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1474);
        match(Java20Parser::PUBLIC);
        break;
      }

      case Java20Parser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(1475);
        match(Java20Parser::PROTECTED);
        break;
      }

      case Java20Parser::PRIVATE: {
        enterOuterAlt(_localctx, 4);
        setState(1476);
        match(Java20Parser::PRIVATE);
        break;
      }

      case Java20Parser::ABSTRACT: {
        enterOuterAlt(_localctx, 5);
        setState(1477);
        match(Java20Parser::ABSTRACT);
        break;
      }

      case Java20Parser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(1478);
        match(Java20Parser::STATIC);
        break;
      }

      case Java20Parser::SEALED: {
        enterOuterAlt(_localctx, 7);
        setState(1479);
        match(Java20Parser::SEALED);
        break;
      }

      case Java20Parser::NONSEALED: {
        enterOuterAlt(_localctx, 8);
        setState(1480);
        match(Java20Parser::NONSEALED);
        break;
      }

      case Java20Parser::STRICTFP: {
        enterOuterAlt(_localctx, 9);
        setState(1481);
        match(Java20Parser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceExtendsContext ------------------------------------------------------------------

Java20Parser::InterfaceExtendsContext::InterfaceExtendsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::InterfaceExtendsContext::EXTENDS() {
  return getToken(Java20Parser::EXTENDS, 0);
}

Java20Parser::InterfaceTypeListContext* Java20Parser::InterfaceExtendsContext::interfaceTypeList() {
  return getRuleContext<Java20Parser::InterfaceTypeListContext>(0);
}


size_t Java20Parser::InterfaceExtendsContext::getRuleIndex() const {
  return Java20Parser::RuleInterfaceExtends;
}


std::any Java20Parser::InterfaceExtendsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceExtends(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::InterfaceExtendsContext* Java20Parser::interfaceExtends() {
  InterfaceExtendsContext *_localctx = _tracker.createInstance<InterfaceExtendsContext>(_ctx, getState());
  enterRule(_localctx, 226, Java20Parser::RuleInterfaceExtends);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1484);
    match(Java20Parser::EXTENDS);
    setState(1485);
    interfaceTypeList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfacePermitsContext ------------------------------------------------------------------

Java20Parser::InterfacePermitsContext::InterfacePermitsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::InterfacePermitsContext::PERMITS() {
  return getToken(Java20Parser::PERMITS, 0);
}

std::vector<Java20Parser::TypeNameContext *> Java20Parser::InterfacePermitsContext::typeName() {
  return getRuleContexts<Java20Parser::TypeNameContext>();
}

Java20Parser::TypeNameContext* Java20Parser::InterfacePermitsContext::typeName(size_t i) {
  return getRuleContext<Java20Parser::TypeNameContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::InterfacePermitsContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::InterfacePermitsContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::InterfacePermitsContext::getRuleIndex() const {
  return Java20Parser::RuleInterfacePermits;
}


std::any Java20Parser::InterfacePermitsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitInterfacePermits(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::InterfacePermitsContext* Java20Parser::interfacePermits() {
  InterfacePermitsContext *_localctx = _tracker.createInstance<InterfacePermitsContext>(_ctx, getState());
  enterRule(_localctx, 228, Java20Parser::RuleInterfacePermits);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1487);
    match(Java20Parser::PERMITS);
    setState(1488);
    typeName();
    setState(1493);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::COMMA) {
      setState(1489);
      match(Java20Parser::COMMA);
      setState(1490);
      typeName();
      setState(1495);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceBodyContext ------------------------------------------------------------------

Java20Parser::InterfaceBodyContext::InterfaceBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::InterfaceBodyContext::LBRACE() {
  return getToken(Java20Parser::LBRACE, 0);
}

tree::TerminalNode* Java20Parser::InterfaceBodyContext::RBRACE() {
  return getToken(Java20Parser::RBRACE, 0);
}

std::vector<Java20Parser::InterfaceMemberDeclarationContext *> Java20Parser::InterfaceBodyContext::interfaceMemberDeclaration() {
  return getRuleContexts<Java20Parser::InterfaceMemberDeclarationContext>();
}

Java20Parser::InterfaceMemberDeclarationContext* Java20Parser::InterfaceBodyContext::interfaceMemberDeclaration(size_t i) {
  return getRuleContext<Java20Parser::InterfaceMemberDeclarationContext>(i);
}


size_t Java20Parser::InterfaceBodyContext::getRuleIndex() const {
  return Java20Parser::RuleInterfaceBody;
}


std::any Java20Parser::InterfaceBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceBody(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::InterfaceBodyContext* Java20Parser::interfaceBody() {
  InterfaceBodyContext *_localctx = _tracker.createInstance<InterfaceBodyContext>(_ctx, getState());
  enterRule(_localctx, 230, Java20Parser::RuleInterfaceBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1496);
    match(Java20Parser::LBRACE);
    setState(1500);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 134105417395735048) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288230376187494401) != 0)) {
      setState(1497);
      interfaceMemberDeclaration();
      setState(1502);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1503);
    match(Java20Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMemberDeclarationContext ------------------------------------------------------------------

Java20Parser::InterfaceMemberDeclarationContext::InterfaceMemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ConstantDeclarationContext* Java20Parser::InterfaceMemberDeclarationContext::constantDeclaration() {
  return getRuleContext<Java20Parser::ConstantDeclarationContext>(0);
}

Java20Parser::InterfaceMethodDeclarationContext* Java20Parser::InterfaceMemberDeclarationContext::interfaceMethodDeclaration() {
  return getRuleContext<Java20Parser::InterfaceMethodDeclarationContext>(0);
}

Java20Parser::ClassDeclarationContext* Java20Parser::InterfaceMemberDeclarationContext::classDeclaration() {
  return getRuleContext<Java20Parser::ClassDeclarationContext>(0);
}

Java20Parser::InterfaceDeclarationContext* Java20Parser::InterfaceMemberDeclarationContext::interfaceDeclaration() {
  return getRuleContext<Java20Parser::InterfaceDeclarationContext>(0);
}

tree::TerminalNode* Java20Parser::InterfaceMemberDeclarationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::InterfaceMemberDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleInterfaceMemberDeclaration;
}


std::any Java20Parser::InterfaceMemberDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceMemberDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::InterfaceMemberDeclarationContext* Java20Parser::interfaceMemberDeclaration() {
  InterfaceMemberDeclarationContext *_localctx = _tracker.createInstance<InterfaceMemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 232, Java20Parser::RuleInterfaceMemberDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1510);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1505);
      constantDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1506);
      interfaceMethodDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1507);
      classDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1508);
      interfaceDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1509);
      match(Java20Parser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantDeclarationContext ------------------------------------------------------------------

Java20Parser::ConstantDeclarationContext::ConstantDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannTypeContext* Java20Parser::ConstantDeclarationContext::unannType() {
  return getRuleContext<Java20Parser::UnannTypeContext>(0);
}

Java20Parser::VariableDeclaratorListContext* Java20Parser::ConstantDeclarationContext::variableDeclaratorList() {
  return getRuleContext<Java20Parser::VariableDeclaratorListContext>(0);
}

tree::TerminalNode* Java20Parser::ConstantDeclarationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}

std::vector<Java20Parser::ConstantModifierContext *> Java20Parser::ConstantDeclarationContext::constantModifier() {
  return getRuleContexts<Java20Parser::ConstantModifierContext>();
}

Java20Parser::ConstantModifierContext* Java20Parser::ConstantDeclarationContext::constantModifier(size_t i) {
  return getRuleContext<Java20Parser::ConstantModifierContext>(i);
}


size_t Java20Parser::ConstantDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleConstantDeclaration;
}


std::any Java20Parser::ConstantDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitConstantDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ConstantDeclarationContext* Java20Parser::constantDeclaration() {
  ConstantDeclarationContext *_localctx = _tracker.createInstance<ConstantDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 234, Java20Parser::RuleConstantDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1515);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 35) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 35)) & 2251799814864897) != 0)) {
      setState(1512);
      constantModifier();
      setState(1517);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1518);
    unannType();
    setState(1519);
    variableDeclaratorList();
    setState(1520);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantModifierContext ------------------------------------------------------------------

Java20Parser::ConstantModifierContext::ConstantModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationContext* Java20Parser::ConstantModifierContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java20Parser::ConstantModifierContext::PUBLIC() {
  return getToken(Java20Parser::PUBLIC, 0);
}

tree::TerminalNode* Java20Parser::ConstantModifierContext::STATIC() {
  return getToken(Java20Parser::STATIC, 0);
}

tree::TerminalNode* Java20Parser::ConstantModifierContext::FINAL() {
  return getToken(Java20Parser::FINAL, 0);
}


size_t Java20Parser::ConstantModifierContext::getRuleIndex() const {
  return Java20Parser::RuleConstantModifier;
}


std::any Java20Parser::ConstantModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitConstantModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ConstantModifierContext* Java20Parser::constantModifier() {
  ConstantModifierContext *_localctx = _tracker.createInstance<ConstantModifierContext>(_ctx, getState());
  enterRule(_localctx, 236, Java20Parser::RuleConstantModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1526);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1522);
        annotation();
        break;
      }

      case Java20Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1523);
        match(Java20Parser::PUBLIC);
        break;
      }

      case Java20Parser::STATIC: {
        enterOuterAlt(_localctx, 3);
        setState(1524);
        match(Java20Parser::STATIC);
        break;
      }

      case Java20Parser::FINAL: {
        enterOuterAlt(_localctx, 4);
        setState(1525);
        match(Java20Parser::FINAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodDeclarationContext ------------------------------------------------------------------

Java20Parser::InterfaceMethodDeclarationContext::InterfaceMethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::MethodHeaderContext* Java20Parser::InterfaceMethodDeclarationContext::methodHeader() {
  return getRuleContext<Java20Parser::MethodHeaderContext>(0);
}

Java20Parser::MethodBodyContext* Java20Parser::InterfaceMethodDeclarationContext::methodBody() {
  return getRuleContext<Java20Parser::MethodBodyContext>(0);
}

std::vector<Java20Parser::InterfaceMethodModifierContext *> Java20Parser::InterfaceMethodDeclarationContext::interfaceMethodModifier() {
  return getRuleContexts<Java20Parser::InterfaceMethodModifierContext>();
}

Java20Parser::InterfaceMethodModifierContext* Java20Parser::InterfaceMethodDeclarationContext::interfaceMethodModifier(size_t i) {
  return getRuleContext<Java20Parser::InterfaceMethodModifierContext>(i);
}


size_t Java20Parser::InterfaceMethodDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleInterfaceMethodDeclaration;
}


std::any Java20Parser::InterfaceMethodDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceMethodDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::InterfaceMethodDeclarationContext* Java20Parser::interfaceMethodDeclaration() {
  InterfaceMethodDeclarationContext *_localctx = _tracker.createInstance<InterfaceMethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 238, Java20Parser::RuleInterfaceMethodDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1531);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 113715891128238080) != 0) || _la == Java20Parser::AT) {
      setState(1528);
      interfaceMethodModifier();
      setState(1533);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1534);
    methodHeader();
    setState(1535);
    methodBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodModifierContext ------------------------------------------------------------------

Java20Parser::InterfaceMethodModifierContext::InterfaceMethodModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationContext* Java20Parser::InterfaceMethodModifierContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java20Parser::InterfaceMethodModifierContext::PUBLIC() {
  return getToken(Java20Parser::PUBLIC, 0);
}

tree::TerminalNode* Java20Parser::InterfaceMethodModifierContext::PRIVATE() {
  return getToken(Java20Parser::PRIVATE, 0);
}

tree::TerminalNode* Java20Parser::InterfaceMethodModifierContext::ABSTRACT() {
  return getToken(Java20Parser::ABSTRACT, 0);
}

tree::TerminalNode* Java20Parser::InterfaceMethodModifierContext::DEFAULT() {
  return getToken(Java20Parser::DEFAULT, 0);
}

tree::TerminalNode* Java20Parser::InterfaceMethodModifierContext::STATIC() {
  return getToken(Java20Parser::STATIC, 0);
}

tree::TerminalNode* Java20Parser::InterfaceMethodModifierContext::STRICTFP() {
  return getToken(Java20Parser::STRICTFP, 0);
}


size_t Java20Parser::InterfaceMethodModifierContext::getRuleIndex() const {
  return Java20Parser::RuleInterfaceMethodModifier;
}


std::any Java20Parser::InterfaceMethodModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceMethodModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::InterfaceMethodModifierContext* Java20Parser::interfaceMethodModifier() {
  InterfaceMethodModifierContext *_localctx = _tracker.createInstance<InterfaceMethodModifierContext>(_ctx, getState());
  enterRule(_localctx, 240, Java20Parser::RuleInterfaceMethodModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1544);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1537);
        annotation();
        break;
      }

      case Java20Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1538);
        match(Java20Parser::PUBLIC);
        break;
      }

      case Java20Parser::PRIVATE: {
        enterOuterAlt(_localctx, 3);
        setState(1539);
        match(Java20Parser::PRIVATE);
        break;
      }

      case Java20Parser::ABSTRACT: {
        enterOuterAlt(_localctx, 4);
        setState(1540);
        match(Java20Parser::ABSTRACT);
        break;
      }

      case Java20Parser::DEFAULT: {
        enterOuterAlt(_localctx, 5);
        setState(1541);
        match(Java20Parser::DEFAULT);
        break;
      }

      case Java20Parser::STATIC: {
        enterOuterAlt(_localctx, 6);
        setState(1542);
        match(Java20Parser::STATIC);
        break;
      }

      case Java20Parser::STRICTFP: {
        enterOuterAlt(_localctx, 7);
        setState(1543);
        match(Java20Parser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationInterfaceDeclarationContext ------------------------------------------------------------------

Java20Parser::AnnotationInterfaceDeclarationContext::AnnotationInterfaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::AnnotationInterfaceDeclarationContext::AT() {
  return getToken(Java20Parser::AT, 0);
}

tree::TerminalNode* Java20Parser::AnnotationInterfaceDeclarationContext::INTERFACE() {
  return getToken(Java20Parser::INTERFACE, 0);
}

Java20Parser::TypeIdentifierContext* Java20Parser::AnnotationInterfaceDeclarationContext::typeIdentifier() {
  return getRuleContext<Java20Parser::TypeIdentifierContext>(0);
}

Java20Parser::AnnotationInterfaceBodyContext* Java20Parser::AnnotationInterfaceDeclarationContext::annotationInterfaceBody() {
  return getRuleContext<Java20Parser::AnnotationInterfaceBodyContext>(0);
}

std::vector<Java20Parser::InterfaceModifierContext *> Java20Parser::AnnotationInterfaceDeclarationContext::interfaceModifier() {
  return getRuleContexts<Java20Parser::InterfaceModifierContext>();
}

Java20Parser::InterfaceModifierContext* Java20Parser::AnnotationInterfaceDeclarationContext::interfaceModifier(size_t i) {
  return getRuleContext<Java20Parser::InterfaceModifierContext>(i);
}


size_t Java20Parser::AnnotationInterfaceDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleAnnotationInterfaceDeclaration;
}


std::any Java20Parser::AnnotationInterfaceDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationInterfaceDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::AnnotationInterfaceDeclarationContext* Java20Parser::annotationInterfaceDeclaration() {
  AnnotationInterfaceDeclarationContext *_localctx = _tracker.createInstance<AnnotationInterfaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 242, Java20Parser::RuleAnnotationInterfaceDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1549);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1546);
        interfaceModifier(); 
      }
      setState(1551);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    }
    setState(1552);
    match(Java20Parser::AT);
    setState(1553);
    match(Java20Parser::INTERFACE);
    setState(1554);
    typeIdentifier();
    setState(1555);
    annotationInterfaceBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationInterfaceBodyContext ------------------------------------------------------------------

Java20Parser::AnnotationInterfaceBodyContext::AnnotationInterfaceBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::AnnotationInterfaceBodyContext::LBRACE() {
  return getToken(Java20Parser::LBRACE, 0);
}

tree::TerminalNode* Java20Parser::AnnotationInterfaceBodyContext::RBRACE() {
  return getToken(Java20Parser::RBRACE, 0);
}

std::vector<Java20Parser::AnnotationInterfaceMemberDeclarationContext *> Java20Parser::AnnotationInterfaceBodyContext::annotationInterfaceMemberDeclaration() {
  return getRuleContexts<Java20Parser::AnnotationInterfaceMemberDeclarationContext>();
}

Java20Parser::AnnotationInterfaceMemberDeclarationContext* Java20Parser::AnnotationInterfaceBodyContext::annotationInterfaceMemberDeclaration(size_t i) {
  return getRuleContext<Java20Parser::AnnotationInterfaceMemberDeclarationContext>(i);
}


size_t Java20Parser::AnnotationInterfaceBodyContext::getRuleIndex() const {
  return Java20Parser::RuleAnnotationInterfaceBody;
}


std::any Java20Parser::AnnotationInterfaceBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationInterfaceBody(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::AnnotationInterfaceBodyContext* Java20Parser::annotationInterfaceBody() {
  AnnotationInterfaceBodyContext *_localctx = _tracker.createInstance<AnnotationInterfaceBodyContext>(_ctx, getState());
  enterRule(_localctx, 244, Java20Parser::RuleAnnotationInterfaceBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1557);
    match(Java20Parser::LBRACE);
    setState(1561);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 134105416858864136) != 0) || ((((_la - 82) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 82)) & 2199023255569) != 0)) {
      setState(1558);
      annotationInterfaceMemberDeclaration();
      setState(1563);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1564);
    match(Java20Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationInterfaceMemberDeclarationContext ------------------------------------------------------------------

Java20Parser::AnnotationInterfaceMemberDeclarationContext::AnnotationInterfaceMemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationInterfaceElementDeclarationContext* Java20Parser::AnnotationInterfaceMemberDeclarationContext::annotationInterfaceElementDeclaration() {
  return getRuleContext<Java20Parser::AnnotationInterfaceElementDeclarationContext>(0);
}

Java20Parser::ConstantDeclarationContext* Java20Parser::AnnotationInterfaceMemberDeclarationContext::constantDeclaration() {
  return getRuleContext<Java20Parser::ConstantDeclarationContext>(0);
}

Java20Parser::ClassDeclarationContext* Java20Parser::AnnotationInterfaceMemberDeclarationContext::classDeclaration() {
  return getRuleContext<Java20Parser::ClassDeclarationContext>(0);
}

Java20Parser::InterfaceDeclarationContext* Java20Parser::AnnotationInterfaceMemberDeclarationContext::interfaceDeclaration() {
  return getRuleContext<Java20Parser::InterfaceDeclarationContext>(0);
}

tree::TerminalNode* Java20Parser::AnnotationInterfaceMemberDeclarationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::AnnotationInterfaceMemberDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleAnnotationInterfaceMemberDeclaration;
}


std::any Java20Parser::AnnotationInterfaceMemberDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationInterfaceMemberDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::AnnotationInterfaceMemberDeclarationContext* Java20Parser::annotationInterfaceMemberDeclaration() {
  AnnotationInterfaceMemberDeclarationContext *_localctx = _tracker.createInstance<AnnotationInterfaceMemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 246, Java20Parser::RuleAnnotationInterfaceMemberDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1571);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1566);
      annotationInterfaceElementDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1567);
      constantDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1568);
      classDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1569);
      interfaceDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1570);
      match(Java20Parser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationInterfaceElementDeclarationContext ------------------------------------------------------------------

Java20Parser::AnnotationInterfaceElementDeclarationContext::AnnotationInterfaceElementDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannTypeContext* Java20Parser::AnnotationInterfaceElementDeclarationContext::unannType() {
  return getRuleContext<Java20Parser::UnannTypeContext>(0);
}

tree::TerminalNode* Java20Parser::AnnotationInterfaceElementDeclarationContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::AnnotationInterfaceElementDeclarationContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

tree::TerminalNode* Java20Parser::AnnotationInterfaceElementDeclarationContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

tree::TerminalNode* Java20Parser::AnnotationInterfaceElementDeclarationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}

std::vector<Java20Parser::AnnotationInterfaceElementModifierContext *> Java20Parser::AnnotationInterfaceElementDeclarationContext::annotationInterfaceElementModifier() {
  return getRuleContexts<Java20Parser::AnnotationInterfaceElementModifierContext>();
}

Java20Parser::AnnotationInterfaceElementModifierContext* Java20Parser::AnnotationInterfaceElementDeclarationContext::annotationInterfaceElementModifier(size_t i) {
  return getRuleContext<Java20Parser::AnnotationInterfaceElementModifierContext>(i);
}

Java20Parser::DimsContext* Java20Parser::AnnotationInterfaceElementDeclarationContext::dims() {
  return getRuleContext<Java20Parser::DimsContext>(0);
}

Java20Parser::DefaultValueContext* Java20Parser::AnnotationInterfaceElementDeclarationContext::defaultValue() {
  return getRuleContext<Java20Parser::DefaultValueContext>(0);
}


size_t Java20Parser::AnnotationInterfaceElementDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleAnnotationInterfaceElementDeclaration;
}


std::any Java20Parser::AnnotationInterfaceElementDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationInterfaceElementDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::AnnotationInterfaceElementDeclarationContext* Java20Parser::annotationInterfaceElementDeclaration() {
  AnnotationInterfaceElementDeclarationContext *_localctx = _tracker.createInstance<AnnotationInterfaceElementDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 248, Java20Parser::RuleAnnotationInterfaceElementDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1576);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::ABSTRACT

    || _la == Java20Parser::PUBLIC || _la == Java20Parser::AT) {
      setState(1573);
      annotationInterfaceElementModifier();
      setState(1578);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1579);
    unannType();
    setState(1580);
    match(Java20Parser::Identifier);
    setState(1581);
    match(Java20Parser::LPAREN);
    setState(1582);
    match(Java20Parser::RPAREN);
    setState(1584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::LBRACK

    || _la == Java20Parser::AT) {
      setState(1583);
      dims();
    }
    setState(1587);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::DEFAULT) {
      setState(1586);
      defaultValue();
    }
    setState(1589);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationInterfaceElementModifierContext ------------------------------------------------------------------

Java20Parser::AnnotationInterfaceElementModifierContext::AnnotationInterfaceElementModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AnnotationContext* Java20Parser::AnnotationInterfaceElementModifierContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}

tree::TerminalNode* Java20Parser::AnnotationInterfaceElementModifierContext::PUBLIC() {
  return getToken(Java20Parser::PUBLIC, 0);
}

tree::TerminalNode* Java20Parser::AnnotationInterfaceElementModifierContext::ABSTRACT() {
  return getToken(Java20Parser::ABSTRACT, 0);
}


size_t Java20Parser::AnnotationInterfaceElementModifierContext::getRuleIndex() const {
  return Java20Parser::RuleAnnotationInterfaceElementModifier;
}


std::any Java20Parser::AnnotationInterfaceElementModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationInterfaceElementModifier(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::AnnotationInterfaceElementModifierContext* Java20Parser::annotationInterfaceElementModifier() {
  AnnotationInterfaceElementModifierContext *_localctx = _tracker.createInstance<AnnotationInterfaceElementModifierContext>(_ctx, getState());
  enterRule(_localctx, 250, Java20Parser::RuleAnnotationInterfaceElementModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1594);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1591);
        annotation();
        break;
      }

      case Java20Parser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(1592);
        match(Java20Parser::PUBLIC);
        break;
      }

      case Java20Parser::ABSTRACT: {
        enterOuterAlt(_localctx, 3);
        setState(1593);
        match(Java20Parser::ABSTRACT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultValueContext ------------------------------------------------------------------

Java20Parser::DefaultValueContext::DefaultValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::DefaultValueContext::DEFAULT() {
  return getToken(Java20Parser::DEFAULT, 0);
}

Java20Parser::ElementValueContext* Java20Parser::DefaultValueContext::elementValue() {
  return getRuleContext<Java20Parser::ElementValueContext>(0);
}


size_t Java20Parser::DefaultValueContext::getRuleIndex() const {
  return Java20Parser::RuleDefaultValue;
}


std::any Java20Parser::DefaultValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitDefaultValue(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::DefaultValueContext* Java20Parser::defaultValue() {
  DefaultValueContext *_localctx = _tracker.createInstance<DefaultValueContext>(_ctx, getState());
  enterRule(_localctx, 252, Java20Parser::RuleDefaultValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1596);
    match(Java20Parser::DEFAULT);
    setState(1597);
    elementValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

Java20Parser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::NormalAnnotationContext* Java20Parser::AnnotationContext::normalAnnotation() {
  return getRuleContext<Java20Parser::NormalAnnotationContext>(0);
}

Java20Parser::MarkerAnnotationContext* Java20Parser::AnnotationContext::markerAnnotation() {
  return getRuleContext<Java20Parser::MarkerAnnotationContext>(0);
}

Java20Parser::SingleElementAnnotationContext* Java20Parser::AnnotationContext::singleElementAnnotation() {
  return getRuleContext<Java20Parser::SingleElementAnnotationContext>(0);
}


size_t Java20Parser::AnnotationContext::getRuleIndex() const {
  return Java20Parser::RuleAnnotation;
}


std::any Java20Parser::AnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAnnotation(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::AnnotationContext* Java20Parser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 254, Java20Parser::RuleAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1602);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1599);
      normalAnnotation();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1600);
      markerAnnotation();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1601);
      singleElementAnnotation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalAnnotationContext ------------------------------------------------------------------

Java20Parser::NormalAnnotationContext::NormalAnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::NormalAnnotationContext::AT() {
  return getToken(Java20Parser::AT, 0);
}

Java20Parser::TypeNameContext* Java20Parser::NormalAnnotationContext::typeName() {
  return getRuleContext<Java20Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java20Parser::NormalAnnotationContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

tree::TerminalNode* Java20Parser::NormalAnnotationContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::ElementValuePairListContext* Java20Parser::NormalAnnotationContext::elementValuePairList() {
  return getRuleContext<Java20Parser::ElementValuePairListContext>(0);
}


size_t Java20Parser::NormalAnnotationContext::getRuleIndex() const {
  return Java20Parser::RuleNormalAnnotation;
}


std::any Java20Parser::NormalAnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitNormalAnnotation(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::NormalAnnotationContext* Java20Parser::normalAnnotation() {
  NormalAnnotationContext *_localctx = _tracker.createInstance<NormalAnnotationContext>(_ctx, getState());
  enterRule(_localctx, 256, Java20Parser::RuleNormalAnnotation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1604);
    match(Java20Parser::AT);
    setState(1605);
    typeName();
    setState(1606);
    match(Java20Parser::LPAREN);
    setState(1608);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::Identifier) {
      setState(1607);
      elementValuePairList();
    }
    setState(1610);
    match(Java20Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePairListContext ------------------------------------------------------------------

Java20Parser::ElementValuePairListContext::ElementValuePairListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::ElementValuePairContext *> Java20Parser::ElementValuePairListContext::elementValuePair() {
  return getRuleContexts<Java20Parser::ElementValuePairContext>();
}

Java20Parser::ElementValuePairContext* Java20Parser::ElementValuePairListContext::elementValuePair(size_t i) {
  return getRuleContext<Java20Parser::ElementValuePairContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::ElementValuePairListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::ElementValuePairListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::ElementValuePairListContext::getRuleIndex() const {
  return Java20Parser::RuleElementValuePairList;
}


std::any Java20Parser::ElementValuePairListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitElementValuePairList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ElementValuePairListContext* Java20Parser::elementValuePairList() {
  ElementValuePairListContext *_localctx = _tracker.createInstance<ElementValuePairListContext>(_ctx, getState());
  enterRule(_localctx, 258, Java20Parser::RuleElementValuePairList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1612);
    elementValuePair();
    setState(1617);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::COMMA) {
      setState(1613);
      match(Java20Parser::COMMA);
      setState(1614);
      elementValuePair();
      setState(1619);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePairContext ------------------------------------------------------------------

Java20Parser::ElementValuePairContext::ElementValuePairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ElementValuePairContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::ElementValuePairContext::ASSIGN() {
  return getToken(Java20Parser::ASSIGN, 0);
}

Java20Parser::ElementValueContext* Java20Parser::ElementValuePairContext::elementValue() {
  return getRuleContext<Java20Parser::ElementValueContext>(0);
}


size_t Java20Parser::ElementValuePairContext::getRuleIndex() const {
  return Java20Parser::RuleElementValuePair;
}


std::any Java20Parser::ElementValuePairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitElementValuePair(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ElementValuePairContext* Java20Parser::elementValuePair() {
  ElementValuePairContext *_localctx = _tracker.createInstance<ElementValuePairContext>(_ctx, getState());
  enterRule(_localctx, 260, Java20Parser::RuleElementValuePair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1620);
    match(Java20Parser::Identifier);
    setState(1621);
    match(Java20Parser::ASSIGN);
    setState(1622);
    elementValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueContext ------------------------------------------------------------------

Java20Parser::ElementValueContext::ElementValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ConditionalExpressionContext* Java20Parser::ElementValueContext::conditionalExpression() {
  return getRuleContext<Java20Parser::ConditionalExpressionContext>(0);
}

Java20Parser::ElementValueArrayInitializerContext* Java20Parser::ElementValueContext::elementValueArrayInitializer() {
  return getRuleContext<Java20Parser::ElementValueArrayInitializerContext>(0);
}

Java20Parser::AnnotationContext* Java20Parser::ElementValueContext::annotation() {
  return getRuleContext<Java20Parser::AnnotationContext>(0);
}


size_t Java20Parser::ElementValueContext::getRuleIndex() const {
  return Java20Parser::RuleElementValue;
}


std::any Java20Parser::ElementValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitElementValue(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ElementValueContext* Java20Parser::elementValue() {
  ElementValueContext *_localctx = _tracker.createInstance<ElementValueContext>(_ctx, getState());
  enterRule(_localctx, 262, Java20Parser::RuleElementValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1627);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1624);
      conditionalExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1625);
      elementValueArrayInitializer();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1626);
      annotation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueArrayInitializerContext ------------------------------------------------------------------

Java20Parser::ElementValueArrayInitializerContext::ElementValueArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ElementValueArrayInitializerContext::LBRACE() {
  return getToken(Java20Parser::LBRACE, 0);
}

tree::TerminalNode* Java20Parser::ElementValueArrayInitializerContext::RBRACE() {
  return getToken(Java20Parser::RBRACE, 0);
}

Java20Parser::ElementValueListContext* Java20Parser::ElementValueArrayInitializerContext::elementValueList() {
  return getRuleContext<Java20Parser::ElementValueListContext>(0);
}

tree::TerminalNode* Java20Parser::ElementValueArrayInitializerContext::COMMA() {
  return getToken(Java20Parser::COMMA, 0);
}


size_t Java20Parser::ElementValueArrayInitializerContext::getRuleIndex() const {
  return Java20Parser::RuleElementValueArrayInitializer;
}


std::any Java20Parser::ElementValueArrayInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitElementValueArrayInitializer(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ElementValueArrayInitializerContext* Java20Parser::elementValueArrayInitializer() {
  ElementValueArrayInitializerContext *_localctx = _tracker.createInstance<ElementValueArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 264, Java20Parser::RuleElementValueArrayInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1629);
    match(Java20Parser::LBRACE);
    setState(1631);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288232437939449841) != 0)) {
      setState(1630);
      elementValueList();
    }
    setState(1634);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::COMMA) {
      setState(1633);
      match(Java20Parser::COMMA);
    }
    setState(1636);
    match(Java20Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueListContext ------------------------------------------------------------------

Java20Parser::ElementValueListContext::ElementValueListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::ElementValueContext *> Java20Parser::ElementValueListContext::elementValue() {
  return getRuleContexts<Java20Parser::ElementValueContext>();
}

Java20Parser::ElementValueContext* Java20Parser::ElementValueListContext::elementValue(size_t i) {
  return getRuleContext<Java20Parser::ElementValueContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::ElementValueListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::ElementValueListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::ElementValueListContext::getRuleIndex() const {
  return Java20Parser::RuleElementValueList;
}


std::any Java20Parser::ElementValueListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitElementValueList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ElementValueListContext* Java20Parser::elementValueList() {
  ElementValueListContext *_localctx = _tracker.createInstance<ElementValueListContext>(_ctx, getState());
  enterRule(_localctx, 266, Java20Parser::RuleElementValueList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1638);
    elementValue();
    setState(1643);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1639);
        match(Java20Parser::COMMA);
        setState(1640);
        elementValue(); 
      }
      setState(1645);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MarkerAnnotationContext ------------------------------------------------------------------

Java20Parser::MarkerAnnotationContext::MarkerAnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::MarkerAnnotationContext::AT() {
  return getToken(Java20Parser::AT, 0);
}

Java20Parser::TypeNameContext* Java20Parser::MarkerAnnotationContext::typeName() {
  return getRuleContext<Java20Parser::TypeNameContext>(0);
}


size_t Java20Parser::MarkerAnnotationContext::getRuleIndex() const {
  return Java20Parser::RuleMarkerAnnotation;
}


std::any Java20Parser::MarkerAnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitMarkerAnnotation(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::MarkerAnnotationContext* Java20Parser::markerAnnotation() {
  MarkerAnnotationContext *_localctx = _tracker.createInstance<MarkerAnnotationContext>(_ctx, getState());
  enterRule(_localctx, 268, Java20Parser::RuleMarkerAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1646);
    match(Java20Parser::AT);
    setState(1647);
    typeName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleElementAnnotationContext ------------------------------------------------------------------

Java20Parser::SingleElementAnnotationContext::SingleElementAnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::SingleElementAnnotationContext::AT() {
  return getToken(Java20Parser::AT, 0);
}

Java20Parser::TypeNameContext* Java20Parser::SingleElementAnnotationContext::typeName() {
  return getRuleContext<Java20Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java20Parser::SingleElementAnnotationContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::ElementValueContext* Java20Parser::SingleElementAnnotationContext::elementValue() {
  return getRuleContext<Java20Parser::ElementValueContext>(0);
}

tree::TerminalNode* Java20Parser::SingleElementAnnotationContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}


size_t Java20Parser::SingleElementAnnotationContext::getRuleIndex() const {
  return Java20Parser::RuleSingleElementAnnotation;
}


std::any Java20Parser::SingleElementAnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitSingleElementAnnotation(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::SingleElementAnnotationContext* Java20Parser::singleElementAnnotation() {
  SingleElementAnnotationContext *_localctx = _tracker.createInstance<SingleElementAnnotationContext>(_ctx, getState());
  enterRule(_localctx, 270, Java20Parser::RuleSingleElementAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1649);
    match(Java20Parser::AT);
    setState(1650);
    typeName();
    setState(1651);
    match(Java20Parser::LPAREN);
    setState(1652);
    elementValue();
    setState(1653);
    match(Java20Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayInitializerContext ------------------------------------------------------------------

Java20Parser::ArrayInitializerContext::ArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ArrayInitializerContext::LBRACE() {
  return getToken(Java20Parser::LBRACE, 0);
}

tree::TerminalNode* Java20Parser::ArrayInitializerContext::RBRACE() {
  return getToken(Java20Parser::RBRACE, 0);
}

Java20Parser::VariableInitializerListContext* Java20Parser::ArrayInitializerContext::variableInitializerList() {
  return getRuleContext<Java20Parser::VariableInitializerListContext>(0);
}

tree::TerminalNode* Java20Parser::ArrayInitializerContext::COMMA() {
  return getToken(Java20Parser::COMMA, 0);
}


size_t Java20Parser::ArrayInitializerContext::getRuleIndex() const {
  return Java20Parser::RuleArrayInitializer;
}


std::any Java20Parser::ArrayInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitArrayInitializer(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ArrayInitializerContext* Java20Parser::arrayInitializer() {
  ArrayInitializerContext *_localctx = _tracker.createInstance<ArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 272, Java20Parser::RuleArrayInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1655);
    match(Java20Parser::LBRACE);
    setState(1657);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288232437939449841) != 0)) {
      setState(1656);
      variableInitializerList();
    }
    setState(1660);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::COMMA) {
      setState(1659);
      match(Java20Parser::COMMA);
    }
    setState(1662);
    match(Java20Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializerListContext ------------------------------------------------------------------

Java20Parser::VariableInitializerListContext::VariableInitializerListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::VariableInitializerContext *> Java20Parser::VariableInitializerListContext::variableInitializer() {
  return getRuleContexts<Java20Parser::VariableInitializerContext>();
}

Java20Parser::VariableInitializerContext* Java20Parser::VariableInitializerListContext::variableInitializer(size_t i) {
  return getRuleContext<Java20Parser::VariableInitializerContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::VariableInitializerListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::VariableInitializerListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::VariableInitializerListContext::getRuleIndex() const {
  return Java20Parser::RuleVariableInitializerList;
}


std::any Java20Parser::VariableInitializerListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitVariableInitializerList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::VariableInitializerListContext* Java20Parser::variableInitializerList() {
  VariableInitializerListContext *_localctx = _tracker.createInstance<VariableInitializerListContext>(_ctx, getState());
  enterRule(_localctx, 274, Java20Parser::RuleVariableInitializerList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1664);
    variableInitializer();
    setState(1669);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1665);
        match(Java20Parser::COMMA);
        setState(1666);
        variableInitializer(); 
      }
      setState(1671);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

Java20Parser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::BlockContext::LBRACE() {
  return getToken(Java20Parser::LBRACE, 0);
}

tree::TerminalNode* Java20Parser::BlockContext::RBRACE() {
  return getToken(Java20Parser::RBRACE, 0);
}

Java20Parser::BlockStatementsContext* Java20Parser::BlockContext::blockStatements() {
  return getRuleContext<Java20Parser::BlockStatementsContext>(0);
}


size_t Java20Parser::BlockContext::getRuleIndex() const {
  return Java20Parser::RuleBlock;
}


std::any Java20Parser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::BlockContext* Java20Parser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 276, Java20Parser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1672);
    match(Java20Parser::LBRACE);
    setState(1674);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4610965747420531208) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 576461576941625323) != 0)) {
      setState(1673);
      blockStatements();
    }
    setState(1676);
    match(Java20Parser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatementsContext ------------------------------------------------------------------

Java20Parser::BlockStatementsContext::BlockStatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::BlockStatementContext *> Java20Parser::BlockStatementsContext::blockStatement() {
  return getRuleContexts<Java20Parser::BlockStatementContext>();
}

Java20Parser::BlockStatementContext* Java20Parser::BlockStatementsContext::blockStatement(size_t i) {
  return getRuleContext<Java20Parser::BlockStatementContext>(i);
}


size_t Java20Parser::BlockStatementsContext::getRuleIndex() const {
  return Java20Parser::RuleBlockStatements;
}


std::any Java20Parser::BlockStatementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitBlockStatements(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::BlockStatementsContext* Java20Parser::blockStatements() {
  BlockStatementsContext *_localctx = _tracker.createInstance<BlockStatementsContext>(_ctx, getState());
  enterRule(_localctx, 278, Java20Parser::RuleBlockStatements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1678);
    blockStatement();
    setState(1682);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4610965747420531208) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 576461576941625323) != 0)) {
      setState(1679);
      blockStatement();
      setState(1684);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatementContext ------------------------------------------------------------------

Java20Parser::BlockStatementContext::BlockStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::LocalClassOrInterfaceDeclarationContext* Java20Parser::BlockStatementContext::localClassOrInterfaceDeclaration() {
  return getRuleContext<Java20Parser::LocalClassOrInterfaceDeclarationContext>(0);
}

Java20Parser::LocalVariableDeclarationStatementContext* Java20Parser::BlockStatementContext::localVariableDeclarationStatement() {
  return getRuleContext<Java20Parser::LocalVariableDeclarationStatementContext>(0);
}

Java20Parser::StatementContext* Java20Parser::BlockStatementContext::statement() {
  return getRuleContext<Java20Parser::StatementContext>(0);
}


size_t Java20Parser::BlockStatementContext::getRuleIndex() const {
  return Java20Parser::RuleBlockStatement;
}


std::any Java20Parser::BlockStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitBlockStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::BlockStatementContext* Java20Parser::blockStatement() {
  BlockStatementContext *_localctx = _tracker.createInstance<BlockStatementContext>(_ctx, getState());
  enterRule(_localctx, 280, Java20Parser::RuleBlockStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1688);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1685);
      localClassOrInterfaceDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1686);
      localVariableDeclarationStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1687);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalClassOrInterfaceDeclarationContext ------------------------------------------------------------------

Java20Parser::LocalClassOrInterfaceDeclarationContext::LocalClassOrInterfaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ClassDeclarationContext* Java20Parser::LocalClassOrInterfaceDeclarationContext::classDeclaration() {
  return getRuleContext<Java20Parser::ClassDeclarationContext>(0);
}

Java20Parser::NormalInterfaceDeclarationContext* Java20Parser::LocalClassOrInterfaceDeclarationContext::normalInterfaceDeclaration() {
  return getRuleContext<Java20Parser::NormalInterfaceDeclarationContext>(0);
}


size_t Java20Parser::LocalClassOrInterfaceDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleLocalClassOrInterfaceDeclaration;
}


std::any Java20Parser::LocalClassOrInterfaceDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLocalClassOrInterfaceDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LocalClassOrInterfaceDeclarationContext* Java20Parser::localClassOrInterfaceDeclaration() {
  LocalClassOrInterfaceDeclarationContext *_localctx = _tracker.createInstance<LocalClassOrInterfaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 282, Java20Parser::RuleLocalClassOrInterfaceDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1692);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1690);
      classDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1691);
      normalInterfaceDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalVariableDeclarationContext ------------------------------------------------------------------

Java20Parser::LocalVariableDeclarationContext::LocalVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::LocalVariableTypeContext* Java20Parser::LocalVariableDeclarationContext::localVariableType() {
  return getRuleContext<Java20Parser::LocalVariableTypeContext>(0);
}

std::vector<Java20Parser::VariableModifierContext *> Java20Parser::LocalVariableDeclarationContext::variableModifier() {
  return getRuleContexts<Java20Parser::VariableModifierContext>();
}

Java20Parser::VariableModifierContext* Java20Parser::LocalVariableDeclarationContext::variableModifier(size_t i) {
  return getRuleContext<Java20Parser::VariableModifierContext>(i);
}

Java20Parser::VariableDeclaratorListContext* Java20Parser::LocalVariableDeclarationContext::variableDeclaratorList() {
  return getRuleContext<Java20Parser::VariableDeclaratorListContext>(0);
}


size_t Java20Parser::LocalVariableDeclarationContext::getRuleIndex() const {
  return Java20Parser::RuleLocalVariableDeclaration;
}


std::any Java20Parser::LocalVariableDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLocalVariableDeclaration(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LocalVariableDeclarationContext* Java20Parser::localVariableDeclaration() {
  LocalVariableDeclarationContext *_localctx = _tracker.createInstance<LocalVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 284, Java20Parser::RuleLocalVariableDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1697);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::FINAL

    || _la == Java20Parser::AT) {
      setState(1694);
      variableModifier();
      setState(1699);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1700);
    localVariableType();
    setState(1702);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
    case 1: {
      setState(1701);
      variableDeclaratorList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalVariableTypeContext ------------------------------------------------------------------

Java20Parser::LocalVariableTypeContext::LocalVariableTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannTypeContext* Java20Parser::LocalVariableTypeContext::unannType() {
  return getRuleContext<Java20Parser::UnannTypeContext>(0);
}

tree::TerminalNode* Java20Parser::LocalVariableTypeContext::VAR() {
  return getToken(Java20Parser::VAR, 0);
}


size_t Java20Parser::LocalVariableTypeContext::getRuleIndex() const {
  return Java20Parser::RuleLocalVariableType;
}


std::any Java20Parser::LocalVariableTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLocalVariableType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LocalVariableTypeContext* Java20Parser::localVariableType() {
  LocalVariableTypeContext *_localctx = _tracker.createInstance<LocalVariableTypeContext>(_ctx, getState());
  enterRule(_localctx, 286, Java20Parser::RuleLocalVariableType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1706);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::BOOLEAN:
      case Java20Parser::BYTE:
      case Java20Parser::CHAR:
      case Java20Parser::DOUBLE:
      case Java20Parser::FLOAT:
      case Java20Parser::INT:
      case Java20Parser::LONG:
      case Java20Parser::SHORT:
      case Java20Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1704);
        unannType();
        break;
      }

      case Java20Parser::VAR: {
        enterOuterAlt(_localctx, 2);
        setState(1705);
        match(Java20Parser::VAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalVariableDeclarationStatementContext ------------------------------------------------------------------

Java20Parser::LocalVariableDeclarationStatementContext::LocalVariableDeclarationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::LocalVariableDeclarationContext* Java20Parser::LocalVariableDeclarationStatementContext::localVariableDeclaration() {
  return getRuleContext<Java20Parser::LocalVariableDeclarationContext>(0);
}

tree::TerminalNode* Java20Parser::LocalVariableDeclarationStatementContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::LocalVariableDeclarationStatementContext::getRuleIndex() const {
  return Java20Parser::RuleLocalVariableDeclarationStatement;
}


std::any Java20Parser::LocalVariableDeclarationStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLocalVariableDeclarationStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LocalVariableDeclarationStatementContext* Java20Parser::localVariableDeclarationStatement() {
  LocalVariableDeclarationStatementContext *_localctx = _tracker.createInstance<LocalVariableDeclarationStatementContext>(_ctx, getState());
  enterRule(_localctx, 288, Java20Parser::RuleLocalVariableDeclarationStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1708);
    localVariableDeclaration();
    setState(1709);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

Java20Parser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::StatementWithoutTrailingSubstatementContext* Java20Parser::StatementContext::statementWithoutTrailingSubstatement() {
  return getRuleContext<Java20Parser::StatementWithoutTrailingSubstatementContext>(0);
}

Java20Parser::LabeledStatementContext* Java20Parser::StatementContext::labeledStatement() {
  return getRuleContext<Java20Parser::LabeledStatementContext>(0);
}

Java20Parser::IfThenStatementContext* Java20Parser::StatementContext::ifThenStatement() {
  return getRuleContext<Java20Parser::IfThenStatementContext>(0);
}

Java20Parser::IfThenElseStatementContext* Java20Parser::StatementContext::ifThenElseStatement() {
  return getRuleContext<Java20Parser::IfThenElseStatementContext>(0);
}

Java20Parser::WhileStatementContext* Java20Parser::StatementContext::whileStatement() {
  return getRuleContext<Java20Parser::WhileStatementContext>(0);
}

Java20Parser::ForStatementContext* Java20Parser::StatementContext::forStatement() {
  return getRuleContext<Java20Parser::ForStatementContext>(0);
}


size_t Java20Parser::StatementContext::getRuleIndex() const {
  return Java20Parser::RuleStatement;
}


std::any Java20Parser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::StatementContext* Java20Parser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 290, Java20Parser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1717);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1711);
      statementWithoutTrailingSubstatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1712);
      labeledStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1713);
      ifThenStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1714);
      ifThenElseStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1715);
      whileStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1716);
      forStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementNoShortIfContext ------------------------------------------------------------------

Java20Parser::StatementNoShortIfContext::StatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::StatementWithoutTrailingSubstatementContext* Java20Parser::StatementNoShortIfContext::statementWithoutTrailingSubstatement() {
  return getRuleContext<Java20Parser::StatementWithoutTrailingSubstatementContext>(0);
}

Java20Parser::LabeledStatementNoShortIfContext* Java20Parser::StatementNoShortIfContext::labeledStatementNoShortIf() {
  return getRuleContext<Java20Parser::LabeledStatementNoShortIfContext>(0);
}

Java20Parser::IfThenElseStatementNoShortIfContext* Java20Parser::StatementNoShortIfContext::ifThenElseStatementNoShortIf() {
  return getRuleContext<Java20Parser::IfThenElseStatementNoShortIfContext>(0);
}

Java20Parser::WhileStatementNoShortIfContext* Java20Parser::StatementNoShortIfContext::whileStatementNoShortIf() {
  return getRuleContext<Java20Parser::WhileStatementNoShortIfContext>(0);
}

Java20Parser::ForStatementNoShortIfContext* Java20Parser::StatementNoShortIfContext::forStatementNoShortIf() {
  return getRuleContext<Java20Parser::ForStatementNoShortIfContext>(0);
}


size_t Java20Parser::StatementNoShortIfContext::getRuleIndex() const {
  return Java20Parser::RuleStatementNoShortIf;
}


std::any Java20Parser::StatementNoShortIfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitStatementNoShortIf(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::StatementNoShortIfContext* Java20Parser::statementNoShortIf() {
  StatementNoShortIfContext *_localctx = _tracker.createInstance<StatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 292, Java20Parser::RuleStatementNoShortIf);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1724);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1719);
      statementWithoutTrailingSubstatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1720);
      labeledStatementNoShortIf();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1721);
      ifThenElseStatementNoShortIf();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1722);
      whileStatementNoShortIf();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1723);
      forStatementNoShortIf();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementWithoutTrailingSubstatementContext ------------------------------------------------------------------

Java20Parser::StatementWithoutTrailingSubstatementContext::StatementWithoutTrailingSubstatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::BlockContext* Java20Parser::StatementWithoutTrailingSubstatementContext::block() {
  return getRuleContext<Java20Parser::BlockContext>(0);
}

Java20Parser::EmptyStatement_Context* Java20Parser::StatementWithoutTrailingSubstatementContext::emptyStatement_() {
  return getRuleContext<Java20Parser::EmptyStatement_Context>(0);
}

Java20Parser::ExpressionStatementContext* Java20Parser::StatementWithoutTrailingSubstatementContext::expressionStatement() {
  return getRuleContext<Java20Parser::ExpressionStatementContext>(0);
}

Java20Parser::AssertStatementContext* Java20Parser::StatementWithoutTrailingSubstatementContext::assertStatement() {
  return getRuleContext<Java20Parser::AssertStatementContext>(0);
}

Java20Parser::SwitchStatementContext* Java20Parser::StatementWithoutTrailingSubstatementContext::switchStatement() {
  return getRuleContext<Java20Parser::SwitchStatementContext>(0);
}

Java20Parser::DoStatementContext* Java20Parser::StatementWithoutTrailingSubstatementContext::doStatement() {
  return getRuleContext<Java20Parser::DoStatementContext>(0);
}

Java20Parser::BreakStatementContext* Java20Parser::StatementWithoutTrailingSubstatementContext::breakStatement() {
  return getRuleContext<Java20Parser::BreakStatementContext>(0);
}

Java20Parser::ContinueStatementContext* Java20Parser::StatementWithoutTrailingSubstatementContext::continueStatement() {
  return getRuleContext<Java20Parser::ContinueStatementContext>(0);
}

Java20Parser::ReturnStatementContext* Java20Parser::StatementWithoutTrailingSubstatementContext::returnStatement() {
  return getRuleContext<Java20Parser::ReturnStatementContext>(0);
}

Java20Parser::SynchronizedStatementContext* Java20Parser::StatementWithoutTrailingSubstatementContext::synchronizedStatement() {
  return getRuleContext<Java20Parser::SynchronizedStatementContext>(0);
}

Java20Parser::ThrowStatementContext* Java20Parser::StatementWithoutTrailingSubstatementContext::throwStatement() {
  return getRuleContext<Java20Parser::ThrowStatementContext>(0);
}

Java20Parser::TryStatementContext* Java20Parser::StatementWithoutTrailingSubstatementContext::tryStatement() {
  return getRuleContext<Java20Parser::TryStatementContext>(0);
}

Java20Parser::YieldStatementContext* Java20Parser::StatementWithoutTrailingSubstatementContext::yieldStatement() {
  return getRuleContext<Java20Parser::YieldStatementContext>(0);
}


size_t Java20Parser::StatementWithoutTrailingSubstatementContext::getRuleIndex() const {
  return Java20Parser::RuleStatementWithoutTrailingSubstatement;
}


std::any Java20Parser::StatementWithoutTrailingSubstatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitStatementWithoutTrailingSubstatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::StatementWithoutTrailingSubstatementContext* Java20Parser::statementWithoutTrailingSubstatement() {
  StatementWithoutTrailingSubstatementContext *_localctx = _tracker.createInstance<StatementWithoutTrailingSubstatementContext>(_ctx, getState());
  enterRule(_localctx, 294, Java20Parser::RuleStatementWithoutTrailingSubstatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1739);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1726);
        block();
        break;
      }

      case Java20Parser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(1727);
        emptyStatement_();
        break;
      }

      case Java20Parser::BOOLEAN:
      case Java20Parser::BYTE:
      case Java20Parser::CHAR:
      case Java20Parser::DOUBLE:
      case Java20Parser::FLOAT:
      case Java20Parser::INT:
      case Java20Parser::LONG:
      case Java20Parser::NEW:
      case Java20Parser::SHORT:
      case Java20Parser::SUPER:
      case Java20Parser::THIS:
      case Java20Parser::VOID:
      case Java20Parser::IntegerLiteral:
      case Java20Parser::FloatingPointLiteral:
      case Java20Parser::BooleanLiteral:
      case Java20Parser::CharacterLiteral:
      case Java20Parser::StringLiteral:
      case Java20Parser::TextBlock:
      case Java20Parser::NullLiteral:
      case Java20Parser::LPAREN:
      case Java20Parser::AT:
      case Java20Parser::INC:
      case Java20Parser::DEC:
      case Java20Parser::Identifier: {
        enterOuterAlt(_localctx, 3);
        setState(1728);
        expressionStatement();
        break;
      }

      case Java20Parser::ASSERT: {
        enterOuterAlt(_localctx, 4);
        setState(1729);
        assertStatement();
        break;
      }

      case Java20Parser::SWITCH: {
        enterOuterAlt(_localctx, 5);
        setState(1730);
        switchStatement();
        break;
      }

      case Java20Parser::DO: {
        enterOuterAlt(_localctx, 6);
        setState(1731);
        doStatement();
        break;
      }

      case Java20Parser::BREAK: {
        enterOuterAlt(_localctx, 7);
        setState(1732);
        breakStatement();
        break;
      }

      case Java20Parser::CONTINUE: {
        enterOuterAlt(_localctx, 8);
        setState(1733);
        continueStatement();
        break;
      }

      case Java20Parser::RETURN: {
        enterOuterAlt(_localctx, 9);
        setState(1734);
        returnStatement();
        break;
      }

      case Java20Parser::SYNCHRONIZED: {
        enterOuterAlt(_localctx, 10);
        setState(1735);
        synchronizedStatement();
        break;
      }

      case Java20Parser::THROW: {
        enterOuterAlt(_localctx, 11);
        setState(1736);
        throwStatement();
        break;
      }

      case Java20Parser::TRY: {
        enterOuterAlt(_localctx, 12);
        setState(1737);
        tryStatement();
        break;
      }

      case Java20Parser::YIELD: {
        enterOuterAlt(_localctx, 13);
        setState(1738);
        yieldStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyStatement_Context ------------------------------------------------------------------

Java20Parser::EmptyStatement_Context::EmptyStatement_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::EmptyStatement_Context::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::EmptyStatement_Context::getRuleIndex() const {
  return Java20Parser::RuleEmptyStatement_;
}


std::any Java20Parser::EmptyStatement_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitEmptyStatement_(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::EmptyStatement_Context* Java20Parser::emptyStatement_() {
  EmptyStatement_Context *_localctx = _tracker.createInstance<EmptyStatement_Context>(_ctx, getState());
  enterRule(_localctx, 296, Java20Parser::RuleEmptyStatement_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1741);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledStatementContext ------------------------------------------------------------------

Java20Parser::LabeledStatementContext::LabeledStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::LabeledStatementContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::LabeledStatementContext::COLON() {
  return getToken(Java20Parser::COLON, 0);
}

Java20Parser::StatementContext* Java20Parser::LabeledStatementContext::statement() {
  return getRuleContext<Java20Parser::StatementContext>(0);
}


size_t Java20Parser::LabeledStatementContext::getRuleIndex() const {
  return Java20Parser::RuleLabeledStatement;
}


std::any Java20Parser::LabeledStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLabeledStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LabeledStatementContext* Java20Parser::labeledStatement() {
  LabeledStatementContext *_localctx = _tracker.createInstance<LabeledStatementContext>(_ctx, getState());
  enterRule(_localctx, 298, Java20Parser::RuleLabeledStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1743);
    match(Java20Parser::Identifier);
    setState(1744);
    match(Java20Parser::COLON);
    setState(1745);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledStatementNoShortIfContext ------------------------------------------------------------------

Java20Parser::LabeledStatementNoShortIfContext::LabeledStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::LabeledStatementNoShortIfContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::LabeledStatementNoShortIfContext::COLON() {
  return getToken(Java20Parser::COLON, 0);
}

Java20Parser::StatementNoShortIfContext* Java20Parser::LabeledStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContext<Java20Parser::StatementNoShortIfContext>(0);
}


size_t Java20Parser::LabeledStatementNoShortIfContext::getRuleIndex() const {
  return Java20Parser::RuleLabeledStatementNoShortIf;
}


std::any Java20Parser::LabeledStatementNoShortIfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLabeledStatementNoShortIf(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LabeledStatementNoShortIfContext* Java20Parser::labeledStatementNoShortIf() {
  LabeledStatementNoShortIfContext *_localctx = _tracker.createInstance<LabeledStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 300, Java20Parser::RuleLabeledStatementNoShortIf);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1747);
    match(Java20Parser::Identifier);
    setState(1748);
    match(Java20Parser::COLON);
    setState(1749);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

Java20Parser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::StatementExpressionContext* Java20Parser::ExpressionStatementContext::statementExpression() {
  return getRuleContext<Java20Parser::StatementExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::ExpressionStatementContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::ExpressionStatementContext::getRuleIndex() const {
  return Java20Parser::RuleExpressionStatement;
}


std::any Java20Parser::ExpressionStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitExpressionStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ExpressionStatementContext* Java20Parser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 302, Java20Parser::RuleExpressionStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1751);
    statementExpression();
    setState(1752);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementExpressionContext ------------------------------------------------------------------

Java20Parser::StatementExpressionContext::StatementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AssignmentContext* Java20Parser::StatementExpressionContext::assignment() {
  return getRuleContext<Java20Parser::AssignmentContext>(0);
}

Java20Parser::PreIncrementExpressionContext* Java20Parser::StatementExpressionContext::preIncrementExpression() {
  return getRuleContext<Java20Parser::PreIncrementExpressionContext>(0);
}

Java20Parser::PreDecrementExpressionContext* Java20Parser::StatementExpressionContext::preDecrementExpression() {
  return getRuleContext<Java20Parser::PreDecrementExpressionContext>(0);
}

Java20Parser::PostIncrementExpressionContext* Java20Parser::StatementExpressionContext::postIncrementExpression() {
  return getRuleContext<Java20Parser::PostIncrementExpressionContext>(0);
}

Java20Parser::PostDecrementExpressionContext* Java20Parser::StatementExpressionContext::postDecrementExpression() {
  return getRuleContext<Java20Parser::PostDecrementExpressionContext>(0);
}

Java20Parser::MethodInvocationContext* Java20Parser::StatementExpressionContext::methodInvocation() {
  return getRuleContext<Java20Parser::MethodInvocationContext>(0);
}

Java20Parser::ClassInstanceCreationExpressionContext* Java20Parser::StatementExpressionContext::classInstanceCreationExpression() {
  return getRuleContext<Java20Parser::ClassInstanceCreationExpressionContext>(0);
}


size_t Java20Parser::StatementExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleStatementExpression;
}


std::any Java20Parser::StatementExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitStatementExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::StatementExpressionContext* Java20Parser::statementExpression() {
  StatementExpressionContext *_localctx = _tracker.createInstance<StatementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 304, Java20Parser::RuleStatementExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1761);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1754);
      assignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1755);
      preIncrementExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1756);
      preDecrementExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1757);
      postIncrementExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1758);
      postDecrementExpression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1759);
      methodInvocation();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1760);
      classInstanceCreationExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenStatementContext ------------------------------------------------------------------

Java20Parser::IfThenStatementContext::IfThenStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::IfThenStatementContext::IF() {
  return getToken(Java20Parser::IF, 0);
}

tree::TerminalNode* Java20Parser::IfThenStatementContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::ExpressionContext* Java20Parser::IfThenStatementContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::IfThenStatementContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::StatementContext* Java20Parser::IfThenStatementContext::statement() {
  return getRuleContext<Java20Parser::StatementContext>(0);
}


size_t Java20Parser::IfThenStatementContext::getRuleIndex() const {
  return Java20Parser::RuleIfThenStatement;
}


std::any Java20Parser::IfThenStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitIfThenStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::IfThenStatementContext* Java20Parser::ifThenStatement() {
  IfThenStatementContext *_localctx = _tracker.createInstance<IfThenStatementContext>(_ctx, getState());
  enterRule(_localctx, 306, Java20Parser::RuleIfThenStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1763);
    match(Java20Parser::IF);
    setState(1764);
    match(Java20Parser::LPAREN);
    setState(1765);
    expression();
    setState(1766);
    match(Java20Parser::RPAREN);
    setState(1767);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenElseStatementContext ------------------------------------------------------------------

Java20Parser::IfThenElseStatementContext::IfThenElseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::IfThenElseStatementContext::IF() {
  return getToken(Java20Parser::IF, 0);
}

tree::TerminalNode* Java20Parser::IfThenElseStatementContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::ExpressionContext* Java20Parser::IfThenElseStatementContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::IfThenElseStatementContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::StatementNoShortIfContext* Java20Parser::IfThenElseStatementContext::statementNoShortIf() {
  return getRuleContext<Java20Parser::StatementNoShortIfContext>(0);
}

tree::TerminalNode* Java20Parser::IfThenElseStatementContext::ELSE() {
  return getToken(Java20Parser::ELSE, 0);
}

Java20Parser::StatementContext* Java20Parser::IfThenElseStatementContext::statement() {
  return getRuleContext<Java20Parser::StatementContext>(0);
}


size_t Java20Parser::IfThenElseStatementContext::getRuleIndex() const {
  return Java20Parser::RuleIfThenElseStatement;
}


std::any Java20Parser::IfThenElseStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitIfThenElseStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::IfThenElseStatementContext* Java20Parser::ifThenElseStatement() {
  IfThenElseStatementContext *_localctx = _tracker.createInstance<IfThenElseStatementContext>(_ctx, getState());
  enterRule(_localctx, 308, Java20Parser::RuleIfThenElseStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1769);
    match(Java20Parser::IF);
    setState(1770);
    match(Java20Parser::LPAREN);
    setState(1771);
    expression();
    setState(1772);
    match(Java20Parser::RPAREN);
    setState(1773);
    statementNoShortIf();
    setState(1774);
    match(Java20Parser::ELSE);
    setState(1775);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenElseStatementNoShortIfContext ------------------------------------------------------------------

Java20Parser::IfThenElseStatementNoShortIfContext::IfThenElseStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::IfThenElseStatementNoShortIfContext::IF() {
  return getToken(Java20Parser::IF, 0);
}

tree::TerminalNode* Java20Parser::IfThenElseStatementNoShortIfContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::ExpressionContext* Java20Parser::IfThenElseStatementNoShortIfContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::IfThenElseStatementNoShortIfContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

std::vector<Java20Parser::StatementNoShortIfContext *> Java20Parser::IfThenElseStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContexts<Java20Parser::StatementNoShortIfContext>();
}

Java20Parser::StatementNoShortIfContext* Java20Parser::IfThenElseStatementNoShortIfContext::statementNoShortIf(size_t i) {
  return getRuleContext<Java20Parser::StatementNoShortIfContext>(i);
}

tree::TerminalNode* Java20Parser::IfThenElseStatementNoShortIfContext::ELSE() {
  return getToken(Java20Parser::ELSE, 0);
}


size_t Java20Parser::IfThenElseStatementNoShortIfContext::getRuleIndex() const {
  return Java20Parser::RuleIfThenElseStatementNoShortIf;
}


std::any Java20Parser::IfThenElseStatementNoShortIfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitIfThenElseStatementNoShortIf(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::IfThenElseStatementNoShortIfContext* Java20Parser::ifThenElseStatementNoShortIf() {
  IfThenElseStatementNoShortIfContext *_localctx = _tracker.createInstance<IfThenElseStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 310, Java20Parser::RuleIfThenElseStatementNoShortIf);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1777);
    match(Java20Parser::IF);
    setState(1778);
    match(Java20Parser::LPAREN);
    setState(1779);
    expression();
    setState(1780);
    match(Java20Parser::RPAREN);
    setState(1781);
    statementNoShortIf();
    setState(1782);
    match(Java20Parser::ELSE);
    setState(1783);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssertStatementContext ------------------------------------------------------------------

Java20Parser::AssertStatementContext::AssertStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::AssertStatementContext::ASSERT() {
  return getToken(Java20Parser::ASSERT, 0);
}

std::vector<Java20Parser::ExpressionContext *> Java20Parser::AssertStatementContext::expression() {
  return getRuleContexts<Java20Parser::ExpressionContext>();
}

Java20Parser::ExpressionContext* Java20Parser::AssertStatementContext::expression(size_t i) {
  return getRuleContext<Java20Parser::ExpressionContext>(i);
}

tree::TerminalNode* Java20Parser::AssertStatementContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}

tree::TerminalNode* Java20Parser::AssertStatementContext::COLON() {
  return getToken(Java20Parser::COLON, 0);
}


size_t Java20Parser::AssertStatementContext::getRuleIndex() const {
  return Java20Parser::RuleAssertStatement;
}


std::any Java20Parser::AssertStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAssertStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::AssertStatementContext* Java20Parser::assertStatement() {
  AssertStatementContext *_localctx = _tracker.createInstance<AssertStatementContext>(_ctx, getState());
  enterRule(_localctx, 312, Java20Parser::RuleAssertStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1785);
    match(Java20Parser::ASSERT);
    setState(1786);
    expression();
    setState(1789);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::COLON) {
      setState(1787);
      match(Java20Parser::COLON);
      setState(1788);
      expression();
    }
    setState(1791);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStatementContext ------------------------------------------------------------------

Java20Parser::SwitchStatementContext::SwitchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::SwitchStatementContext::SWITCH() {
  return getToken(Java20Parser::SWITCH, 0);
}

tree::TerminalNode* Java20Parser::SwitchStatementContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::ExpressionContext* Java20Parser::SwitchStatementContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::SwitchStatementContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::SwitchBlockContext* Java20Parser::SwitchStatementContext::switchBlock() {
  return getRuleContext<Java20Parser::SwitchBlockContext>(0);
}


size_t Java20Parser::SwitchStatementContext::getRuleIndex() const {
  return Java20Parser::RuleSwitchStatement;
}


std::any Java20Parser::SwitchStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitSwitchStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::SwitchStatementContext* Java20Parser::switchStatement() {
  SwitchStatementContext *_localctx = _tracker.createInstance<SwitchStatementContext>(_ctx, getState());
  enterRule(_localctx, 314, Java20Parser::RuleSwitchStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1793);
    match(Java20Parser::SWITCH);
    setState(1794);
    match(Java20Parser::LPAREN);
    setState(1795);
    expression();
    setState(1796);
    match(Java20Parser::RPAREN);
    setState(1797);
    switchBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchBlockContext ------------------------------------------------------------------

Java20Parser::SwitchBlockContext::SwitchBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::SwitchBlockContext::LBRACE() {
  return getToken(Java20Parser::LBRACE, 0);
}

std::vector<Java20Parser::SwitchRuleContext *> Java20Parser::SwitchBlockContext::switchRule() {
  return getRuleContexts<Java20Parser::SwitchRuleContext>();
}

Java20Parser::SwitchRuleContext* Java20Parser::SwitchBlockContext::switchRule(size_t i) {
  return getRuleContext<Java20Parser::SwitchRuleContext>(i);
}

tree::TerminalNode* Java20Parser::SwitchBlockContext::RBRACE() {
  return getToken(Java20Parser::RBRACE, 0);
}

std::vector<Java20Parser::SwitchBlockStatementGroupContext *> Java20Parser::SwitchBlockContext::switchBlockStatementGroup() {
  return getRuleContexts<Java20Parser::SwitchBlockStatementGroupContext>();
}

Java20Parser::SwitchBlockStatementGroupContext* Java20Parser::SwitchBlockContext::switchBlockStatementGroup(size_t i) {
  return getRuleContext<Java20Parser::SwitchBlockStatementGroupContext>(i);
}

std::vector<Java20Parser::SwitchLabelContext *> Java20Parser::SwitchBlockContext::switchLabel() {
  return getRuleContexts<Java20Parser::SwitchLabelContext>();
}

Java20Parser::SwitchLabelContext* Java20Parser::SwitchBlockContext::switchLabel(size_t i) {
  return getRuleContext<Java20Parser::SwitchLabelContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::SwitchBlockContext::COLON() {
  return getTokens(Java20Parser::COLON);
}

tree::TerminalNode* Java20Parser::SwitchBlockContext::COLON(size_t i) {
  return getToken(Java20Parser::COLON, i);
}


size_t Java20Parser::SwitchBlockContext::getRuleIndex() const {
  return Java20Parser::RuleSwitchBlock;
}


std::any Java20Parser::SwitchBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitSwitchBlock(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::SwitchBlockContext* Java20Parser::switchBlock() {
  SwitchBlockContext *_localctx = _tracker.createInstance<SwitchBlockContext>(_ctx, getState());
  enterRule(_localctx, 316, Java20Parser::RuleSwitchBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1825);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1799);
      match(Java20Parser::LBRACE);
      setState(1800);
      switchRule();
      setState(1804);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::CASE

      || _la == Java20Parser::DEFAULT) {
        setState(1801);
        switchRule();
        setState(1806);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1807);
      match(Java20Parser::RBRACE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1809);
      match(Java20Parser::LBRACE);
      setState(1813);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1810);
          switchBlockStatementGroup(); 
        }
        setState(1815);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
      }
      setState(1821);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::CASE

      || _la == Java20Parser::DEFAULT) {
        setState(1816);
        switchLabel();
        setState(1817);
        match(Java20Parser::COLON);
        setState(1823);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1824);
      match(Java20Parser::RBRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchRuleContext ------------------------------------------------------------------

Java20Parser::SwitchRuleContext::SwitchRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::SwitchLabelContext* Java20Parser::SwitchRuleContext::switchLabel() {
  return getRuleContext<Java20Parser::SwitchLabelContext>(0);
}

tree::TerminalNode* Java20Parser::SwitchRuleContext::ARROW() {
  return getToken(Java20Parser::ARROW, 0);
}

Java20Parser::ExpressionContext* Java20Parser::SwitchRuleContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::SwitchRuleContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}

Java20Parser::BlockContext* Java20Parser::SwitchRuleContext::block() {
  return getRuleContext<Java20Parser::BlockContext>(0);
}

Java20Parser::ThrowStatementContext* Java20Parser::SwitchRuleContext::throwStatement() {
  return getRuleContext<Java20Parser::ThrowStatementContext>(0);
}


size_t Java20Parser::SwitchRuleContext::getRuleIndex() const {
  return Java20Parser::RuleSwitchRule;
}


std::any Java20Parser::SwitchRuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitSwitchRule(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::SwitchRuleContext* Java20Parser::switchRule() {
  SwitchRuleContext *_localctx = _tracker.createInstance<SwitchRuleContext>(_ctx, getState());
  enterRule(_localctx, 318, Java20Parser::RuleSwitchRule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1827);
    switchLabel();
    setState(1828);
    match(Java20Parser::ARROW);
    setState(1834);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::BOOLEAN:
      case Java20Parser::BYTE:
      case Java20Parser::CHAR:
      case Java20Parser::DOUBLE:
      case Java20Parser::FLOAT:
      case Java20Parser::INT:
      case Java20Parser::LONG:
      case Java20Parser::NEW:
      case Java20Parser::SHORT:
      case Java20Parser::SUPER:
      case Java20Parser::SWITCH:
      case Java20Parser::THIS:
      case Java20Parser::VOID:
      case Java20Parser::IntegerLiteral:
      case Java20Parser::FloatingPointLiteral:
      case Java20Parser::BooleanLiteral:
      case Java20Parser::CharacterLiteral:
      case Java20Parser::StringLiteral:
      case Java20Parser::TextBlock:
      case Java20Parser::NullLiteral:
      case Java20Parser::LPAREN:
      case Java20Parser::AT:
      case Java20Parser::BANG:
      case Java20Parser::TILDE:
      case Java20Parser::INC:
      case Java20Parser::DEC:
      case Java20Parser::ADD:
      case Java20Parser::SUB:
      case Java20Parser::Identifier: {
        setState(1829);
        expression();
        setState(1830);
        match(Java20Parser::SEMI);
        break;
      }

      case Java20Parser::LBRACE: {
        setState(1832);
        block();
        break;
      }

      case Java20Parser::THROW: {
        setState(1833);
        throwStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchBlockStatementGroupContext ------------------------------------------------------------------

Java20Parser::SwitchBlockStatementGroupContext::SwitchBlockStatementGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::SwitchLabelContext *> Java20Parser::SwitchBlockStatementGroupContext::switchLabel() {
  return getRuleContexts<Java20Parser::SwitchLabelContext>();
}

Java20Parser::SwitchLabelContext* Java20Parser::SwitchBlockStatementGroupContext::switchLabel(size_t i) {
  return getRuleContext<Java20Parser::SwitchLabelContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::SwitchBlockStatementGroupContext::COLON() {
  return getTokens(Java20Parser::COLON);
}

tree::TerminalNode* Java20Parser::SwitchBlockStatementGroupContext::COLON(size_t i) {
  return getToken(Java20Parser::COLON, i);
}

Java20Parser::BlockStatementsContext* Java20Parser::SwitchBlockStatementGroupContext::blockStatements() {
  return getRuleContext<Java20Parser::BlockStatementsContext>(0);
}


size_t Java20Parser::SwitchBlockStatementGroupContext::getRuleIndex() const {
  return Java20Parser::RuleSwitchBlockStatementGroup;
}


std::any Java20Parser::SwitchBlockStatementGroupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitSwitchBlockStatementGroup(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::SwitchBlockStatementGroupContext* Java20Parser::switchBlockStatementGroup() {
  SwitchBlockStatementGroupContext *_localctx = _tracker.createInstance<SwitchBlockStatementGroupContext>(_ctx, getState());
  enterRule(_localctx, 320, Java20Parser::RuleSwitchBlockStatementGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1836);
    switchLabel();
    setState(1837);
    match(Java20Parser::COLON);
    setState(1843);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::CASE

    || _la == Java20Parser::DEFAULT) {
      setState(1838);
      switchLabel();
      setState(1839);
      match(Java20Parser::COLON);
      setState(1845);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1846);
    blockStatements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabelContext ------------------------------------------------------------------

Java20Parser::SwitchLabelContext::SwitchLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::SwitchLabelContext::CASE() {
  return getToken(Java20Parser::CASE, 0);
}

std::vector<Java20Parser::CaseConstantContext *> Java20Parser::SwitchLabelContext::caseConstant() {
  return getRuleContexts<Java20Parser::CaseConstantContext>();
}

Java20Parser::CaseConstantContext* Java20Parser::SwitchLabelContext::caseConstant(size_t i) {
  return getRuleContext<Java20Parser::CaseConstantContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::SwitchLabelContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::SwitchLabelContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}

tree::TerminalNode* Java20Parser::SwitchLabelContext::DEFAULT() {
  return getToken(Java20Parser::DEFAULT, 0);
}


size_t Java20Parser::SwitchLabelContext::getRuleIndex() const {
  return Java20Parser::RuleSwitchLabel;
}


std::any Java20Parser::SwitchLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitSwitchLabel(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::SwitchLabelContext* Java20Parser::switchLabel() {
  SwitchLabelContext *_localctx = _tracker.createInstance<SwitchLabelContext>(_ctx, getState());
  enterRule(_localctx, 322, Java20Parser::RuleSwitchLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1858);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::CASE: {
        enterOuterAlt(_localctx, 1);
        setState(1848);
        match(Java20Parser::CASE);
        setState(1849);
        caseConstant();
        setState(1854);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java20Parser::COMMA) {
          setState(1850);
          match(Java20Parser::COMMA);
          setState(1851);
          caseConstant();
          setState(1856);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case Java20Parser::DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(1857);
        match(Java20Parser::DEFAULT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseConstantContext ------------------------------------------------------------------

Java20Parser::CaseConstantContext::CaseConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ConditionalExpressionContext* Java20Parser::CaseConstantContext::conditionalExpression() {
  return getRuleContext<Java20Parser::ConditionalExpressionContext>(0);
}


size_t Java20Parser::CaseConstantContext::getRuleIndex() const {
  return Java20Parser::RuleCaseConstant;
}


std::any Java20Parser::CaseConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitCaseConstant(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::CaseConstantContext* Java20Parser::caseConstant() {
  CaseConstantContext *_localctx = _tracker.createInstance<CaseConstantContext>(_ctx, getState());
  enterRule(_localctx, 324, Java20Parser::RuleCaseConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1860);
    conditionalExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

Java20Parser::WhileStatementContext::WhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::WhileStatementContext::WHILE() {
  return getToken(Java20Parser::WHILE, 0);
}

tree::TerminalNode* Java20Parser::WhileStatementContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::ExpressionContext* Java20Parser::WhileStatementContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::WhileStatementContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::StatementContext* Java20Parser::WhileStatementContext::statement() {
  return getRuleContext<Java20Parser::StatementContext>(0);
}


size_t Java20Parser::WhileStatementContext::getRuleIndex() const {
  return Java20Parser::RuleWhileStatement;
}


std::any Java20Parser::WhileStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitWhileStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::WhileStatementContext* Java20Parser::whileStatement() {
  WhileStatementContext *_localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 326, Java20Parser::RuleWhileStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1862);
    match(Java20Parser::WHILE);
    setState(1863);
    match(Java20Parser::LPAREN);
    setState(1864);
    expression();
    setState(1865);
    match(Java20Parser::RPAREN);
    setState(1866);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementNoShortIfContext ------------------------------------------------------------------

Java20Parser::WhileStatementNoShortIfContext::WhileStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::WhileStatementNoShortIfContext::WHILE() {
  return getToken(Java20Parser::WHILE, 0);
}

tree::TerminalNode* Java20Parser::WhileStatementNoShortIfContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::ExpressionContext* Java20Parser::WhileStatementNoShortIfContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::WhileStatementNoShortIfContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::StatementNoShortIfContext* Java20Parser::WhileStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContext<Java20Parser::StatementNoShortIfContext>(0);
}


size_t Java20Parser::WhileStatementNoShortIfContext::getRuleIndex() const {
  return Java20Parser::RuleWhileStatementNoShortIf;
}


std::any Java20Parser::WhileStatementNoShortIfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitWhileStatementNoShortIf(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::WhileStatementNoShortIfContext* Java20Parser::whileStatementNoShortIf() {
  WhileStatementNoShortIfContext *_localctx = _tracker.createInstance<WhileStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 328, Java20Parser::RuleWhileStatementNoShortIf);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1868);
    match(Java20Parser::WHILE);
    setState(1869);
    match(Java20Parser::LPAREN);
    setState(1870);
    expression();
    setState(1871);
    match(Java20Parser::RPAREN);
    setState(1872);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoStatementContext ------------------------------------------------------------------

Java20Parser::DoStatementContext::DoStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::DoStatementContext::DO() {
  return getToken(Java20Parser::DO, 0);
}

Java20Parser::StatementContext* Java20Parser::DoStatementContext::statement() {
  return getRuleContext<Java20Parser::StatementContext>(0);
}

tree::TerminalNode* Java20Parser::DoStatementContext::WHILE() {
  return getToken(Java20Parser::WHILE, 0);
}

tree::TerminalNode* Java20Parser::DoStatementContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::ExpressionContext* Java20Parser::DoStatementContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::DoStatementContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

tree::TerminalNode* Java20Parser::DoStatementContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::DoStatementContext::getRuleIndex() const {
  return Java20Parser::RuleDoStatement;
}


std::any Java20Parser::DoStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitDoStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::DoStatementContext* Java20Parser::doStatement() {
  DoStatementContext *_localctx = _tracker.createInstance<DoStatementContext>(_ctx, getState());
  enterRule(_localctx, 330, Java20Parser::RuleDoStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1874);
    match(Java20Parser::DO);
    setState(1875);
    statement();
    setState(1876);
    match(Java20Parser::WHILE);
    setState(1877);
    match(Java20Parser::LPAREN);
    setState(1878);
    expression();
    setState(1879);
    match(Java20Parser::RPAREN);
    setState(1880);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementContext ------------------------------------------------------------------

Java20Parser::ForStatementContext::ForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::BasicForStatementContext* Java20Parser::ForStatementContext::basicForStatement() {
  return getRuleContext<Java20Parser::BasicForStatementContext>(0);
}

Java20Parser::EnhancedForStatementContext* Java20Parser::ForStatementContext::enhancedForStatement() {
  return getRuleContext<Java20Parser::EnhancedForStatementContext>(0);
}


size_t Java20Parser::ForStatementContext::getRuleIndex() const {
  return Java20Parser::RuleForStatement;
}


std::any Java20Parser::ForStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitForStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ForStatementContext* Java20Parser::forStatement() {
  ForStatementContext *_localctx = _tracker.createInstance<ForStatementContext>(_ctx, getState());
  enterRule(_localctx, 332, Java20Parser::RuleForStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1884);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1882);
      basicForStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1883);
      enhancedForStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementNoShortIfContext ------------------------------------------------------------------

Java20Parser::ForStatementNoShortIfContext::ForStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::BasicForStatementNoShortIfContext* Java20Parser::ForStatementNoShortIfContext::basicForStatementNoShortIf() {
  return getRuleContext<Java20Parser::BasicForStatementNoShortIfContext>(0);
}

Java20Parser::EnhancedForStatementNoShortIfContext* Java20Parser::ForStatementNoShortIfContext::enhancedForStatementNoShortIf() {
  return getRuleContext<Java20Parser::EnhancedForStatementNoShortIfContext>(0);
}


size_t Java20Parser::ForStatementNoShortIfContext::getRuleIndex() const {
  return Java20Parser::RuleForStatementNoShortIf;
}


std::any Java20Parser::ForStatementNoShortIfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitForStatementNoShortIf(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ForStatementNoShortIfContext* Java20Parser::forStatementNoShortIf() {
  ForStatementNoShortIfContext *_localctx = _tracker.createInstance<ForStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 334, Java20Parser::RuleForStatementNoShortIf);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1888);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1886);
      basicForStatementNoShortIf();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1887);
      enhancedForStatementNoShortIf();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasicForStatementContext ------------------------------------------------------------------

Java20Parser::BasicForStatementContext::BasicForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::BasicForStatementContext::FOR() {
  return getToken(Java20Parser::FOR, 0);
}

tree::TerminalNode* Java20Parser::BasicForStatementContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

std::vector<tree::TerminalNode *> Java20Parser::BasicForStatementContext::SEMI() {
  return getTokens(Java20Parser::SEMI);
}

tree::TerminalNode* Java20Parser::BasicForStatementContext::SEMI(size_t i) {
  return getToken(Java20Parser::SEMI, i);
}

tree::TerminalNode* Java20Parser::BasicForStatementContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::StatementContext* Java20Parser::BasicForStatementContext::statement() {
  return getRuleContext<Java20Parser::StatementContext>(0);
}

Java20Parser::ForInitContext* Java20Parser::BasicForStatementContext::forInit() {
  return getRuleContext<Java20Parser::ForInitContext>(0);
}

Java20Parser::ExpressionContext* Java20Parser::BasicForStatementContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

Java20Parser::ForUpdateContext* Java20Parser::BasicForStatementContext::forUpdate() {
  return getRuleContext<Java20Parser::ForUpdateContext>(0);
}


size_t Java20Parser::BasicForStatementContext::getRuleIndex() const {
  return Java20Parser::RuleBasicForStatement;
}


std::any Java20Parser::BasicForStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitBasicForStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::BasicForStatementContext* Java20Parser::basicForStatement() {
  BasicForStatementContext *_localctx = _tracker.createInstance<BasicForStatementContext>(_ctx, getState());
  enterRule(_localctx, 336, Java20Parser::RuleBasicForStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1890);
    match(Java20Parser::FOR);
    setState(1891);
    match(Java20Parser::LPAREN);
    setState(1893);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1315420701084123136) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288230788470673393) != 0)) {
      setState(1892);
      forInit();
    }
    setState(1895);
    match(Java20Parser::SEMI);
    setState(1897);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
      setState(1896);
      expression();
    }
    setState(1899);
    match(Java20Parser::SEMI);
    setState(1901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1315420666724352000) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288230788470673393) != 0)) {
      setState(1900);
      forUpdate();
    }
    setState(1903);
    match(Java20Parser::RPAREN);
    setState(1904);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasicForStatementNoShortIfContext ------------------------------------------------------------------

Java20Parser::BasicForStatementNoShortIfContext::BasicForStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::BasicForStatementNoShortIfContext::FOR() {
  return getToken(Java20Parser::FOR, 0);
}

tree::TerminalNode* Java20Parser::BasicForStatementNoShortIfContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

std::vector<tree::TerminalNode *> Java20Parser::BasicForStatementNoShortIfContext::SEMI() {
  return getTokens(Java20Parser::SEMI);
}

tree::TerminalNode* Java20Parser::BasicForStatementNoShortIfContext::SEMI(size_t i) {
  return getToken(Java20Parser::SEMI, i);
}

tree::TerminalNode* Java20Parser::BasicForStatementNoShortIfContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::StatementNoShortIfContext* Java20Parser::BasicForStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContext<Java20Parser::StatementNoShortIfContext>(0);
}

Java20Parser::ForInitContext* Java20Parser::BasicForStatementNoShortIfContext::forInit() {
  return getRuleContext<Java20Parser::ForInitContext>(0);
}

Java20Parser::ExpressionContext* Java20Parser::BasicForStatementNoShortIfContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

Java20Parser::ForUpdateContext* Java20Parser::BasicForStatementNoShortIfContext::forUpdate() {
  return getRuleContext<Java20Parser::ForUpdateContext>(0);
}


size_t Java20Parser::BasicForStatementNoShortIfContext::getRuleIndex() const {
  return Java20Parser::RuleBasicForStatementNoShortIf;
}


std::any Java20Parser::BasicForStatementNoShortIfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitBasicForStatementNoShortIf(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::BasicForStatementNoShortIfContext* Java20Parser::basicForStatementNoShortIf() {
  BasicForStatementNoShortIfContext *_localctx = _tracker.createInstance<BasicForStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 338, Java20Parser::RuleBasicForStatementNoShortIf);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1906);
    match(Java20Parser::FOR);
    setState(1907);
    match(Java20Parser::LPAREN);
    setState(1909);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1315420701084123136) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288230788470673393) != 0)) {
      setState(1908);
      forInit();
    }
    setState(1911);
    match(Java20Parser::SEMI);
    setState(1913);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
      setState(1912);
      expression();
    }
    setState(1915);
    match(Java20Parser::SEMI);
    setState(1917);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1315420666724352000) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288230788470673393) != 0)) {
      setState(1916);
      forUpdate();
    }
    setState(1919);
    match(Java20Parser::RPAREN);
    setState(1920);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInitContext ------------------------------------------------------------------

Java20Parser::ForInitContext::ForInitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::StatementExpressionListContext* Java20Parser::ForInitContext::statementExpressionList() {
  return getRuleContext<Java20Parser::StatementExpressionListContext>(0);
}

Java20Parser::LocalVariableDeclarationContext* Java20Parser::ForInitContext::localVariableDeclaration() {
  return getRuleContext<Java20Parser::LocalVariableDeclarationContext>(0);
}


size_t Java20Parser::ForInitContext::getRuleIndex() const {
  return Java20Parser::RuleForInit;
}


std::any Java20Parser::ForInitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitForInit(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ForInitContext* Java20Parser::forInit() {
  ForInitContext *_localctx = _tracker.createInstance<ForInitContext>(_ctx, getState());
  enterRule(_localctx, 340, Java20Parser::RuleForInit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1924);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1922);
      statementExpressionList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1923);
      localVariableDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForUpdateContext ------------------------------------------------------------------

Java20Parser::ForUpdateContext::ForUpdateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::StatementExpressionListContext* Java20Parser::ForUpdateContext::statementExpressionList() {
  return getRuleContext<Java20Parser::StatementExpressionListContext>(0);
}


size_t Java20Parser::ForUpdateContext::getRuleIndex() const {
  return Java20Parser::RuleForUpdate;
}


std::any Java20Parser::ForUpdateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitForUpdate(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ForUpdateContext* Java20Parser::forUpdate() {
  ForUpdateContext *_localctx = _tracker.createInstance<ForUpdateContext>(_ctx, getState());
  enterRule(_localctx, 342, Java20Parser::RuleForUpdate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1926);
    statementExpressionList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementExpressionListContext ------------------------------------------------------------------

Java20Parser::StatementExpressionListContext::StatementExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::StatementExpressionContext *> Java20Parser::StatementExpressionListContext::statementExpression() {
  return getRuleContexts<Java20Parser::StatementExpressionContext>();
}

Java20Parser::StatementExpressionContext* Java20Parser::StatementExpressionListContext::statementExpression(size_t i) {
  return getRuleContext<Java20Parser::StatementExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::StatementExpressionListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::StatementExpressionListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::StatementExpressionListContext::getRuleIndex() const {
  return Java20Parser::RuleStatementExpressionList;
}


std::any Java20Parser::StatementExpressionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitStatementExpressionList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::StatementExpressionListContext* Java20Parser::statementExpressionList() {
  StatementExpressionListContext *_localctx = _tracker.createInstance<StatementExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 344, Java20Parser::RuleStatementExpressionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1928);
    statementExpression();
    setState(1933);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::COMMA) {
      setState(1929);
      match(Java20Parser::COMMA);
      setState(1930);
      statementExpression();
      setState(1935);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnhancedForStatementContext ------------------------------------------------------------------

Java20Parser::EnhancedForStatementContext::EnhancedForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::EnhancedForStatementContext::FOR() {
  return getToken(Java20Parser::FOR, 0);
}

tree::TerminalNode* Java20Parser::EnhancedForStatementContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::LocalVariableDeclarationContext* Java20Parser::EnhancedForStatementContext::localVariableDeclaration() {
  return getRuleContext<Java20Parser::LocalVariableDeclarationContext>(0);
}

tree::TerminalNode* Java20Parser::EnhancedForStatementContext::COLON() {
  return getToken(Java20Parser::COLON, 0);
}

Java20Parser::ExpressionContext* Java20Parser::EnhancedForStatementContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::EnhancedForStatementContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::StatementContext* Java20Parser::EnhancedForStatementContext::statement() {
  return getRuleContext<Java20Parser::StatementContext>(0);
}


size_t Java20Parser::EnhancedForStatementContext::getRuleIndex() const {
  return Java20Parser::RuleEnhancedForStatement;
}


std::any Java20Parser::EnhancedForStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitEnhancedForStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::EnhancedForStatementContext* Java20Parser::enhancedForStatement() {
  EnhancedForStatementContext *_localctx = _tracker.createInstance<EnhancedForStatementContext>(_ctx, getState());
  enterRule(_localctx, 346, Java20Parser::RuleEnhancedForStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1936);
    match(Java20Parser::FOR);
    setState(1937);
    match(Java20Parser::LPAREN);
    setState(1938);
    localVariableDeclaration();
    setState(1939);
    match(Java20Parser::COLON);
    setState(1940);
    expression();
    setState(1941);
    match(Java20Parser::RPAREN);
    setState(1942);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnhancedForStatementNoShortIfContext ------------------------------------------------------------------

Java20Parser::EnhancedForStatementNoShortIfContext::EnhancedForStatementNoShortIfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::EnhancedForStatementNoShortIfContext::FOR() {
  return getToken(Java20Parser::FOR, 0);
}

tree::TerminalNode* Java20Parser::EnhancedForStatementNoShortIfContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::LocalVariableDeclarationContext* Java20Parser::EnhancedForStatementNoShortIfContext::localVariableDeclaration() {
  return getRuleContext<Java20Parser::LocalVariableDeclarationContext>(0);
}

tree::TerminalNode* Java20Parser::EnhancedForStatementNoShortIfContext::COLON() {
  return getToken(Java20Parser::COLON, 0);
}

Java20Parser::ExpressionContext* Java20Parser::EnhancedForStatementNoShortIfContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::EnhancedForStatementNoShortIfContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::StatementNoShortIfContext* Java20Parser::EnhancedForStatementNoShortIfContext::statementNoShortIf() {
  return getRuleContext<Java20Parser::StatementNoShortIfContext>(0);
}


size_t Java20Parser::EnhancedForStatementNoShortIfContext::getRuleIndex() const {
  return Java20Parser::RuleEnhancedForStatementNoShortIf;
}


std::any Java20Parser::EnhancedForStatementNoShortIfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitEnhancedForStatementNoShortIf(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::EnhancedForStatementNoShortIfContext* Java20Parser::enhancedForStatementNoShortIf() {
  EnhancedForStatementNoShortIfContext *_localctx = _tracker.createInstance<EnhancedForStatementNoShortIfContext>(_ctx, getState());
  enterRule(_localctx, 348, Java20Parser::RuleEnhancedForStatementNoShortIf);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1944);
    match(Java20Parser::FOR);
    setState(1945);
    match(Java20Parser::LPAREN);
    setState(1946);
    localVariableDeclaration();
    setState(1947);
    match(Java20Parser::COLON);
    setState(1948);
    expression();
    setState(1949);
    match(Java20Parser::RPAREN);
    setState(1950);
    statementNoShortIf();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BreakStatementContext ------------------------------------------------------------------

Java20Parser::BreakStatementContext::BreakStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::BreakStatementContext::BREAK() {
  return getToken(Java20Parser::BREAK, 0);
}

tree::TerminalNode* Java20Parser::BreakStatementContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}

tree::TerminalNode* Java20Parser::BreakStatementContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}


size_t Java20Parser::BreakStatementContext::getRuleIndex() const {
  return Java20Parser::RuleBreakStatement;
}


std::any Java20Parser::BreakStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitBreakStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::BreakStatementContext* Java20Parser::breakStatement() {
  BreakStatementContext *_localctx = _tracker.createInstance<BreakStatementContext>(_ctx, getState());
  enterRule(_localctx, 350, Java20Parser::RuleBreakStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1952);
    match(Java20Parser::BREAK);
    setState(1954);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::Identifier) {
      setState(1953);
      match(Java20Parser::Identifier);
    }
    setState(1956);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStatementContext ------------------------------------------------------------------

Java20Parser::ContinueStatementContext::ContinueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ContinueStatementContext::CONTINUE() {
  return getToken(Java20Parser::CONTINUE, 0);
}

tree::TerminalNode* Java20Parser::ContinueStatementContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}

tree::TerminalNode* Java20Parser::ContinueStatementContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}


size_t Java20Parser::ContinueStatementContext::getRuleIndex() const {
  return Java20Parser::RuleContinueStatement;
}


std::any Java20Parser::ContinueStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitContinueStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ContinueStatementContext* Java20Parser::continueStatement() {
  ContinueStatementContext *_localctx = _tracker.createInstance<ContinueStatementContext>(_ctx, getState());
  enterRule(_localctx, 352, Java20Parser::RuleContinueStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1958);
    match(Java20Parser::CONTINUE);
    setState(1960);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::Identifier) {
      setState(1959);
      match(Java20Parser::Identifier);
    }
    setState(1962);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

Java20Parser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ReturnStatementContext::RETURN() {
  return getToken(Java20Parser::RETURN, 0);
}

tree::TerminalNode* Java20Parser::ReturnStatementContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}

Java20Parser::ExpressionContext* Java20Parser::ReturnStatementContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}


size_t Java20Parser::ReturnStatementContext::getRuleIndex() const {
  return Java20Parser::RuleReturnStatement;
}


std::any Java20Parser::ReturnStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitReturnStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ReturnStatementContext* Java20Parser::returnStatement() {
  ReturnStatementContext *_localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
  enterRule(_localctx, 354, Java20Parser::RuleReturnStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1964);
    match(Java20Parser::RETURN);
    setState(1966);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
      setState(1965);
      expression();
    }
    setState(1968);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowStatementContext ------------------------------------------------------------------

Java20Parser::ThrowStatementContext::ThrowStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ThrowStatementContext::THROW() {
  return getToken(Java20Parser::THROW, 0);
}

Java20Parser::ExpressionContext* Java20Parser::ThrowStatementContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::ThrowStatementContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::ThrowStatementContext::getRuleIndex() const {
  return Java20Parser::RuleThrowStatement;
}


std::any Java20Parser::ThrowStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitThrowStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ThrowStatementContext* Java20Parser::throwStatement() {
  ThrowStatementContext *_localctx = _tracker.createInstance<ThrowStatementContext>(_ctx, getState());
  enterRule(_localctx, 356, Java20Parser::RuleThrowStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1970);
    match(Java20Parser::THROW);
    setState(1971);
    expression();
    setState(1972);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SynchronizedStatementContext ------------------------------------------------------------------

Java20Parser::SynchronizedStatementContext::SynchronizedStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::SynchronizedStatementContext::SYNCHRONIZED() {
  return getToken(Java20Parser::SYNCHRONIZED, 0);
}

tree::TerminalNode* Java20Parser::SynchronizedStatementContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::ExpressionContext* Java20Parser::SynchronizedStatementContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::SynchronizedStatementContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::BlockContext* Java20Parser::SynchronizedStatementContext::block() {
  return getRuleContext<Java20Parser::BlockContext>(0);
}


size_t Java20Parser::SynchronizedStatementContext::getRuleIndex() const {
  return Java20Parser::RuleSynchronizedStatement;
}


std::any Java20Parser::SynchronizedStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitSynchronizedStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::SynchronizedStatementContext* Java20Parser::synchronizedStatement() {
  SynchronizedStatementContext *_localctx = _tracker.createInstance<SynchronizedStatementContext>(_ctx, getState());
  enterRule(_localctx, 358, Java20Parser::RuleSynchronizedStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1974);
    match(Java20Parser::SYNCHRONIZED);
    setState(1975);
    match(Java20Parser::LPAREN);
    setState(1976);
    expression();
    setState(1977);
    match(Java20Parser::RPAREN);
    setState(1978);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryStatementContext ------------------------------------------------------------------

Java20Parser::TryStatementContext::TryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::TryStatementContext::TRY() {
  return getToken(Java20Parser::TRY, 0);
}

Java20Parser::BlockContext* Java20Parser::TryStatementContext::block() {
  return getRuleContext<Java20Parser::BlockContext>(0);
}

Java20Parser::CatchesContext* Java20Parser::TryStatementContext::catches() {
  return getRuleContext<Java20Parser::CatchesContext>(0);
}

Java20Parser::FinallyBlockContext* Java20Parser::TryStatementContext::finallyBlock() {
  return getRuleContext<Java20Parser::FinallyBlockContext>(0);
}

Java20Parser::TryWithResourcesStatementContext* Java20Parser::TryStatementContext::tryWithResourcesStatement() {
  return getRuleContext<Java20Parser::TryWithResourcesStatementContext>(0);
}


size_t Java20Parser::TryStatementContext::getRuleIndex() const {
  return Java20Parser::RuleTryStatement;
}


std::any Java20Parser::TryStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTryStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TryStatementContext* Java20Parser::tryStatement() {
  TryStatementContext *_localctx = _tracker.createInstance<TryStatementContext>(_ctx, getState());
  enterRule(_localctx, 360, Java20Parser::RuleTryStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1996);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1980);
      match(Java20Parser::TRY);
      setState(1981);
      block();
      setState(1982);
      catches();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1984);
      match(Java20Parser::TRY);
      setState(1985);
      block();
      setState(1986);
      finallyBlock();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1988);
      match(Java20Parser::TRY);
      setState(1989);
      block();
      setState(1991);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::CATCH) {
        setState(1990);
        catches();
      }
      setState(1993);
      finallyBlock();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1995);
      tryWithResourcesStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchesContext ------------------------------------------------------------------

Java20Parser::CatchesContext::CatchesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::CatchClauseContext *> Java20Parser::CatchesContext::catchClause() {
  return getRuleContexts<Java20Parser::CatchClauseContext>();
}

Java20Parser::CatchClauseContext* Java20Parser::CatchesContext::catchClause(size_t i) {
  return getRuleContext<Java20Parser::CatchClauseContext>(i);
}


size_t Java20Parser::CatchesContext::getRuleIndex() const {
  return Java20Parser::RuleCatches;
}


std::any Java20Parser::CatchesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitCatches(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::CatchesContext* Java20Parser::catches() {
  CatchesContext *_localctx = _tracker.createInstance<CatchesContext>(_ctx, getState());
  enterRule(_localctx, 362, Java20Parser::RuleCatches);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1998);
    catchClause();
    setState(2002);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::CATCH) {
      setState(1999);
      catchClause();
      setState(2004);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchClauseContext ------------------------------------------------------------------

Java20Parser::CatchClauseContext::CatchClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::CatchClauseContext::CATCH() {
  return getToken(Java20Parser::CATCH, 0);
}

tree::TerminalNode* Java20Parser::CatchClauseContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::CatchFormalParameterContext* Java20Parser::CatchClauseContext::catchFormalParameter() {
  return getRuleContext<Java20Parser::CatchFormalParameterContext>(0);
}

tree::TerminalNode* Java20Parser::CatchClauseContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::BlockContext* Java20Parser::CatchClauseContext::block() {
  return getRuleContext<Java20Parser::BlockContext>(0);
}


size_t Java20Parser::CatchClauseContext::getRuleIndex() const {
  return Java20Parser::RuleCatchClause;
}


std::any Java20Parser::CatchClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitCatchClause(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::CatchClauseContext* Java20Parser::catchClause() {
  CatchClauseContext *_localctx = _tracker.createInstance<CatchClauseContext>(_ctx, getState());
  enterRule(_localctx, 364, Java20Parser::RuleCatchClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2005);
    match(Java20Parser::CATCH);
    setState(2006);
    match(Java20Parser::LPAREN);
    setState(2007);
    catchFormalParameter();
    setState(2008);
    match(Java20Parser::RPAREN);
    setState(2009);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchFormalParameterContext ------------------------------------------------------------------

Java20Parser::CatchFormalParameterContext::CatchFormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::CatchTypeContext* Java20Parser::CatchFormalParameterContext::catchType() {
  return getRuleContext<Java20Parser::CatchTypeContext>(0);
}

Java20Parser::VariableDeclaratorIdContext* Java20Parser::CatchFormalParameterContext::variableDeclaratorId() {
  return getRuleContext<Java20Parser::VariableDeclaratorIdContext>(0);
}

std::vector<Java20Parser::VariableModifierContext *> Java20Parser::CatchFormalParameterContext::variableModifier() {
  return getRuleContexts<Java20Parser::VariableModifierContext>();
}

Java20Parser::VariableModifierContext* Java20Parser::CatchFormalParameterContext::variableModifier(size_t i) {
  return getRuleContext<Java20Parser::VariableModifierContext>(i);
}


size_t Java20Parser::CatchFormalParameterContext::getRuleIndex() const {
  return Java20Parser::RuleCatchFormalParameter;
}


std::any Java20Parser::CatchFormalParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitCatchFormalParameter(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::CatchFormalParameterContext* Java20Parser::catchFormalParameter() {
  CatchFormalParameterContext *_localctx = _tracker.createInstance<CatchFormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 366, Java20Parser::RuleCatchFormalParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2014);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::FINAL

    || _la == Java20Parser::AT) {
      setState(2011);
      variableModifier();
      setState(2016);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2017);
    catchType();
    setState(2018);
    variableDeclaratorId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchTypeContext ------------------------------------------------------------------

Java20Parser::CatchTypeContext::CatchTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannClassTypeContext* Java20Parser::CatchTypeContext::unannClassType() {
  return getRuleContext<Java20Parser::UnannClassTypeContext>(0);
}

std::vector<tree::TerminalNode *> Java20Parser::CatchTypeContext::BITOR() {
  return getTokens(Java20Parser::BITOR);
}

tree::TerminalNode* Java20Parser::CatchTypeContext::BITOR(size_t i) {
  return getToken(Java20Parser::BITOR, i);
}

std::vector<Java20Parser::ClassTypeContext *> Java20Parser::CatchTypeContext::classType() {
  return getRuleContexts<Java20Parser::ClassTypeContext>();
}

Java20Parser::ClassTypeContext* Java20Parser::CatchTypeContext::classType(size_t i) {
  return getRuleContext<Java20Parser::ClassTypeContext>(i);
}


size_t Java20Parser::CatchTypeContext::getRuleIndex() const {
  return Java20Parser::RuleCatchType;
}


std::any Java20Parser::CatchTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitCatchType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::CatchTypeContext* Java20Parser::catchType() {
  CatchTypeContext *_localctx = _tracker.createInstance<CatchTypeContext>(_ctx, getState());
  enterRule(_localctx, 368, Java20Parser::RuleCatchType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2020);
    unannClassType();
    setState(2025);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::BITOR) {
      setState(2021);
      match(Java20Parser::BITOR);
      setState(2022);
      classType();
      setState(2027);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FinallyBlockContext ------------------------------------------------------------------

Java20Parser::FinallyBlockContext::FinallyBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::FinallyBlockContext::FINALLY() {
  return getToken(Java20Parser::FINALLY, 0);
}

Java20Parser::BlockContext* Java20Parser::FinallyBlockContext::block() {
  return getRuleContext<Java20Parser::BlockContext>(0);
}


size_t Java20Parser::FinallyBlockContext::getRuleIndex() const {
  return Java20Parser::RuleFinallyBlock;
}


std::any Java20Parser::FinallyBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitFinallyBlock(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::FinallyBlockContext* Java20Parser::finallyBlock() {
  FinallyBlockContext *_localctx = _tracker.createInstance<FinallyBlockContext>(_ctx, getState());
  enterRule(_localctx, 370, Java20Parser::RuleFinallyBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2028);
    match(Java20Parser::FINALLY);
    setState(2029);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryWithResourcesStatementContext ------------------------------------------------------------------

Java20Parser::TryWithResourcesStatementContext::TryWithResourcesStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::TryWithResourcesStatementContext::TRY() {
  return getToken(Java20Parser::TRY, 0);
}

Java20Parser::ResourceSpecificationContext* Java20Parser::TryWithResourcesStatementContext::resourceSpecification() {
  return getRuleContext<Java20Parser::ResourceSpecificationContext>(0);
}

Java20Parser::BlockContext* Java20Parser::TryWithResourcesStatementContext::block() {
  return getRuleContext<Java20Parser::BlockContext>(0);
}

Java20Parser::CatchesContext* Java20Parser::TryWithResourcesStatementContext::catches() {
  return getRuleContext<Java20Parser::CatchesContext>(0);
}

Java20Parser::FinallyBlockContext* Java20Parser::TryWithResourcesStatementContext::finallyBlock() {
  return getRuleContext<Java20Parser::FinallyBlockContext>(0);
}


size_t Java20Parser::TryWithResourcesStatementContext::getRuleIndex() const {
  return Java20Parser::RuleTryWithResourcesStatement;
}


std::any Java20Parser::TryWithResourcesStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTryWithResourcesStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TryWithResourcesStatementContext* Java20Parser::tryWithResourcesStatement() {
  TryWithResourcesStatementContext *_localctx = _tracker.createInstance<TryWithResourcesStatementContext>(_ctx, getState());
  enterRule(_localctx, 372, Java20Parser::RuleTryWithResourcesStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2031);
    match(Java20Parser::TRY);
    setState(2032);
    resourceSpecification();
    setState(2033);
    block();
    setState(2035);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::CATCH) {
      setState(2034);
      catches();
    }
    setState(2038);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::FINALLY) {
      setState(2037);
      finallyBlock();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceSpecificationContext ------------------------------------------------------------------

Java20Parser::ResourceSpecificationContext::ResourceSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ResourceSpecificationContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::ResourceListContext* Java20Parser::ResourceSpecificationContext::resourceList() {
  return getRuleContext<Java20Parser::ResourceListContext>(0);
}

tree::TerminalNode* Java20Parser::ResourceSpecificationContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

tree::TerminalNode* Java20Parser::ResourceSpecificationContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::ResourceSpecificationContext::getRuleIndex() const {
  return Java20Parser::RuleResourceSpecification;
}


std::any Java20Parser::ResourceSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitResourceSpecification(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ResourceSpecificationContext* Java20Parser::resourceSpecification() {
  ResourceSpecificationContext *_localctx = _tracker.createInstance<ResourceSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 374, Java20Parser::RuleResourceSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2040);
    match(Java20Parser::LPAREN);
    setState(2041);
    resourceList();
    setState(2043);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::SEMI) {
      setState(2042);
      match(Java20Parser::SEMI);
    }
    setState(2045);
    match(Java20Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceListContext ------------------------------------------------------------------

Java20Parser::ResourceListContext::ResourceListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::ResourceContext *> Java20Parser::ResourceListContext::resource() {
  return getRuleContexts<Java20Parser::ResourceContext>();
}

Java20Parser::ResourceContext* Java20Parser::ResourceListContext::resource(size_t i) {
  return getRuleContext<Java20Parser::ResourceContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::ResourceListContext::SEMI() {
  return getTokens(Java20Parser::SEMI);
}

tree::TerminalNode* Java20Parser::ResourceListContext::SEMI(size_t i) {
  return getToken(Java20Parser::SEMI, i);
}


size_t Java20Parser::ResourceListContext::getRuleIndex() const {
  return Java20Parser::RuleResourceList;
}


std::any Java20Parser::ResourceListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitResourceList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ResourceListContext* Java20Parser::resourceList() {
  ResourceListContext *_localctx = _tracker.createInstance<ResourceListContext>(_ctx, getState());
  enterRule(_localctx, 376, Java20Parser::RuleResourceList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2047);
    resource();
    setState(2052);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2048);
        match(Java20Parser::SEMI);
        setState(2049);
        resource(); 
      }
      setState(2054);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceContext ------------------------------------------------------------------

Java20Parser::ResourceContext::ResourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::LocalVariableDeclarationContext* Java20Parser::ResourceContext::localVariableDeclaration() {
  return getRuleContext<Java20Parser::LocalVariableDeclarationContext>(0);
}

Java20Parser::VariableAccessContext* Java20Parser::ResourceContext::variableAccess() {
  return getRuleContext<Java20Parser::VariableAccessContext>(0);
}


size_t Java20Parser::ResourceContext::getRuleIndex() const {
  return Java20Parser::RuleResource;
}


std::any Java20Parser::ResourceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitResource(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ResourceContext* Java20Parser::resource() {
  ResourceContext *_localctx = _tracker.createInstance<ResourceContext>(_ctx, getState());
  enterRule(_localctx, 378, Java20Parser::RuleResource);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2057);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2055);
      localVariableDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2056);
      variableAccess();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableAccessContext ------------------------------------------------------------------

Java20Parser::VariableAccessContext::VariableAccessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ExpressionNameContext* Java20Parser::VariableAccessContext::expressionName() {
  return getRuleContext<Java20Parser::ExpressionNameContext>(0);
}

Java20Parser::FieldAccessContext* Java20Parser::VariableAccessContext::fieldAccess() {
  return getRuleContext<Java20Parser::FieldAccessContext>(0);
}


size_t Java20Parser::VariableAccessContext::getRuleIndex() const {
  return Java20Parser::RuleVariableAccess;
}


std::any Java20Parser::VariableAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitVariableAccess(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::VariableAccessContext* Java20Parser::variableAccess() {
  VariableAccessContext *_localctx = _tracker.createInstance<VariableAccessContext>(_ctx, getState());
  enterRule(_localctx, 380, Java20Parser::RuleVariableAccess);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2061);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2059);
      expressionName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2060);
      fieldAccess();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldStatementContext ------------------------------------------------------------------

Java20Parser::YieldStatementContext::YieldStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::YieldStatementContext::YIELD() {
  return getToken(Java20Parser::YIELD, 0);
}

Java20Parser::ExpressionContext* Java20Parser::YieldStatementContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::YieldStatementContext::SEMI() {
  return getToken(Java20Parser::SEMI, 0);
}


size_t Java20Parser::YieldStatementContext::getRuleIndex() const {
  return Java20Parser::RuleYieldStatement;
}


std::any Java20Parser::YieldStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitYieldStatement(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::YieldStatementContext* Java20Parser::yieldStatement() {
  YieldStatementContext *_localctx = _tracker.createInstance<YieldStatementContext>(_ctx, getState());
  enterRule(_localctx, 382, Java20Parser::RuleYieldStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2063);
    match(Java20Parser::YIELD);
    setState(2064);
    expression();
    setState(2065);
    match(Java20Parser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternContext ------------------------------------------------------------------

Java20Parser::PatternContext::PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::TypePatternContext* Java20Parser::PatternContext::typePattern() {
  return getRuleContext<Java20Parser::TypePatternContext>(0);
}


size_t Java20Parser::PatternContext::getRuleIndex() const {
  return Java20Parser::RulePattern;
}


std::any Java20Parser::PatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPattern(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PatternContext* Java20Parser::pattern() {
  PatternContext *_localctx = _tracker.createInstance<PatternContext>(_ctx, getState());
  enterRule(_localctx, 384, Java20Parser::RulePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2067);
    typePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypePatternContext ------------------------------------------------------------------

Java20Parser::TypePatternContext::TypePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::LocalVariableDeclarationContext* Java20Parser::TypePatternContext::localVariableDeclaration() {
  return getRuleContext<Java20Parser::LocalVariableDeclarationContext>(0);
}


size_t Java20Parser::TypePatternContext::getRuleIndex() const {
  return Java20Parser::RuleTypePattern;
}


std::any Java20Parser::TypePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypePattern(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypePatternContext* Java20Parser::typePattern() {
  TypePatternContext *_localctx = _tracker.createInstance<TypePatternContext>(_ctx, getState());
  enterRule(_localctx, 386, Java20Parser::RuleTypePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2069);
    localVariableDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

Java20Parser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::LambdaExpressionContext* Java20Parser::ExpressionContext::lambdaExpression() {
  return getRuleContext<Java20Parser::LambdaExpressionContext>(0);
}

Java20Parser::AssignmentExpressionContext* Java20Parser::ExpressionContext::assignmentExpression() {
  return getRuleContext<Java20Parser::AssignmentExpressionContext>(0);
}


size_t Java20Parser::ExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleExpression;
}


std::any Java20Parser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ExpressionContext* Java20Parser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 388, Java20Parser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2073);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2071);
      lambdaExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2072);
      assignmentExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

Java20Parser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::PrimaryNoNewArrayContext* Java20Parser::PrimaryContext::primaryNoNewArray() {
  return getRuleContext<Java20Parser::PrimaryNoNewArrayContext>(0);
}

Java20Parser::ArrayCreationExpressionContext* Java20Parser::PrimaryContext::arrayCreationExpression() {
  return getRuleContext<Java20Parser::ArrayCreationExpressionContext>(0);
}


size_t Java20Parser::PrimaryContext::getRuleIndex() const {
  return Java20Parser::RulePrimary;
}


std::any Java20Parser::PrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPrimary(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PrimaryContext* Java20Parser::primary() {
  PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, getState());
  enterRule(_localctx, 390, Java20Parser::RulePrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2077);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2075);
      primaryNoNewArray();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2076);
      arrayCreationExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryNoNewArrayContext ------------------------------------------------------------------

Java20Parser::PrimaryNoNewArrayContext::PrimaryNoNewArrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::LiteralContext* Java20Parser::PrimaryNoNewArrayContext::literal() {
  return getRuleContext<Java20Parser::LiteralContext>(0);
}

Java20Parser::PNNAContext* Java20Parser::PrimaryNoNewArrayContext::pNNA() {
  return getRuleContext<Java20Parser::PNNAContext>(0);
}

Java20Parser::ClassLiteralContext* Java20Parser::PrimaryNoNewArrayContext::classLiteral() {
  return getRuleContext<Java20Parser::ClassLiteralContext>(0);
}

tree::TerminalNode* Java20Parser::PrimaryNoNewArrayContext::THIS() {
  return getToken(Java20Parser::THIS, 0);
}

Java20Parser::TypeNameContext* Java20Parser::PrimaryNoNewArrayContext::typeName() {
  return getRuleContext<Java20Parser::TypeNameContext>(0);
}

std::vector<tree::TerminalNode *> Java20Parser::PrimaryNoNewArrayContext::DOT() {
  return getTokens(Java20Parser::DOT);
}

tree::TerminalNode* Java20Parser::PrimaryNoNewArrayContext::DOT(size_t i) {
  return getToken(Java20Parser::DOT, i);
}

tree::TerminalNode* Java20Parser::PrimaryNoNewArrayContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::ExpressionContext* Java20Parser::PrimaryNoNewArrayContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::PrimaryNoNewArrayContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::UnqualifiedClassInstanceCreationExpressionContext* Java20Parser::PrimaryNoNewArrayContext::unqualifiedClassInstanceCreationExpression() {
  return getRuleContext<Java20Parser::UnqualifiedClassInstanceCreationExpressionContext>(0);
}

Java20Parser::ExpressionNameContext* Java20Parser::PrimaryNoNewArrayContext::expressionName() {
  return getRuleContext<Java20Parser::ExpressionNameContext>(0);
}

Java20Parser::ArrayCreationExpressionContext* Java20Parser::PrimaryNoNewArrayContext::arrayCreationExpression() {
  return getRuleContext<Java20Parser::ArrayCreationExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::PrimaryNoNewArrayContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::PrimaryNoNewArrayContext::SUPER() {
  return getToken(Java20Parser::SUPER, 0);
}

tree::TerminalNode* Java20Parser::PrimaryNoNewArrayContext::LBRACK() {
  return getToken(Java20Parser::LBRACK, 0);
}

tree::TerminalNode* Java20Parser::PrimaryNoNewArrayContext::RBRACK() {
  return getToken(Java20Parser::RBRACK, 0);
}

Java20Parser::ArrayCreationExpressionWithInitializerContext* Java20Parser::PrimaryNoNewArrayContext::arrayCreationExpressionWithInitializer() {
  return getRuleContext<Java20Parser::ArrayCreationExpressionWithInitializerContext>(0);
}

Java20Parser::MethodNameContext* Java20Parser::PrimaryNoNewArrayContext::methodName() {
  return getRuleContext<Java20Parser::MethodNameContext>(0);
}

Java20Parser::ArgumentListContext* Java20Parser::PrimaryNoNewArrayContext::argumentList() {
  return getRuleContext<Java20Parser::ArgumentListContext>(0);
}

Java20Parser::TypeArgumentsContext* Java20Parser::PrimaryNoNewArrayContext::typeArguments() {
  return getRuleContext<Java20Parser::TypeArgumentsContext>(0);
}

tree::TerminalNode* Java20Parser::PrimaryNoNewArrayContext::COLONCOLON() {
  return getToken(Java20Parser::COLONCOLON, 0);
}

Java20Parser::ReferenceTypeContext* Java20Parser::PrimaryNoNewArrayContext::referenceType() {
  return getRuleContext<Java20Parser::ReferenceTypeContext>(0);
}

Java20Parser::ClassTypeContext* Java20Parser::PrimaryNoNewArrayContext::classType() {
  return getRuleContext<Java20Parser::ClassTypeContext>(0);
}

tree::TerminalNode* Java20Parser::PrimaryNoNewArrayContext::NEW() {
  return getToken(Java20Parser::NEW, 0);
}

Java20Parser::ArrayTypeContext* Java20Parser::PrimaryNoNewArrayContext::arrayType() {
  return getRuleContext<Java20Parser::ArrayTypeContext>(0);
}


size_t Java20Parser::PrimaryNoNewArrayContext::getRuleIndex() const {
  return Java20Parser::RulePrimaryNoNewArray;
}


std::any Java20Parser::PrimaryNoNewArrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPrimaryNoNewArray(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PrimaryNoNewArrayContext* Java20Parser::primaryNoNewArray() {
  PrimaryNoNewArrayContext *_localctx = _tracker.createInstance<PrimaryNoNewArrayContext>(_ctx, getState());
  enterRule(_localctx, 392, Java20Parser::RulePrimaryNoNewArray);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2296);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 269, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2079);
      literal();
      setState(2081);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx)) {
      case 1: {
        setState(2080);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2083);
      classLiteral();
      setState(2085);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx)) {
      case 1: {
        setState(2084);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2087);
      match(Java20Parser::THIS);
      setState(2089);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx)) {
      case 1: {
        setState(2088);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2091);
      typeName();
      setState(2092);
      match(Java20Parser::DOT);
      setState(2093);
      match(Java20Parser::THIS);
      setState(2095);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
      case 1: {
        setState(2094);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2097);
      match(Java20Parser::LPAREN);
      setState(2098);
      expression();
      setState(2099);
      match(Java20Parser::RPAREN);
      setState(2101);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx)) {
      case 1: {
        setState(2100);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2103);
      unqualifiedClassInstanceCreationExpression();
      setState(2105);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
      case 1: {
        setState(2104);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2107);
      expressionName();
      setState(2108);
      match(Java20Parser::DOT);
      setState(2109);
      unqualifiedClassInstanceCreationExpression();
      setState(2111);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
      case 1: {
        setState(2110);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2113);
      arrayCreationExpression();
      setState(2114);
      match(Java20Parser::DOT);
      setState(2115);
      unqualifiedClassInstanceCreationExpression();
      setState(2117);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx)) {
      case 1: {
        setState(2116);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2119);
      arrayCreationExpression();
      setState(2120);
      match(Java20Parser::DOT);
      setState(2121);
      match(Java20Parser::Identifier);
      setState(2123);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx)) {
      case 1: {
        setState(2122);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2125);
      match(Java20Parser::SUPER);
      setState(2126);
      match(Java20Parser::DOT);
      setState(2127);
      match(Java20Parser::Identifier);
      setState(2129);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx)) {
      case 1: {
        setState(2128);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2131);
      typeName();
      setState(2132);
      match(Java20Parser::DOT);
      setState(2133);
      match(Java20Parser::SUPER);
      setState(2134);
      match(Java20Parser::DOT);
      setState(2135);
      match(Java20Parser::Identifier);
      setState(2137);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
      case 1: {
        setState(2136);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(2139);
      expressionName();
      setState(2140);
      match(Java20Parser::LBRACK);
      setState(2141);
      expression();
      setState(2142);
      match(Java20Parser::RBRACK);
      setState(2144);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
      case 1: {
        setState(2143);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(2146);
      arrayCreationExpressionWithInitializer();
      setState(2147);
      match(Java20Parser::LBRACK);
      setState(2148);
      expression();
      setState(2149);
      match(Java20Parser::RBRACK);
      setState(2151);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
      case 1: {
        setState(2150);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(2153);
      methodName();
      setState(2154);
      match(Java20Parser::LPAREN);
      setState(2156);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(2155);
        argumentList();
      }
      setState(2158);
      match(Java20Parser::RPAREN);
      setState(2160);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
      case 1: {
        setState(2159);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(2162);
      typeName();
      setState(2163);
      match(Java20Parser::DOT);
      setState(2165);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2164);
        typeArguments();
      }
      setState(2167);
      match(Java20Parser::Identifier);
      setState(2168);
      match(Java20Parser::LPAREN);
      setState(2170);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(2169);
        argumentList();
      }
      setState(2172);
      match(Java20Parser::RPAREN);
      setState(2174);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx)) {
      case 1: {
        setState(2173);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(2176);
      expressionName();
      setState(2177);
      match(Java20Parser::DOT);
      setState(2179);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2178);
        typeArguments();
      }
      setState(2181);
      match(Java20Parser::Identifier);
      setState(2182);
      match(Java20Parser::LPAREN);
      setState(2184);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(2183);
        argumentList();
      }
      setState(2186);
      match(Java20Parser::RPAREN);
      setState(2188);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx)) {
      case 1: {
        setState(2187);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(2190);
      arrayCreationExpression();
      setState(2191);
      match(Java20Parser::DOT);
      setState(2193);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2192);
        typeArguments();
      }
      setState(2195);
      match(Java20Parser::Identifier);
      setState(2196);
      match(Java20Parser::LPAREN);
      setState(2198);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(2197);
        argumentList();
      }
      setState(2200);
      match(Java20Parser::RPAREN);
      setState(2202);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 249, _ctx)) {
      case 1: {
        setState(2201);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(2204);
      match(Java20Parser::SUPER);
      setState(2205);
      match(Java20Parser::DOT);
      setState(2207);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2206);
        typeArguments();
      }
      setState(2209);
      match(Java20Parser::Identifier);
      setState(2210);
      match(Java20Parser::LPAREN);
      setState(2212);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(2211);
        argumentList();
      }
      setState(2214);
      match(Java20Parser::RPAREN);
      setState(2216);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
      case 1: {
        setState(2215);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(2218);
      typeName();
      setState(2219);
      match(Java20Parser::DOT);
      setState(2220);
      match(Java20Parser::SUPER);
      setState(2221);
      match(Java20Parser::DOT);
      setState(2223);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2222);
        typeArguments();
      }
      setState(2225);
      match(Java20Parser::Identifier);
      setState(2226);
      match(Java20Parser::LPAREN);
      setState(2228);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(2227);
        argumentList();
      }
      setState(2230);
      match(Java20Parser::RPAREN);
      setState(2232);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx)) {
      case 1: {
        setState(2231);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(2234);
      expressionName();
      setState(2235);
      match(Java20Parser::COLONCOLON);
      setState(2237);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2236);
        typeArguments();
      }
      setState(2239);
      match(Java20Parser::Identifier);
      setState(2241);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx)) {
      case 1: {
        setState(2240);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(2243);
      arrayCreationExpression();
      setState(2244);
      match(Java20Parser::COLONCOLON);
      setState(2246);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2245);
        typeArguments();
      }
      setState(2248);
      match(Java20Parser::Identifier);
      setState(2250);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx)) {
      case 1: {
        setState(2249);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(2252);
      referenceType();
      setState(2253);
      match(Java20Parser::COLONCOLON);
      setState(2255);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2254);
        typeArguments();
      }
      setState(2257);
      match(Java20Parser::Identifier);
      setState(2259);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx)) {
      case 1: {
        setState(2258);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(2261);
      match(Java20Parser::SUPER);
      setState(2262);
      match(Java20Parser::COLONCOLON);
      setState(2264);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2263);
        typeArguments();
      }
      setState(2266);
      match(Java20Parser::Identifier);
      setState(2268);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx)) {
      case 1: {
        setState(2267);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(2270);
      typeName();
      setState(2271);
      match(Java20Parser::DOT);
      setState(2272);
      match(Java20Parser::SUPER);
      setState(2273);
      match(Java20Parser::COLONCOLON);
      setState(2275);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2274);
        typeArguments();
      }
      setState(2277);
      match(Java20Parser::Identifier);
      setState(2279);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 265, _ctx)) {
      case 1: {
        setState(2278);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(2281);
      classType();
      setState(2282);
      match(Java20Parser::COLONCOLON);
      setState(2284);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2283);
        typeArguments();
      }
      setState(2286);
      match(Java20Parser::NEW);
      setState(2288);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx)) {
      case 1: {
        setState(2287);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(2290);
      arrayType();
      setState(2291);
      match(Java20Parser::COLONCOLON);
      setState(2292);
      match(Java20Parser::NEW);
      setState(2294);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx)) {
      case 1: {
        setState(2293);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PNNAContext ------------------------------------------------------------------

Java20Parser::PNNAContext::PNNAContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::PNNAContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::UnqualifiedClassInstanceCreationExpressionContext* Java20Parser::PNNAContext::unqualifiedClassInstanceCreationExpression() {
  return getRuleContext<Java20Parser::UnqualifiedClassInstanceCreationExpressionContext>(0);
}

Java20Parser::PNNAContext* Java20Parser::PNNAContext::pNNA() {
  return getRuleContext<Java20Parser::PNNAContext>(0);
}

tree::TerminalNode* Java20Parser::PNNAContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::PNNAContext::LBRACK() {
  return getToken(Java20Parser::LBRACK, 0);
}

Java20Parser::ExpressionContext* Java20Parser::PNNAContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::PNNAContext::RBRACK() {
  return getToken(Java20Parser::RBRACK, 0);
}

tree::TerminalNode* Java20Parser::PNNAContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

tree::TerminalNode* Java20Parser::PNNAContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::TypeArgumentsContext* Java20Parser::PNNAContext::typeArguments() {
  return getRuleContext<Java20Parser::TypeArgumentsContext>(0);
}

Java20Parser::ArgumentListContext* Java20Parser::PNNAContext::argumentList() {
  return getRuleContext<Java20Parser::ArgumentListContext>(0);
}

tree::TerminalNode* Java20Parser::PNNAContext::COLONCOLON() {
  return getToken(Java20Parser::COLONCOLON, 0);
}


size_t Java20Parser::PNNAContext::getRuleIndex() const {
  return Java20Parser::RulePNNA;
}


std::any Java20Parser::PNNAContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPNNA(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PNNAContext* Java20Parser::pNNA() {
  PNNAContext *_localctx = _tracker.createInstance<PNNAContext>(_ctx, getState());
  enterRule(_localctx, 394, Java20Parser::RulePNNA);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2335);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2298);
      match(Java20Parser::DOT);
      setState(2299);
      unqualifiedClassInstanceCreationExpression();
      setState(2301);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 270, _ctx)) {
      case 1: {
        setState(2300);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2303);
      match(Java20Parser::DOT);
      setState(2304);
      match(Java20Parser::Identifier);
      setState(2306);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 271, _ctx)) {
      case 1: {
        setState(2305);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2308);
      match(Java20Parser::LBRACK);
      setState(2309);
      expression();
      setState(2310);
      match(Java20Parser::RBRACK);
      setState(2312);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 272, _ctx)) {
      case 1: {
        setState(2311);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2314);
      match(Java20Parser::DOT);
      setState(2316);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2315);
        typeArguments();
      }
      setState(2318);
      match(Java20Parser::Identifier);
      setState(2319);
      match(Java20Parser::LPAREN);
      setState(2321);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(2320);
        argumentList();
      }
      setState(2323);
      match(Java20Parser::RPAREN);
      setState(2325);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
      case 1: {
        setState(2324);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2327);
      match(Java20Parser::COLONCOLON);
      setState(2329);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2328);
        typeArguments();
      }
      setState(2331);
      match(Java20Parser::Identifier);
      setState(2333);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx)) {
      case 1: {
        setState(2332);
        pNNA();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassLiteralContext ------------------------------------------------------------------

Java20Parser::ClassLiteralContext::ClassLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::TypeNameContext* Java20Parser::ClassLiteralContext::typeName() {
  return getRuleContext<Java20Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java20Parser::ClassLiteralContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

tree::TerminalNode* Java20Parser::ClassLiteralContext::CLASS() {
  return getToken(Java20Parser::CLASS, 0);
}

std::vector<tree::TerminalNode *> Java20Parser::ClassLiteralContext::LBRACK() {
  return getTokens(Java20Parser::LBRACK);
}

tree::TerminalNode* Java20Parser::ClassLiteralContext::LBRACK(size_t i) {
  return getToken(Java20Parser::LBRACK, i);
}

std::vector<tree::TerminalNode *> Java20Parser::ClassLiteralContext::RBRACK() {
  return getTokens(Java20Parser::RBRACK);
}

tree::TerminalNode* Java20Parser::ClassLiteralContext::RBRACK(size_t i) {
  return getToken(Java20Parser::RBRACK, i);
}

Java20Parser::NumericTypeContext* Java20Parser::ClassLiteralContext::numericType() {
  return getRuleContext<Java20Parser::NumericTypeContext>(0);
}

tree::TerminalNode* Java20Parser::ClassLiteralContext::BOOLEAN() {
  return getToken(Java20Parser::BOOLEAN, 0);
}

tree::TerminalNode* Java20Parser::ClassLiteralContext::VOID() {
  return getToken(Java20Parser::VOID, 0);
}


size_t Java20Parser::ClassLiteralContext::getRuleIndex() const {
  return Java20Parser::RuleClassLiteral;
}


std::any Java20Parser::ClassLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitClassLiteral(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ClassLiteralContext* Java20Parser::classLiteral() {
  ClassLiteralContext *_localctx = _tracker.createInstance<ClassLiteralContext>(_ctx, getState());
  enterRule(_localctx, 396, Java20Parser::RuleClassLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2372);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(2337);
        typeName();
        setState(2342);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java20Parser::LBRACK) {
          setState(2338);
          match(Java20Parser::LBRACK);
          setState(2339);
          match(Java20Parser::RBRACK);
          setState(2344);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2345);
        match(Java20Parser::DOT);
        setState(2346);
        match(Java20Parser::CLASS);
        break;
      }

      case Java20Parser::BYTE:
      case Java20Parser::CHAR:
      case Java20Parser::DOUBLE:
      case Java20Parser::FLOAT:
      case Java20Parser::INT:
      case Java20Parser::LONG:
      case Java20Parser::SHORT: {
        enterOuterAlt(_localctx, 2);
        setState(2348);
        numericType();
        setState(2353);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java20Parser::LBRACK) {
          setState(2349);
          match(Java20Parser::LBRACK);
          setState(2350);
          match(Java20Parser::RBRACK);
          setState(2355);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2356);
        match(Java20Parser::DOT);
        setState(2357);
        match(Java20Parser::CLASS);
        break;
      }

      case Java20Parser::BOOLEAN: {
        enterOuterAlt(_localctx, 3);
        setState(2359);
        match(Java20Parser::BOOLEAN);
        setState(2364);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Java20Parser::LBRACK) {
          setState(2360);
          match(Java20Parser::LBRACK);
          setState(2361);
          match(Java20Parser::RBRACK);
          setState(2366);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2367);
        match(Java20Parser::DOT);
        setState(2368);
        match(Java20Parser::CLASS);
        break;
      }

      case Java20Parser::VOID: {
        enterOuterAlt(_localctx, 4);
        setState(2369);
        match(Java20Parser::VOID);
        setState(2370);
        match(Java20Parser::DOT);
        setState(2371);
        match(Java20Parser::CLASS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassInstanceCreationExpressionContext ------------------------------------------------------------------

Java20Parser::ClassInstanceCreationExpressionContext::ClassInstanceCreationExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnqualifiedClassInstanceCreationExpressionContext* Java20Parser::ClassInstanceCreationExpressionContext::unqualifiedClassInstanceCreationExpression() {
  return getRuleContext<Java20Parser::UnqualifiedClassInstanceCreationExpressionContext>(0);
}

Java20Parser::ExpressionNameContext* Java20Parser::ClassInstanceCreationExpressionContext::expressionName() {
  return getRuleContext<Java20Parser::ExpressionNameContext>(0);
}

tree::TerminalNode* Java20Parser::ClassInstanceCreationExpressionContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::PrimaryContext* Java20Parser::ClassInstanceCreationExpressionContext::primary() {
  return getRuleContext<Java20Parser::PrimaryContext>(0);
}


size_t Java20Parser::ClassInstanceCreationExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleClassInstanceCreationExpression;
}


std::any Java20Parser::ClassInstanceCreationExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitClassInstanceCreationExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ClassInstanceCreationExpressionContext* Java20Parser::classInstanceCreationExpression() {
  ClassInstanceCreationExpressionContext *_localctx = _tracker.createInstance<ClassInstanceCreationExpressionContext>(_ctx, getState());
  enterRule(_localctx, 398, Java20Parser::RuleClassInstanceCreationExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2383);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2374);
      unqualifiedClassInstanceCreationExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2375);
      expressionName();
      setState(2376);
      match(Java20Parser::DOT);
      setState(2377);
      unqualifiedClassInstanceCreationExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2379);
      primary();
      setState(2380);
      match(Java20Parser::DOT);
      setState(2381);
      unqualifiedClassInstanceCreationExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnqualifiedClassInstanceCreationExpressionContext ------------------------------------------------------------------

Java20Parser::UnqualifiedClassInstanceCreationExpressionContext::UnqualifiedClassInstanceCreationExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::UnqualifiedClassInstanceCreationExpressionContext::NEW() {
  return getToken(Java20Parser::NEW, 0);
}

Java20Parser::ClassOrInterfaceTypeToInstantiateContext* Java20Parser::UnqualifiedClassInstanceCreationExpressionContext::classOrInterfaceTypeToInstantiate() {
  return getRuleContext<Java20Parser::ClassOrInterfaceTypeToInstantiateContext>(0);
}

tree::TerminalNode* Java20Parser::UnqualifiedClassInstanceCreationExpressionContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

tree::TerminalNode* Java20Parser::UnqualifiedClassInstanceCreationExpressionContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::TypeArgumentsContext* Java20Parser::UnqualifiedClassInstanceCreationExpressionContext::typeArguments() {
  return getRuleContext<Java20Parser::TypeArgumentsContext>(0);
}

Java20Parser::ArgumentListContext* Java20Parser::UnqualifiedClassInstanceCreationExpressionContext::argumentList() {
  return getRuleContext<Java20Parser::ArgumentListContext>(0);
}

Java20Parser::ClassBodyContext* Java20Parser::UnqualifiedClassInstanceCreationExpressionContext::classBody() {
  return getRuleContext<Java20Parser::ClassBodyContext>(0);
}


size_t Java20Parser::UnqualifiedClassInstanceCreationExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleUnqualifiedClassInstanceCreationExpression;
}


std::any Java20Parser::UnqualifiedClassInstanceCreationExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitUnqualifiedClassInstanceCreationExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::UnqualifiedClassInstanceCreationExpressionContext* Java20Parser::unqualifiedClassInstanceCreationExpression() {
  UnqualifiedClassInstanceCreationExpressionContext *_localctx = _tracker.createInstance<UnqualifiedClassInstanceCreationExpressionContext>(_ctx, getState());
  enterRule(_localctx, 400, Java20Parser::RuleUnqualifiedClassInstanceCreationExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2385);
    match(Java20Parser::NEW);
    setState(2387);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::LT) {
      setState(2386);
      typeArguments();
    }
    setState(2389);
    classOrInterfaceTypeToInstantiate();
    setState(2390);
    match(Java20Parser::LPAREN);
    setState(2392);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
      setState(2391);
      argumentList();
    }
    setState(2394);
    match(Java20Parser::RPAREN);
    setState(2396);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 286, _ctx)) {
    case 1: {
      setState(2395);
      classBody();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassOrInterfaceTypeToInstantiateContext ------------------------------------------------------------------

Java20Parser::ClassOrInterfaceTypeToInstantiateContext::ClassOrInterfaceTypeToInstantiateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Java20Parser::ClassOrInterfaceTypeToInstantiateContext::Identifier() {
  return getTokens(Java20Parser::Identifier);
}

tree::TerminalNode* Java20Parser::ClassOrInterfaceTypeToInstantiateContext::Identifier(size_t i) {
  return getToken(Java20Parser::Identifier, i);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::ClassOrInterfaceTypeToInstantiateContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::ClassOrInterfaceTypeToInstantiateContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::ClassOrInterfaceTypeToInstantiateContext::DOT() {
  return getTokens(Java20Parser::DOT);
}

tree::TerminalNode* Java20Parser::ClassOrInterfaceTypeToInstantiateContext::DOT(size_t i) {
  return getToken(Java20Parser::DOT, i);
}

Java20Parser::TypeArgumentsOrDiamondContext* Java20Parser::ClassOrInterfaceTypeToInstantiateContext::typeArgumentsOrDiamond() {
  return getRuleContext<Java20Parser::TypeArgumentsOrDiamondContext>(0);
}


size_t Java20Parser::ClassOrInterfaceTypeToInstantiateContext::getRuleIndex() const {
  return Java20Parser::RuleClassOrInterfaceTypeToInstantiate;
}


std::any Java20Parser::ClassOrInterfaceTypeToInstantiateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitClassOrInterfaceTypeToInstantiate(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ClassOrInterfaceTypeToInstantiateContext* Java20Parser::classOrInterfaceTypeToInstantiate() {
  ClassOrInterfaceTypeToInstantiateContext *_localctx = _tracker.createInstance<ClassOrInterfaceTypeToInstantiateContext>(_ctx, getState());
  enterRule(_localctx, 402, Java20Parser::RuleClassOrInterfaceTypeToInstantiate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2401);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(2398);
      annotation();
      setState(2403);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2404);
    match(Java20Parser::Identifier);
    setState(2415);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::DOT) {
      setState(2405);
      match(Java20Parser::DOT);
      setState(2409);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::AT) {
        setState(2406);
        annotation();
        setState(2411);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2412);
      match(Java20Parser::Identifier);
      setState(2417);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2419);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Java20Parser::OACA || _la == Java20Parser::LT) {
      setState(2418);
      typeArgumentsOrDiamond();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsOrDiamondContext ------------------------------------------------------------------

Java20Parser::TypeArgumentsOrDiamondContext::TypeArgumentsOrDiamondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::TypeArgumentsContext* Java20Parser::TypeArgumentsOrDiamondContext::typeArguments() {
  return getRuleContext<Java20Parser::TypeArgumentsContext>(0);
}

tree::TerminalNode* Java20Parser::TypeArgumentsOrDiamondContext::OACA() {
  return getToken(Java20Parser::OACA, 0);
}


size_t Java20Parser::TypeArgumentsOrDiamondContext::getRuleIndex() const {
  return Java20Parser::RuleTypeArgumentsOrDiamond;
}


std::any Java20Parser::TypeArgumentsOrDiamondContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitTypeArgumentsOrDiamond(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::TypeArgumentsOrDiamondContext* Java20Parser::typeArgumentsOrDiamond() {
  TypeArgumentsOrDiamondContext *_localctx = _tracker.createInstance<TypeArgumentsOrDiamondContext>(_ctx, getState());
  enterRule(_localctx, 404, Java20Parser::RuleTypeArgumentsOrDiamond);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2423);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::LT: {
        enterOuterAlt(_localctx, 1);
        setState(2421);
        typeArguments();
        break;
      }

      case Java20Parser::OACA: {
        enterOuterAlt(_localctx, 2);
        setState(2422);
        match(Java20Parser::OACA);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayCreationExpressionContext ------------------------------------------------------------------

Java20Parser::ArrayCreationExpressionContext::ArrayCreationExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ArrayCreationExpressionWithoutInitializerContext* Java20Parser::ArrayCreationExpressionContext::arrayCreationExpressionWithoutInitializer() {
  return getRuleContext<Java20Parser::ArrayCreationExpressionWithoutInitializerContext>(0);
}

Java20Parser::ArrayCreationExpressionWithInitializerContext* Java20Parser::ArrayCreationExpressionContext::arrayCreationExpressionWithInitializer() {
  return getRuleContext<Java20Parser::ArrayCreationExpressionWithInitializerContext>(0);
}


size_t Java20Parser::ArrayCreationExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleArrayCreationExpression;
}


std::any Java20Parser::ArrayCreationExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitArrayCreationExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ArrayCreationExpressionContext* Java20Parser::arrayCreationExpression() {
  ArrayCreationExpressionContext *_localctx = _tracker.createInstance<ArrayCreationExpressionContext>(_ctx, getState());
  enterRule(_localctx, 406, Java20Parser::RuleArrayCreationExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2427);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2425);
      arrayCreationExpressionWithoutInitializer();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2426);
      arrayCreationExpressionWithInitializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayCreationExpressionWithoutInitializerContext ------------------------------------------------------------------

Java20Parser::ArrayCreationExpressionWithoutInitializerContext::ArrayCreationExpressionWithoutInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ArrayCreationExpressionWithoutInitializerContext::NEW() {
  return getToken(Java20Parser::NEW, 0);
}

Java20Parser::PrimitiveTypeContext* Java20Parser::ArrayCreationExpressionWithoutInitializerContext::primitiveType() {
  return getRuleContext<Java20Parser::PrimitiveTypeContext>(0);
}

Java20Parser::DimExprsContext* Java20Parser::ArrayCreationExpressionWithoutInitializerContext::dimExprs() {
  return getRuleContext<Java20Parser::DimExprsContext>(0);
}

Java20Parser::DimsContext* Java20Parser::ArrayCreationExpressionWithoutInitializerContext::dims() {
  return getRuleContext<Java20Parser::DimsContext>(0);
}

Java20Parser::ClassTypeContext* Java20Parser::ArrayCreationExpressionWithoutInitializerContext::classType() {
  return getRuleContext<Java20Parser::ClassTypeContext>(0);
}


size_t Java20Parser::ArrayCreationExpressionWithoutInitializerContext::getRuleIndex() const {
  return Java20Parser::RuleArrayCreationExpressionWithoutInitializer;
}


std::any Java20Parser::ArrayCreationExpressionWithoutInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitArrayCreationExpressionWithoutInitializer(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ArrayCreationExpressionWithoutInitializerContext* Java20Parser::arrayCreationExpressionWithoutInitializer() {
  ArrayCreationExpressionWithoutInitializerContext *_localctx = _tracker.createInstance<ArrayCreationExpressionWithoutInitializerContext>(_ctx, getState());
  enterRule(_localctx, 408, Java20Parser::RuleArrayCreationExpressionWithoutInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2441);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2429);
      match(Java20Parser::NEW);
      setState(2430);
      primitiveType();
      setState(2431);
      dimExprs();
      setState(2433);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx)) {
      case 1: {
        setState(2432);
        dims();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2435);
      match(Java20Parser::NEW);
      setState(2436);
      classType();
      setState(2437);
      dimExprs();
      setState(2439);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx)) {
      case 1: {
        setState(2438);
        dims();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayCreationExpressionWithInitializerContext ------------------------------------------------------------------

Java20Parser::ArrayCreationExpressionWithInitializerContext::ArrayCreationExpressionWithInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::ArrayCreationExpressionWithInitializerContext::NEW() {
  return getToken(Java20Parser::NEW, 0);
}

Java20Parser::PrimitiveTypeContext* Java20Parser::ArrayCreationExpressionWithInitializerContext::primitiveType() {
  return getRuleContext<Java20Parser::PrimitiveTypeContext>(0);
}

Java20Parser::DimsContext* Java20Parser::ArrayCreationExpressionWithInitializerContext::dims() {
  return getRuleContext<Java20Parser::DimsContext>(0);
}

Java20Parser::ArrayInitializerContext* Java20Parser::ArrayCreationExpressionWithInitializerContext::arrayInitializer() {
  return getRuleContext<Java20Parser::ArrayInitializerContext>(0);
}

Java20Parser::ClassOrInterfaceTypeContext* Java20Parser::ArrayCreationExpressionWithInitializerContext::classOrInterfaceType() {
  return getRuleContext<Java20Parser::ClassOrInterfaceTypeContext>(0);
}


size_t Java20Parser::ArrayCreationExpressionWithInitializerContext::getRuleIndex() const {
  return Java20Parser::RuleArrayCreationExpressionWithInitializer;
}


std::any Java20Parser::ArrayCreationExpressionWithInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitArrayCreationExpressionWithInitializer(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ArrayCreationExpressionWithInitializerContext* Java20Parser::arrayCreationExpressionWithInitializer() {
  ArrayCreationExpressionWithInitializerContext *_localctx = _tracker.createInstance<ArrayCreationExpressionWithInitializerContext>(_ctx, getState());
  enterRule(_localctx, 410, Java20Parser::RuleArrayCreationExpressionWithInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2453);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2443);
      match(Java20Parser::NEW);
      setState(2444);
      primitiveType();
      setState(2445);
      dims();
      setState(2446);
      arrayInitializer();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2448);
      match(Java20Parser::NEW);
      setState(2449);
      classOrInterfaceType();
      setState(2450);
      dims();
      setState(2451);
      arrayInitializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimExprsContext ------------------------------------------------------------------

Java20Parser::DimExprsContext::DimExprsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::DimExprContext *> Java20Parser::DimExprsContext::dimExpr() {
  return getRuleContexts<Java20Parser::DimExprContext>();
}

Java20Parser::DimExprContext* Java20Parser::DimExprsContext::dimExpr(size_t i) {
  return getRuleContext<Java20Parser::DimExprContext>(i);
}


size_t Java20Parser::DimExprsContext::getRuleIndex() const {
  return Java20Parser::RuleDimExprs;
}


std::any Java20Parser::DimExprsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitDimExprs(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::DimExprsContext* Java20Parser::dimExprs() {
  DimExprsContext *_localctx = _tracker.createInstance<DimExprsContext>(_ctx, getState());
  enterRule(_localctx, 412, Java20Parser::RuleDimExprs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2455);
    dimExpr();
    setState(2459);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2456);
        dimExpr(); 
      }
      setState(2461);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimExprContext ------------------------------------------------------------------

Java20Parser::DimExprContext::DimExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::DimExprContext::LBRACK() {
  return getToken(Java20Parser::LBRACK, 0);
}

Java20Parser::ExpressionContext* Java20Parser::DimExprContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::DimExprContext::RBRACK() {
  return getToken(Java20Parser::RBRACK, 0);
}

std::vector<Java20Parser::AnnotationContext *> Java20Parser::DimExprContext::annotation() {
  return getRuleContexts<Java20Parser::AnnotationContext>();
}

Java20Parser::AnnotationContext* Java20Parser::DimExprContext::annotation(size_t i) {
  return getRuleContext<Java20Parser::AnnotationContext>(i);
}


size_t Java20Parser::DimExprContext::getRuleIndex() const {
  return Java20Parser::RuleDimExpr;
}


std::any Java20Parser::DimExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitDimExpr(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::DimExprContext* Java20Parser::dimExpr() {
  DimExprContext *_localctx = _tracker.createInstance<DimExprContext>(_ctx, getState());
  enterRule(_localctx, 414, Java20Parser::RuleDimExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2465);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::AT) {
      setState(2462);
      annotation();
      setState(2467);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2468);
    match(Java20Parser::LBRACK);
    setState(2469);
    expression();
    setState(2470);
    match(Java20Parser::RBRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayAccessContext ------------------------------------------------------------------

Java20Parser::ArrayAccessContext::ArrayAccessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ExpressionNameContext* Java20Parser::ArrayAccessContext::expressionName() {
  return getRuleContext<Java20Parser::ExpressionNameContext>(0);
}

tree::TerminalNode* Java20Parser::ArrayAccessContext::LBRACK() {
  return getToken(Java20Parser::LBRACK, 0);
}

Java20Parser::ExpressionContext* Java20Parser::ArrayAccessContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::ArrayAccessContext::RBRACK() {
  return getToken(Java20Parser::RBRACK, 0);
}

Java20Parser::PrimaryNoNewArrayContext* Java20Parser::ArrayAccessContext::primaryNoNewArray() {
  return getRuleContext<Java20Parser::PrimaryNoNewArrayContext>(0);
}

Java20Parser::ArrayCreationExpressionWithInitializerContext* Java20Parser::ArrayAccessContext::arrayCreationExpressionWithInitializer() {
  return getRuleContext<Java20Parser::ArrayCreationExpressionWithInitializerContext>(0);
}


size_t Java20Parser::ArrayAccessContext::getRuleIndex() const {
  return Java20Parser::RuleArrayAccess;
}


std::any Java20Parser::ArrayAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitArrayAccess(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ArrayAccessContext* Java20Parser::arrayAccess() {
  ArrayAccessContext *_localctx = _tracker.createInstance<ArrayAccessContext>(_ctx, getState());
  enterRule(_localctx, 416, Java20Parser::RuleArrayAccess);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2487);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2472);
      expressionName();
      setState(2473);
      match(Java20Parser::LBRACK);
      setState(2474);
      expression();
      setState(2475);
      match(Java20Parser::RBRACK);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2477);
      primaryNoNewArray();
      setState(2478);
      match(Java20Parser::LBRACK);
      setState(2479);
      expression();
      setState(2480);
      match(Java20Parser::RBRACK);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2482);
      arrayCreationExpressionWithInitializer();
      setState(2483);
      match(Java20Parser::LBRACK);
      setState(2484);
      expression();
      setState(2485);
      match(Java20Parser::RBRACK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldAccessContext ------------------------------------------------------------------

Java20Parser::FieldAccessContext::FieldAccessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::PrimaryContext* Java20Parser::FieldAccessContext::primary() {
  return getRuleContext<Java20Parser::PrimaryContext>(0);
}

std::vector<tree::TerminalNode *> Java20Parser::FieldAccessContext::DOT() {
  return getTokens(Java20Parser::DOT);
}

tree::TerminalNode* Java20Parser::FieldAccessContext::DOT(size_t i) {
  return getToken(Java20Parser::DOT, i);
}

tree::TerminalNode* Java20Parser::FieldAccessContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

tree::TerminalNode* Java20Parser::FieldAccessContext::SUPER() {
  return getToken(Java20Parser::SUPER, 0);
}

Java20Parser::TypeNameContext* Java20Parser::FieldAccessContext::typeName() {
  return getRuleContext<Java20Parser::TypeNameContext>(0);
}


size_t Java20Parser::FieldAccessContext::getRuleIndex() const {
  return Java20Parser::RuleFieldAccess;
}


std::any Java20Parser::FieldAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitFieldAccess(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::FieldAccessContext* Java20Parser::fieldAccess() {
  FieldAccessContext *_localctx = _tracker.createInstance<FieldAccessContext>(_ctx, getState());
  enterRule(_localctx, 418, Java20Parser::RuleFieldAccess);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2502);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 300, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2489);
      primary();
      setState(2490);
      match(Java20Parser::DOT);
      setState(2491);
      match(Java20Parser::Identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2493);
      match(Java20Parser::SUPER);
      setState(2494);
      match(Java20Parser::DOT);
      setState(2495);
      match(Java20Parser::Identifier);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2496);
      typeName();
      setState(2497);
      match(Java20Parser::DOT);
      setState(2498);
      match(Java20Parser::SUPER);
      setState(2499);
      match(Java20Parser::DOT);
      setState(2500);
      match(Java20Parser::Identifier);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodInvocationContext ------------------------------------------------------------------

Java20Parser::MethodInvocationContext::MethodInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::MethodNameContext* Java20Parser::MethodInvocationContext::methodName() {
  return getRuleContext<Java20Parser::MethodNameContext>(0);
}

tree::TerminalNode* Java20Parser::MethodInvocationContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

tree::TerminalNode* Java20Parser::MethodInvocationContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::ArgumentListContext* Java20Parser::MethodInvocationContext::argumentList() {
  return getRuleContext<Java20Parser::ArgumentListContext>(0);
}

Java20Parser::TypeNameContext* Java20Parser::MethodInvocationContext::typeName() {
  return getRuleContext<Java20Parser::TypeNameContext>(0);
}

std::vector<tree::TerminalNode *> Java20Parser::MethodInvocationContext::DOT() {
  return getTokens(Java20Parser::DOT);
}

tree::TerminalNode* Java20Parser::MethodInvocationContext::DOT(size_t i) {
  return getToken(Java20Parser::DOT, i);
}

tree::TerminalNode* Java20Parser::MethodInvocationContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

Java20Parser::TypeArgumentsContext* Java20Parser::MethodInvocationContext::typeArguments() {
  return getRuleContext<Java20Parser::TypeArgumentsContext>(0);
}

Java20Parser::ExpressionNameContext* Java20Parser::MethodInvocationContext::expressionName() {
  return getRuleContext<Java20Parser::ExpressionNameContext>(0);
}

Java20Parser::PrimaryContext* Java20Parser::MethodInvocationContext::primary() {
  return getRuleContext<Java20Parser::PrimaryContext>(0);
}

tree::TerminalNode* Java20Parser::MethodInvocationContext::SUPER() {
  return getToken(Java20Parser::SUPER, 0);
}


size_t Java20Parser::MethodInvocationContext::getRuleIndex() const {
  return Java20Parser::RuleMethodInvocation;
}


std::any Java20Parser::MethodInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitMethodInvocation(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::MethodInvocationContext* Java20Parser::methodInvocation() {
  MethodInvocationContext *_localctx = _tracker.createInstance<MethodInvocationContext>(_ctx, getState());
  enterRule(_localctx, 420, Java20Parser::RuleMethodInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2572);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2504);
      methodName();
      setState(2505);
      match(Java20Parser::LPAREN);
      setState(2507);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(2506);
        argumentList();
      }
      setState(2509);
      match(Java20Parser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2511);
      typeName();
      setState(2512);
      match(Java20Parser::DOT);
      setState(2514);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2513);
        typeArguments();
      }
      setState(2516);
      match(Java20Parser::Identifier);
      setState(2517);
      match(Java20Parser::LPAREN);
      setState(2519);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(2518);
        argumentList();
      }
      setState(2521);
      match(Java20Parser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2523);
      expressionName();
      setState(2524);
      match(Java20Parser::DOT);
      setState(2526);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2525);
        typeArguments();
      }
      setState(2528);
      match(Java20Parser::Identifier);
      setState(2529);
      match(Java20Parser::LPAREN);
      setState(2531);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(2530);
        argumentList();
      }
      setState(2533);
      match(Java20Parser::RPAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2535);
      primary();
      setState(2536);
      match(Java20Parser::DOT);
      setState(2538);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2537);
        typeArguments();
      }
      setState(2540);
      match(Java20Parser::Identifier);
      setState(2541);
      match(Java20Parser::LPAREN);
      setState(2543);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(2542);
        argumentList();
      }
      setState(2545);
      match(Java20Parser::RPAREN);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2547);
      match(Java20Parser::SUPER);
      setState(2548);
      match(Java20Parser::DOT);
      setState(2550);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2549);
        typeArguments();
      }
      setState(2552);
      match(Java20Parser::Identifier);
      setState(2553);
      match(Java20Parser::LPAREN);
      setState(2555);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(2554);
        argumentList();
      }
      setState(2557);
      match(Java20Parser::RPAREN);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2558);
      typeName();
      setState(2559);
      match(Java20Parser::DOT);
      setState(2560);
      match(Java20Parser::SUPER);
      setState(2561);
      match(Java20Parser::DOT);
      setState(2563);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2562);
        typeArguments();
      }
      setState(2565);
      match(Java20Parser::Identifier);
      setState(2566);
      match(Java20Parser::LPAREN);
      setState(2568);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1603651042876063744) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 288232437939441649) != 0)) {
        setState(2567);
        argumentList();
      }
      setState(2570);
      match(Java20Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentListContext ------------------------------------------------------------------

Java20Parser::ArgumentListContext::ArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::ExpressionContext *> Java20Parser::ArgumentListContext::expression() {
  return getRuleContexts<Java20Parser::ExpressionContext>();
}

Java20Parser::ExpressionContext* Java20Parser::ArgumentListContext::expression(size_t i) {
  return getRuleContext<Java20Parser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::ArgumentListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::ArgumentListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}


size_t Java20Parser::ArgumentListContext::getRuleIndex() const {
  return Java20Parser::RuleArgumentList;
}


std::any Java20Parser::ArgumentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitArgumentList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ArgumentListContext* Java20Parser::argumentList() {
  ArgumentListContext *_localctx = _tracker.createInstance<ArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 422, Java20Parser::RuleArgumentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2574);
    expression();
    setState(2579);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Java20Parser::COMMA) {
      setState(2575);
      match(Java20Parser::COMMA);
      setState(2576);
      expression();
      setState(2581);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodReferenceContext ------------------------------------------------------------------

Java20Parser::MethodReferenceContext::MethodReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ExpressionNameContext* Java20Parser::MethodReferenceContext::expressionName() {
  return getRuleContext<Java20Parser::ExpressionNameContext>(0);
}

tree::TerminalNode* Java20Parser::MethodReferenceContext::COLONCOLON() {
  return getToken(Java20Parser::COLONCOLON, 0);
}

tree::TerminalNode* Java20Parser::MethodReferenceContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}

Java20Parser::TypeArgumentsContext* Java20Parser::MethodReferenceContext::typeArguments() {
  return getRuleContext<Java20Parser::TypeArgumentsContext>(0);
}

Java20Parser::PrimaryContext* Java20Parser::MethodReferenceContext::primary() {
  return getRuleContext<Java20Parser::PrimaryContext>(0);
}

Java20Parser::ReferenceTypeContext* Java20Parser::MethodReferenceContext::referenceType() {
  return getRuleContext<Java20Parser::ReferenceTypeContext>(0);
}

tree::TerminalNode* Java20Parser::MethodReferenceContext::SUPER() {
  return getToken(Java20Parser::SUPER, 0);
}

Java20Parser::TypeNameContext* Java20Parser::MethodReferenceContext::typeName() {
  return getRuleContext<Java20Parser::TypeNameContext>(0);
}

tree::TerminalNode* Java20Parser::MethodReferenceContext::DOT() {
  return getToken(Java20Parser::DOT, 0);
}

Java20Parser::ClassTypeContext* Java20Parser::MethodReferenceContext::classType() {
  return getRuleContext<Java20Parser::ClassTypeContext>(0);
}

tree::TerminalNode* Java20Parser::MethodReferenceContext::NEW() {
  return getToken(Java20Parser::NEW, 0);
}

Java20Parser::ArrayTypeContext* Java20Parser::MethodReferenceContext::arrayType() {
  return getRuleContext<Java20Parser::ArrayTypeContext>(0);
}


size_t Java20Parser::MethodReferenceContext::getRuleIndex() const {
  return Java20Parser::RuleMethodReference;
}


std::any Java20Parser::MethodReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitMethodReference(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::MethodReferenceContext* Java20Parser::methodReference() {
  MethodReferenceContext *_localctx = _tracker.createInstance<MethodReferenceContext>(_ctx, getState());
  enterRule(_localctx, 424, Java20Parser::RuleMethodReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2629);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2582);
      expressionName();
      setState(2583);
      match(Java20Parser::COLONCOLON);
      setState(2585);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2584);
        typeArguments();
      }
      setState(2587);
      match(Java20Parser::Identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2589);
      primary();
      setState(2590);
      match(Java20Parser::COLONCOLON);
      setState(2592);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2591);
        typeArguments();
      }
      setState(2594);
      match(Java20Parser::Identifier);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2596);
      referenceType();
      setState(2597);
      match(Java20Parser::COLONCOLON);
      setState(2599);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2598);
        typeArguments();
      }
      setState(2601);
      match(Java20Parser::Identifier);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2603);
      match(Java20Parser::SUPER);
      setState(2604);
      match(Java20Parser::COLONCOLON);
      setState(2606);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2605);
        typeArguments();
      }
      setState(2608);
      match(Java20Parser::Identifier);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2609);
      typeName();
      setState(2610);
      match(Java20Parser::DOT);
      setState(2611);
      match(Java20Parser::SUPER);
      setState(2612);
      match(Java20Parser::COLONCOLON);
      setState(2614);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2613);
        typeArguments();
      }
      setState(2616);
      match(Java20Parser::Identifier);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2618);
      classType();
      setState(2619);
      match(Java20Parser::COLONCOLON);
      setState(2621);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Java20Parser::LT) {
        setState(2620);
        typeArguments();
      }
      setState(2623);
      match(Java20Parser::NEW);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2625);
      arrayType();
      setState(2626);
      match(Java20Parser::COLONCOLON);
      setState(2627);
      match(Java20Parser::NEW);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExpressionContext ------------------------------------------------------------------

Java20Parser::PostfixExpressionContext::PostfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::PrimaryContext* Java20Parser::PostfixExpressionContext::primary() {
  return getRuleContext<Java20Parser::PrimaryContext>(0);
}

Java20Parser::PfEContext* Java20Parser::PostfixExpressionContext::pfE() {
  return getRuleContext<Java20Parser::PfEContext>(0);
}

Java20Parser::ExpressionNameContext* Java20Parser::PostfixExpressionContext::expressionName() {
  return getRuleContext<Java20Parser::ExpressionNameContext>(0);
}


size_t Java20Parser::PostfixExpressionContext::getRuleIndex() const {
  return Java20Parser::RulePostfixExpression;
}


std::any Java20Parser::PostfixExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPostfixExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PostfixExpressionContext* Java20Parser::postfixExpression() {
  PostfixExpressionContext *_localctx = _tracker.createInstance<PostfixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 426, Java20Parser::RulePostfixExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2639);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2631);
      primary();
      setState(2633);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx)) {
      case 1: {
        setState(2632);
        pfE();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2635);
      expressionName();
      setState(2637);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx)) {
      case 1: {
        setState(2636);
        pfE();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PfEContext ------------------------------------------------------------------

Java20Parser::PfEContext::PfEContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::PfEContext::INC() {
  return getToken(Java20Parser::INC, 0);
}

Java20Parser::PfEContext* Java20Parser::PfEContext::pfE() {
  return getRuleContext<Java20Parser::PfEContext>(0);
}

tree::TerminalNode* Java20Parser::PfEContext::DEC() {
  return getToken(Java20Parser::DEC, 0);
}


size_t Java20Parser::PfEContext::getRuleIndex() const {
  return Java20Parser::RulePfE;
}


std::any Java20Parser::PfEContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPfE(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PfEContext* Java20Parser::pfE() {
  PfEContext *_localctx = _tracker.createInstance<PfEContext>(_ctx, getState());
  enterRule(_localctx, 428, Java20Parser::RulePfE);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2649);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::INC: {
        enterOuterAlt(_localctx, 1);
        setState(2641);
        match(Java20Parser::INC);
        setState(2643);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx)) {
        case 1: {
          setState(2642);
          pfE();
          break;
        }

        default:
          break;
        }
        break;
      }

      case Java20Parser::DEC: {
        enterOuterAlt(_localctx, 2);
        setState(2645);
        match(Java20Parser::DEC);
        setState(2647);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx)) {
        case 1: {
          setState(2646);
          pfE();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostIncrementExpressionContext ------------------------------------------------------------------

Java20Parser::PostIncrementExpressionContext::PostIncrementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::PostfixExpressionContext* Java20Parser::PostIncrementExpressionContext::postfixExpression() {
  return getRuleContext<Java20Parser::PostfixExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::PostIncrementExpressionContext::INC() {
  return getToken(Java20Parser::INC, 0);
}


size_t Java20Parser::PostIncrementExpressionContext::getRuleIndex() const {
  return Java20Parser::RulePostIncrementExpression;
}


std::any Java20Parser::PostIncrementExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPostIncrementExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PostIncrementExpressionContext* Java20Parser::postIncrementExpression() {
  PostIncrementExpressionContext *_localctx = _tracker.createInstance<PostIncrementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 430, Java20Parser::RulePostIncrementExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2651);
    postfixExpression();
    setState(2652);
    match(Java20Parser::INC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostDecrementExpressionContext ------------------------------------------------------------------

Java20Parser::PostDecrementExpressionContext::PostDecrementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::PostfixExpressionContext* Java20Parser::PostDecrementExpressionContext::postfixExpression() {
  return getRuleContext<Java20Parser::PostfixExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::PostDecrementExpressionContext::DEC() {
  return getToken(Java20Parser::DEC, 0);
}


size_t Java20Parser::PostDecrementExpressionContext::getRuleIndex() const {
  return Java20Parser::RulePostDecrementExpression;
}


std::any Java20Parser::PostDecrementExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPostDecrementExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PostDecrementExpressionContext* Java20Parser::postDecrementExpression() {
  PostDecrementExpressionContext *_localctx = _tracker.createInstance<PostDecrementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 432, Java20Parser::RulePostDecrementExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2654);
    postfixExpression();
    setState(2655);
    match(Java20Parser::DEC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

Java20Parser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::PreIncrementExpressionContext* Java20Parser::UnaryExpressionContext::preIncrementExpression() {
  return getRuleContext<Java20Parser::PreIncrementExpressionContext>(0);
}

Java20Parser::PreDecrementExpressionContext* Java20Parser::UnaryExpressionContext::preDecrementExpression() {
  return getRuleContext<Java20Parser::PreDecrementExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::UnaryExpressionContext::ADD() {
  return getToken(Java20Parser::ADD, 0);
}

Java20Parser::UnaryExpressionContext* Java20Parser::UnaryExpressionContext::unaryExpression() {
  return getRuleContext<Java20Parser::UnaryExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::UnaryExpressionContext::SUB() {
  return getToken(Java20Parser::SUB, 0);
}

Java20Parser::UnaryExpressionNotPlusMinusContext* Java20Parser::UnaryExpressionContext::unaryExpressionNotPlusMinus() {
  return getRuleContext<Java20Parser::UnaryExpressionNotPlusMinusContext>(0);
}


size_t Java20Parser::UnaryExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleUnaryExpression;
}


std::any Java20Parser::UnaryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitUnaryExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::UnaryExpressionContext* Java20Parser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 434, Java20Parser::RuleUnaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2664);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::INC: {
        enterOuterAlt(_localctx, 1);
        setState(2657);
        preIncrementExpression();
        break;
      }

      case Java20Parser::DEC: {
        enterOuterAlt(_localctx, 2);
        setState(2658);
        preDecrementExpression();
        break;
      }

      case Java20Parser::ADD: {
        enterOuterAlt(_localctx, 3);
        setState(2659);
        match(Java20Parser::ADD);
        setState(2660);
        unaryExpression();
        break;
      }

      case Java20Parser::SUB: {
        enterOuterAlt(_localctx, 4);
        setState(2661);
        match(Java20Parser::SUB);
        setState(2662);
        unaryExpression();
        break;
      }

      case Java20Parser::BOOLEAN:
      case Java20Parser::BYTE:
      case Java20Parser::CHAR:
      case Java20Parser::DOUBLE:
      case Java20Parser::FLOAT:
      case Java20Parser::INT:
      case Java20Parser::LONG:
      case Java20Parser::NEW:
      case Java20Parser::SHORT:
      case Java20Parser::SUPER:
      case Java20Parser::SWITCH:
      case Java20Parser::THIS:
      case Java20Parser::VOID:
      case Java20Parser::IntegerLiteral:
      case Java20Parser::FloatingPointLiteral:
      case Java20Parser::BooleanLiteral:
      case Java20Parser::CharacterLiteral:
      case Java20Parser::StringLiteral:
      case Java20Parser::TextBlock:
      case Java20Parser::NullLiteral:
      case Java20Parser::LPAREN:
      case Java20Parser::AT:
      case Java20Parser::BANG:
      case Java20Parser::TILDE:
      case Java20Parser::Identifier: {
        enterOuterAlt(_localctx, 5);
        setState(2663);
        unaryExpressionNotPlusMinus();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PreIncrementExpressionContext ------------------------------------------------------------------

Java20Parser::PreIncrementExpressionContext::PreIncrementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::PreIncrementExpressionContext::INC() {
  return getToken(Java20Parser::INC, 0);
}

Java20Parser::UnaryExpressionContext* Java20Parser::PreIncrementExpressionContext::unaryExpression() {
  return getRuleContext<Java20Parser::UnaryExpressionContext>(0);
}


size_t Java20Parser::PreIncrementExpressionContext::getRuleIndex() const {
  return Java20Parser::RulePreIncrementExpression;
}


std::any Java20Parser::PreIncrementExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPreIncrementExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PreIncrementExpressionContext* Java20Parser::preIncrementExpression() {
  PreIncrementExpressionContext *_localctx = _tracker.createInstance<PreIncrementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 436, Java20Parser::RulePreIncrementExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2666);
    match(Java20Parser::INC);
    setState(2667);
    unaryExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PreDecrementExpressionContext ------------------------------------------------------------------

Java20Parser::PreDecrementExpressionContext::PreDecrementExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::PreDecrementExpressionContext::DEC() {
  return getToken(Java20Parser::DEC, 0);
}

Java20Parser::UnaryExpressionContext* Java20Parser::PreDecrementExpressionContext::unaryExpression() {
  return getRuleContext<Java20Parser::UnaryExpressionContext>(0);
}


size_t Java20Parser::PreDecrementExpressionContext::getRuleIndex() const {
  return Java20Parser::RulePreDecrementExpression;
}


std::any Java20Parser::PreDecrementExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitPreDecrementExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::PreDecrementExpressionContext* Java20Parser::preDecrementExpression() {
  PreDecrementExpressionContext *_localctx = _tracker.createInstance<PreDecrementExpressionContext>(_ctx, getState());
  enterRule(_localctx, 438, Java20Parser::RulePreDecrementExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2669);
    match(Java20Parser::DEC);
    setState(2670);
    unaryExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionNotPlusMinusContext ------------------------------------------------------------------

Java20Parser::UnaryExpressionNotPlusMinusContext::UnaryExpressionNotPlusMinusContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::PostfixExpressionContext* Java20Parser::UnaryExpressionNotPlusMinusContext::postfixExpression() {
  return getRuleContext<Java20Parser::PostfixExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::UnaryExpressionNotPlusMinusContext::TILDE() {
  return getToken(Java20Parser::TILDE, 0);
}

Java20Parser::UnaryExpressionContext* Java20Parser::UnaryExpressionNotPlusMinusContext::unaryExpression() {
  return getRuleContext<Java20Parser::UnaryExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::UnaryExpressionNotPlusMinusContext::BANG() {
  return getToken(Java20Parser::BANG, 0);
}

Java20Parser::CastExpressionContext* Java20Parser::UnaryExpressionNotPlusMinusContext::castExpression() {
  return getRuleContext<Java20Parser::CastExpressionContext>(0);
}

Java20Parser::SwitchExpressionContext* Java20Parser::UnaryExpressionNotPlusMinusContext::switchExpression() {
  return getRuleContext<Java20Parser::SwitchExpressionContext>(0);
}


size_t Java20Parser::UnaryExpressionNotPlusMinusContext::getRuleIndex() const {
  return Java20Parser::RuleUnaryExpressionNotPlusMinus;
}


std::any Java20Parser::UnaryExpressionNotPlusMinusContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitUnaryExpressionNotPlusMinus(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::UnaryExpressionNotPlusMinusContext* Java20Parser::unaryExpressionNotPlusMinus() {
  UnaryExpressionNotPlusMinusContext *_localctx = _tracker.createInstance<UnaryExpressionNotPlusMinusContext>(_ctx, getState());
  enterRule(_localctx, 440, Java20Parser::RuleUnaryExpressionNotPlusMinus);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2679);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2672);
      postfixExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2673);
      match(Java20Parser::TILDE);
      setState(2674);
      unaryExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2675);
      match(Java20Parser::BANG);
      setState(2676);
      unaryExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2677);
      castExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2678);
      switchExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastExpressionContext ------------------------------------------------------------------

Java20Parser::CastExpressionContext::CastExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::CastExpressionContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::PrimitiveTypeContext* Java20Parser::CastExpressionContext::primitiveType() {
  return getRuleContext<Java20Parser::PrimitiveTypeContext>(0);
}

tree::TerminalNode* Java20Parser::CastExpressionContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::UnaryExpressionContext* Java20Parser::CastExpressionContext::unaryExpression() {
  return getRuleContext<Java20Parser::UnaryExpressionContext>(0);
}

Java20Parser::ReferenceTypeContext* Java20Parser::CastExpressionContext::referenceType() {
  return getRuleContext<Java20Parser::ReferenceTypeContext>(0);
}

Java20Parser::UnaryExpressionNotPlusMinusContext* Java20Parser::CastExpressionContext::unaryExpressionNotPlusMinus() {
  return getRuleContext<Java20Parser::UnaryExpressionNotPlusMinusContext>(0);
}

std::vector<Java20Parser::AdditionalBoundContext *> Java20Parser::CastExpressionContext::additionalBound() {
  return getRuleContexts<Java20Parser::AdditionalBoundContext>();
}

Java20Parser::AdditionalBoundContext* Java20Parser::CastExpressionContext::additionalBound(size_t i) {
  return getRuleContext<Java20Parser::AdditionalBoundContext>(i);
}

Java20Parser::LambdaExpressionContext* Java20Parser::CastExpressionContext::lambdaExpression() {
  return getRuleContext<Java20Parser::LambdaExpressionContext>(0);
}


size_t Java20Parser::CastExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleCastExpression;
}


std::any Java20Parser::CastExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitCastExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::CastExpressionContext* Java20Parser::castExpression() {
  CastExpressionContext *_localctx = _tracker.createInstance<CastExpressionContext>(_ctx, getState());
  enterRule(_localctx, 442, Java20Parser::RuleCastExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2708);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2681);
      match(Java20Parser::LPAREN);
      setState(2682);
      primitiveType();
      setState(2683);
      match(Java20Parser::RPAREN);
      setState(2684);
      unaryExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2686);
      match(Java20Parser::LPAREN);
      setState(2687);
      referenceType();
      setState(2691);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::BITAND) {
        setState(2688);
        additionalBound();
        setState(2693);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2694);
      match(Java20Parser::RPAREN);
      setState(2695);
      unaryExpressionNotPlusMinus();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2697);
      match(Java20Parser::LPAREN);
      setState(2698);
      referenceType();
      setState(2702);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::BITAND) {
        setState(2699);
        additionalBound();
        setState(2704);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2705);
      match(Java20Parser::RPAREN);
      setState(2706);
      lambdaExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

Java20Parser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnaryExpressionContext* Java20Parser::MultiplicativeExpressionContext::unaryExpression() {
  return getRuleContext<Java20Parser::UnaryExpressionContext>(0);
}

Java20Parser::MultiplicativeExpressionContext* Java20Parser::MultiplicativeExpressionContext::multiplicativeExpression() {
  return getRuleContext<Java20Parser::MultiplicativeExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::MultiplicativeExpressionContext::MUL() {
  return getToken(Java20Parser::MUL, 0);
}

tree::TerminalNode* Java20Parser::MultiplicativeExpressionContext::DIV() {
  return getToken(Java20Parser::DIV, 0);
}

tree::TerminalNode* Java20Parser::MultiplicativeExpressionContext::MOD() {
  return getToken(Java20Parser::MOD, 0);
}


size_t Java20Parser::MultiplicativeExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleMultiplicativeExpression;
}


std::any Java20Parser::MultiplicativeExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitMultiplicativeExpression(this);
  else
    return visitor->visitChildren(this);
}


Java20Parser::MultiplicativeExpressionContext* Java20Parser::multiplicativeExpression() {
   return multiplicativeExpression(0);
}

Java20Parser::MultiplicativeExpressionContext* Java20Parser::multiplicativeExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java20Parser::MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, parentState);
  Java20Parser::MultiplicativeExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 444;
  enterRecursionRule(_localctx, 444, Java20Parser::RuleMultiplicativeExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2711);
    unaryExpression();
    _ctx->stop = _input->LT(-1);
    setState(2724);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2722);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 332, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<MultiplicativeExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMultiplicativeExpression);
          setState(2713);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2714);
          match(Java20Parser::MUL);
          setState(2715);
          unaryExpression();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<MultiplicativeExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMultiplicativeExpression);
          setState(2716);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2717);
          match(Java20Parser::DIV);
          setState(2718);
          unaryExpression();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<MultiplicativeExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleMultiplicativeExpression);
          setState(2719);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(2720);
          match(Java20Parser::MOD);
          setState(2721);
          unaryExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(2726);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

Java20Parser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::MultiplicativeExpressionContext* Java20Parser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContext<Java20Parser::MultiplicativeExpressionContext>(0);
}

Java20Parser::AdditiveExpressionContext* Java20Parser::AdditiveExpressionContext::additiveExpression() {
  return getRuleContext<Java20Parser::AdditiveExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::AdditiveExpressionContext::ADD() {
  return getToken(Java20Parser::ADD, 0);
}

tree::TerminalNode* Java20Parser::AdditiveExpressionContext::SUB() {
  return getToken(Java20Parser::SUB, 0);
}


size_t Java20Parser::AdditiveExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleAdditiveExpression;
}


std::any Java20Parser::AdditiveExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAdditiveExpression(this);
  else
    return visitor->visitChildren(this);
}


Java20Parser::AdditiveExpressionContext* Java20Parser::additiveExpression() {
   return additiveExpression(0);
}

Java20Parser::AdditiveExpressionContext* Java20Parser::additiveExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java20Parser::AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, parentState);
  Java20Parser::AdditiveExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 446;
  enterRecursionRule(_localctx, 446, Java20Parser::RuleAdditiveExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2728);
    multiplicativeExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2738);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2736);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleAdditiveExpression);
          setState(2730);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2731);
          match(Java20Parser::ADD);
          setState(2732);
          multiplicativeExpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleAdditiveExpression);
          setState(2733);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(2734);
          match(Java20Parser::SUB);
          setState(2735);
          multiplicativeExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2740);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ShiftExpressionContext ------------------------------------------------------------------

Java20Parser::ShiftExpressionContext::ShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AdditiveExpressionContext* Java20Parser::ShiftExpressionContext::additiveExpression() {
  return getRuleContext<Java20Parser::AdditiveExpressionContext>(0);
}

Java20Parser::ShiftExpressionContext* Java20Parser::ShiftExpressionContext::shiftExpression() {
  return getRuleContext<Java20Parser::ShiftExpressionContext>(0);
}

std::vector<tree::TerminalNode *> Java20Parser::ShiftExpressionContext::LT() {
  return getTokens(Java20Parser::LT);
}

tree::TerminalNode* Java20Parser::ShiftExpressionContext::LT(size_t i) {
  return getToken(Java20Parser::LT, i);
}

std::vector<tree::TerminalNode *> Java20Parser::ShiftExpressionContext::GT() {
  return getTokens(Java20Parser::GT);
}

tree::TerminalNode* Java20Parser::ShiftExpressionContext::GT(size_t i) {
  return getToken(Java20Parser::GT, i);
}


size_t Java20Parser::ShiftExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleShiftExpression;
}


std::any Java20Parser::ShiftExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitShiftExpression(this);
  else
    return visitor->visitChildren(this);
}


Java20Parser::ShiftExpressionContext* Java20Parser::shiftExpression() {
   return shiftExpression(0);
}

Java20Parser::ShiftExpressionContext* Java20Parser::shiftExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java20Parser::ShiftExpressionContext *_localctx = _tracker.createInstance<ShiftExpressionContext>(_ctx, parentState);
  Java20Parser::ShiftExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 448;
  enterRecursionRule(_localctx, 448, Java20Parser::RuleShiftExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2742);
    additiveExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2759);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2757);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ShiftExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShiftExpression);
          setState(2744);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2745);
          match(Java20Parser::LT);
          setState(2746);
          match(Java20Parser::LT);
          setState(2747);
          additiveExpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ShiftExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShiftExpression);
          setState(2748);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2749);
          match(Java20Parser::GT);
          setState(2750);
          match(Java20Parser::GT);
          setState(2751);
          additiveExpression(0);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ShiftExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShiftExpression);
          setState(2752);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(2753);
          match(Java20Parser::GT);
          setState(2754);
          match(Java20Parser::GT);
          setState(2755);
          match(Java20Parser::GT);
          setState(2756);
          additiveExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2761);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

Java20Parser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ShiftExpressionContext* Java20Parser::RelationalExpressionContext::shiftExpression() {
  return getRuleContext<Java20Parser::ShiftExpressionContext>(0);
}

Java20Parser::RelationalExpressionContext* Java20Parser::RelationalExpressionContext::relationalExpression() {
  return getRuleContext<Java20Parser::RelationalExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::RelationalExpressionContext::LT() {
  return getToken(Java20Parser::LT, 0);
}

tree::TerminalNode* Java20Parser::RelationalExpressionContext::GT() {
  return getToken(Java20Parser::GT, 0);
}

tree::TerminalNode* Java20Parser::RelationalExpressionContext::LE() {
  return getToken(Java20Parser::LE, 0);
}

tree::TerminalNode* Java20Parser::RelationalExpressionContext::GE() {
  return getToken(Java20Parser::GE, 0);
}

tree::TerminalNode* Java20Parser::RelationalExpressionContext::INSTANCEOF() {
  return getToken(Java20Parser::INSTANCEOF, 0);
}

Java20Parser::ReferenceTypeContext* Java20Parser::RelationalExpressionContext::referenceType() {
  return getRuleContext<Java20Parser::ReferenceTypeContext>(0);
}

Java20Parser::PatternContext* Java20Parser::RelationalExpressionContext::pattern() {
  return getRuleContext<Java20Parser::PatternContext>(0);
}


size_t Java20Parser::RelationalExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleRelationalExpression;
}


std::any Java20Parser::RelationalExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitRelationalExpression(this);
  else
    return visitor->visitChildren(this);
}


Java20Parser::RelationalExpressionContext* Java20Parser::relationalExpression() {
   return relationalExpression(0);
}

Java20Parser::RelationalExpressionContext* Java20Parser::relationalExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java20Parser::RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, parentState);
  Java20Parser::RelationalExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 450;
  enterRecursionRule(_localctx, 450, Java20Parser::RuleRelationalExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2763);
    shiftExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2785);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 340, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2783);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<RelationalExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalExpression);
          setState(2765);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2766);
          match(Java20Parser::LT);
          setState(2767);
          shiftExpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<RelationalExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalExpression);
          setState(2768);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2769);
          match(Java20Parser::GT);
          setState(2770);
          shiftExpression(0);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<RelationalExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalExpression);
          setState(2771);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2772);
          match(Java20Parser::LE);
          setState(2773);
          shiftExpression(0);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<RelationalExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalExpression);
          setState(2774);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2775);
          match(Java20Parser::GE);
          setState(2776);
          shiftExpression(0);
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<RelationalExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleRelationalExpression);
          setState(2777);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(2778);
          match(Java20Parser::INSTANCEOF);
          setState(2781);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx)) {
          case 1: {
            setState(2779);
            referenceType();
            break;
          }

          case 2: {
            setState(2780);
            pattern();
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(2787);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 340, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

Java20Parser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::RelationalExpressionContext* Java20Parser::EqualityExpressionContext::relationalExpression() {
  return getRuleContext<Java20Parser::RelationalExpressionContext>(0);
}

Java20Parser::EqualityExpressionContext* Java20Parser::EqualityExpressionContext::equalityExpression() {
  return getRuleContext<Java20Parser::EqualityExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::EqualityExpressionContext::EQUAL() {
  return getToken(Java20Parser::EQUAL, 0);
}

tree::TerminalNode* Java20Parser::EqualityExpressionContext::NOTEQUAL() {
  return getToken(Java20Parser::NOTEQUAL, 0);
}


size_t Java20Parser::EqualityExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleEqualityExpression;
}


std::any Java20Parser::EqualityExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitEqualityExpression(this);
  else
    return visitor->visitChildren(this);
}


Java20Parser::EqualityExpressionContext* Java20Parser::equalityExpression() {
   return equalityExpression(0);
}

Java20Parser::EqualityExpressionContext* Java20Parser::equalityExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java20Parser::EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, parentState);
  Java20Parser::EqualityExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 452;
  enterRecursionRule(_localctx, 452, Java20Parser::RuleEqualityExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2789);
    relationalExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2799);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2797);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<EqualityExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleEqualityExpression);
          setState(2791);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2792);
          match(Java20Parser::EQUAL);
          setState(2793);
          relationalExpression(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<EqualityExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleEqualityExpression);
          setState(2794);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(2795);
          match(Java20Parser::NOTEQUAL);
          setState(2796);
          relationalExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2801);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AndExpressionContext ------------------------------------------------------------------

Java20Parser::AndExpressionContext::AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::EqualityExpressionContext* Java20Parser::AndExpressionContext::equalityExpression() {
  return getRuleContext<Java20Parser::EqualityExpressionContext>(0);
}

Java20Parser::AndExpressionContext* Java20Parser::AndExpressionContext::andExpression() {
  return getRuleContext<Java20Parser::AndExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::AndExpressionContext::BITAND() {
  return getToken(Java20Parser::BITAND, 0);
}


size_t Java20Parser::AndExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleAndExpression;
}


std::any Java20Parser::AndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAndExpression(this);
  else
    return visitor->visitChildren(this);
}


Java20Parser::AndExpressionContext* Java20Parser::andExpression() {
   return andExpression(0);
}

Java20Parser::AndExpressionContext* Java20Parser::andExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java20Parser::AndExpressionContext *_localctx = _tracker.createInstance<AndExpressionContext>(_ctx, parentState);
  Java20Parser::AndExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 454;
  enterRecursionRule(_localctx, 454, Java20Parser::RuleAndExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2803);
    equalityExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2810);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<AndExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleAndExpression);
        setState(2805);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2806);
        match(Java20Parser::BITAND);
        setState(2807);
        equalityExpression(0); 
      }
      setState(2812);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExclusiveOrExpressionContext ------------------------------------------------------------------

Java20Parser::ExclusiveOrExpressionContext::ExclusiveOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::AndExpressionContext* Java20Parser::ExclusiveOrExpressionContext::andExpression() {
  return getRuleContext<Java20Parser::AndExpressionContext>(0);
}

Java20Parser::ExclusiveOrExpressionContext* Java20Parser::ExclusiveOrExpressionContext::exclusiveOrExpression() {
  return getRuleContext<Java20Parser::ExclusiveOrExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::ExclusiveOrExpressionContext::CARET() {
  return getToken(Java20Parser::CARET, 0);
}


size_t Java20Parser::ExclusiveOrExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleExclusiveOrExpression;
}


std::any Java20Parser::ExclusiveOrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitExclusiveOrExpression(this);
  else
    return visitor->visitChildren(this);
}


Java20Parser::ExclusiveOrExpressionContext* Java20Parser::exclusiveOrExpression() {
   return exclusiveOrExpression(0);
}

Java20Parser::ExclusiveOrExpressionContext* Java20Parser::exclusiveOrExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java20Parser::ExclusiveOrExpressionContext *_localctx = _tracker.createInstance<ExclusiveOrExpressionContext>(_ctx, parentState);
  Java20Parser::ExclusiveOrExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 456;
  enterRecursionRule(_localctx, 456, Java20Parser::RuleExclusiveOrExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2814);
    andExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2821);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ExclusiveOrExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleExclusiveOrExpression);
        setState(2816);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2817);
        match(Java20Parser::CARET);
        setState(2818);
        andExpression(0); 
      }
      setState(2823);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- InclusiveOrExpressionContext ------------------------------------------------------------------

Java20Parser::InclusiveOrExpressionContext::InclusiveOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ExclusiveOrExpressionContext* Java20Parser::InclusiveOrExpressionContext::exclusiveOrExpression() {
  return getRuleContext<Java20Parser::ExclusiveOrExpressionContext>(0);
}

Java20Parser::InclusiveOrExpressionContext* Java20Parser::InclusiveOrExpressionContext::inclusiveOrExpression() {
  return getRuleContext<Java20Parser::InclusiveOrExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::InclusiveOrExpressionContext::BITOR() {
  return getToken(Java20Parser::BITOR, 0);
}


size_t Java20Parser::InclusiveOrExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleInclusiveOrExpression;
}


std::any Java20Parser::InclusiveOrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitInclusiveOrExpression(this);
  else
    return visitor->visitChildren(this);
}


Java20Parser::InclusiveOrExpressionContext* Java20Parser::inclusiveOrExpression() {
   return inclusiveOrExpression(0);
}

Java20Parser::InclusiveOrExpressionContext* Java20Parser::inclusiveOrExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java20Parser::InclusiveOrExpressionContext *_localctx = _tracker.createInstance<InclusiveOrExpressionContext>(_ctx, parentState);
  Java20Parser::InclusiveOrExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 458;
  enterRecursionRule(_localctx, 458, Java20Parser::RuleInclusiveOrExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2825);
    exclusiveOrExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2832);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<InclusiveOrExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleInclusiveOrExpression);
        setState(2827);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2828);
        match(Java20Parser::BITOR);
        setState(2829);
        exclusiveOrExpression(0); 
      }
      setState(2834);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ConditionalAndExpressionContext ------------------------------------------------------------------

Java20Parser::ConditionalAndExpressionContext::ConditionalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::InclusiveOrExpressionContext* Java20Parser::ConditionalAndExpressionContext::inclusiveOrExpression() {
  return getRuleContext<Java20Parser::InclusiveOrExpressionContext>(0);
}

Java20Parser::ConditionalAndExpressionContext* Java20Parser::ConditionalAndExpressionContext::conditionalAndExpression() {
  return getRuleContext<Java20Parser::ConditionalAndExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::ConditionalAndExpressionContext::AND() {
  return getToken(Java20Parser::AND, 0);
}


size_t Java20Parser::ConditionalAndExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleConditionalAndExpression;
}


std::any Java20Parser::ConditionalAndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitConditionalAndExpression(this);
  else
    return visitor->visitChildren(this);
}


Java20Parser::ConditionalAndExpressionContext* Java20Parser::conditionalAndExpression() {
   return conditionalAndExpression(0);
}

Java20Parser::ConditionalAndExpressionContext* Java20Parser::conditionalAndExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java20Parser::ConditionalAndExpressionContext *_localctx = _tracker.createInstance<ConditionalAndExpressionContext>(_ctx, parentState);
  Java20Parser::ConditionalAndExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 460;
  enterRecursionRule(_localctx, 460, Java20Parser::RuleConditionalAndExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2836);
    inclusiveOrExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2843);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ConditionalAndExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleConditionalAndExpression);
        setState(2838);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2839);
        match(Java20Parser::AND);
        setState(2840);
        inclusiveOrExpression(0); 
      }
      setState(2845);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ConditionalOrExpressionContext ------------------------------------------------------------------

Java20Parser::ConditionalOrExpressionContext::ConditionalOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ConditionalAndExpressionContext* Java20Parser::ConditionalOrExpressionContext::conditionalAndExpression() {
  return getRuleContext<Java20Parser::ConditionalAndExpressionContext>(0);
}

Java20Parser::ConditionalOrExpressionContext* Java20Parser::ConditionalOrExpressionContext::conditionalOrExpression() {
  return getRuleContext<Java20Parser::ConditionalOrExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::ConditionalOrExpressionContext::OR() {
  return getToken(Java20Parser::OR, 0);
}


size_t Java20Parser::ConditionalOrExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleConditionalOrExpression;
}


std::any Java20Parser::ConditionalOrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitConditionalOrExpression(this);
  else
    return visitor->visitChildren(this);
}


Java20Parser::ConditionalOrExpressionContext* Java20Parser::conditionalOrExpression() {
   return conditionalOrExpression(0);
}

Java20Parser::ConditionalOrExpressionContext* Java20Parser::conditionalOrExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Java20Parser::ConditionalOrExpressionContext *_localctx = _tracker.createInstance<ConditionalOrExpressionContext>(_ctx, parentState);
  Java20Parser::ConditionalOrExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 462;
  enterRecursionRule(_localctx, 462, Java20Parser::RuleConditionalOrExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2847);
    conditionalAndExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(2854);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ConditionalOrExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleConditionalOrExpression);
        setState(2849);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2850);
        match(Java20Parser::OR);
        setState(2851);
        conditionalAndExpression(0); 
      }
      setState(2856);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

Java20Parser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ConditionalOrExpressionContext* Java20Parser::ConditionalExpressionContext::conditionalOrExpression() {
  return getRuleContext<Java20Parser::ConditionalOrExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::ConditionalExpressionContext::QUESTION() {
  return getToken(Java20Parser::QUESTION, 0);
}

Java20Parser::ExpressionContext* Java20Parser::ConditionalExpressionContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::ConditionalExpressionContext::COLON() {
  return getToken(Java20Parser::COLON, 0);
}

Java20Parser::ConditionalExpressionContext* Java20Parser::ConditionalExpressionContext::conditionalExpression() {
  return getRuleContext<Java20Parser::ConditionalExpressionContext>(0);
}

Java20Parser::LambdaExpressionContext* Java20Parser::ConditionalExpressionContext::lambdaExpression() {
  return getRuleContext<Java20Parser::LambdaExpressionContext>(0);
}


size_t Java20Parser::ConditionalExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleConditionalExpression;
}


std::any Java20Parser::ConditionalExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitConditionalExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ConditionalExpressionContext* Java20Parser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 464, Java20Parser::RuleConditionalExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2870);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2857);
      conditionalOrExpression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2858);
      conditionalOrExpression(0);
      setState(2859);
      match(Java20Parser::QUESTION);
      setState(2860);
      expression();
      setState(2861);
      match(Java20Parser::COLON);
      setState(2862);
      conditionalExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2864);
      conditionalOrExpression(0);
      setState(2865);
      match(Java20Parser::QUESTION);
      setState(2866);
      expression();
      setState(2867);
      match(Java20Parser::COLON);
      setState(2868);
      lambdaExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentExpressionContext ------------------------------------------------------------------

Java20Parser::AssignmentExpressionContext::AssignmentExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ConditionalExpressionContext* Java20Parser::AssignmentExpressionContext::conditionalExpression() {
  return getRuleContext<Java20Parser::ConditionalExpressionContext>(0);
}

Java20Parser::AssignmentContext* Java20Parser::AssignmentExpressionContext::assignment() {
  return getRuleContext<Java20Parser::AssignmentContext>(0);
}


size_t Java20Parser::AssignmentExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleAssignmentExpression;
}


std::any Java20Parser::AssignmentExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAssignmentExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::AssignmentExpressionContext* Java20Parser::assignmentExpression() {
  AssignmentExpressionContext *_localctx = _tracker.createInstance<AssignmentExpressionContext>(_ctx, getState());
  enterRule(_localctx, 466, Java20Parser::RuleAssignmentExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2874);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2872);
      conditionalExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2873);
      assignment();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentContext ------------------------------------------------------------------

Java20Parser::AssignmentContext::AssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::LeftHandSideContext* Java20Parser::AssignmentContext::leftHandSide() {
  return getRuleContext<Java20Parser::LeftHandSideContext>(0);
}

Java20Parser::AssignmentOperatorContext* Java20Parser::AssignmentContext::assignmentOperator() {
  return getRuleContext<Java20Parser::AssignmentOperatorContext>(0);
}

Java20Parser::ExpressionContext* Java20Parser::AssignmentContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}


size_t Java20Parser::AssignmentContext::getRuleIndex() const {
  return Java20Parser::RuleAssignment;
}


std::any Java20Parser::AssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAssignment(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::AssignmentContext* Java20Parser::assignment() {
  AssignmentContext *_localctx = _tracker.createInstance<AssignmentContext>(_ctx, getState());
  enterRule(_localctx, 468, Java20Parser::RuleAssignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2876);
    leftHandSide();
    setState(2877);
    assignmentOperator();
    setState(2878);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LeftHandSideContext ------------------------------------------------------------------

Java20Parser::LeftHandSideContext::LeftHandSideContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ExpressionNameContext* Java20Parser::LeftHandSideContext::expressionName() {
  return getRuleContext<Java20Parser::ExpressionNameContext>(0);
}

Java20Parser::FieldAccessContext* Java20Parser::LeftHandSideContext::fieldAccess() {
  return getRuleContext<Java20Parser::FieldAccessContext>(0);
}

Java20Parser::ArrayAccessContext* Java20Parser::LeftHandSideContext::arrayAccess() {
  return getRuleContext<Java20Parser::ArrayAccessContext>(0);
}


size_t Java20Parser::LeftHandSideContext::getRuleIndex() const {
  return Java20Parser::RuleLeftHandSide;
}


std::any Java20Parser::LeftHandSideContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLeftHandSide(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LeftHandSideContext* Java20Parser::leftHandSide() {
  LeftHandSideContext *_localctx = _tracker.createInstance<LeftHandSideContext>(_ctx, getState());
  enterRule(_localctx, 470, Java20Parser::RuleLeftHandSide);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2883);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 350, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2880);
      expressionName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2881);
      fieldAccess();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2882);
      arrayAccess();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentOperatorContext ------------------------------------------------------------------

Java20Parser::AssignmentOperatorContext::AssignmentOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::AssignmentOperatorContext::ASSIGN() {
  return getToken(Java20Parser::ASSIGN, 0);
}

tree::TerminalNode* Java20Parser::AssignmentOperatorContext::MUL_ASSIGN() {
  return getToken(Java20Parser::MUL_ASSIGN, 0);
}

tree::TerminalNode* Java20Parser::AssignmentOperatorContext::DIV_ASSIGN() {
  return getToken(Java20Parser::DIV_ASSIGN, 0);
}

tree::TerminalNode* Java20Parser::AssignmentOperatorContext::MOD_ASSIGN() {
  return getToken(Java20Parser::MOD_ASSIGN, 0);
}

tree::TerminalNode* Java20Parser::AssignmentOperatorContext::ADD_ASSIGN() {
  return getToken(Java20Parser::ADD_ASSIGN, 0);
}

tree::TerminalNode* Java20Parser::AssignmentOperatorContext::SUB_ASSIGN() {
  return getToken(Java20Parser::SUB_ASSIGN, 0);
}

tree::TerminalNode* Java20Parser::AssignmentOperatorContext::LSHIFT_ASSIGN() {
  return getToken(Java20Parser::LSHIFT_ASSIGN, 0);
}

tree::TerminalNode* Java20Parser::AssignmentOperatorContext::RSHIFT_ASSIGN() {
  return getToken(Java20Parser::RSHIFT_ASSIGN, 0);
}

tree::TerminalNode* Java20Parser::AssignmentOperatorContext::URSHIFT_ASSIGN() {
  return getToken(Java20Parser::URSHIFT_ASSIGN, 0);
}

tree::TerminalNode* Java20Parser::AssignmentOperatorContext::AND_ASSIGN() {
  return getToken(Java20Parser::AND_ASSIGN, 0);
}

tree::TerminalNode* Java20Parser::AssignmentOperatorContext::XOR_ASSIGN() {
  return getToken(Java20Parser::XOR_ASSIGN, 0);
}

tree::TerminalNode* Java20Parser::AssignmentOperatorContext::OR_ASSIGN() {
  return getToken(Java20Parser::OR_ASSIGN, 0);
}


size_t Java20Parser::AssignmentOperatorContext::getRuleIndex() const {
  return Java20Parser::RuleAssignmentOperator;
}


std::any Java20Parser::AssignmentOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitAssignmentOperator(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::AssignmentOperatorContext* Java20Parser::assignmentOperator() {
  AssignmentOperatorContext *_localctx = _tracker.createInstance<AssignmentOperatorContext>(_ctx, getState());
  enterRule(_localctx, 472, Java20Parser::RuleAssignmentOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2885);
    _la = _input->LA(1);
    if (!(((((_la - 88) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 88)) & 34342961153) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaExpressionContext ------------------------------------------------------------------

Java20Parser::LambdaExpressionContext::LambdaExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::LambdaParametersContext* Java20Parser::LambdaExpressionContext::lambdaParameters() {
  return getRuleContext<Java20Parser::LambdaParametersContext>(0);
}

tree::TerminalNode* Java20Parser::LambdaExpressionContext::ARROW() {
  return getToken(Java20Parser::ARROW, 0);
}

Java20Parser::LambdaBodyContext* Java20Parser::LambdaExpressionContext::lambdaBody() {
  return getRuleContext<Java20Parser::LambdaBodyContext>(0);
}


size_t Java20Parser::LambdaExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleLambdaExpression;
}


std::any Java20Parser::LambdaExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLambdaExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LambdaExpressionContext* Java20Parser::lambdaExpression() {
  LambdaExpressionContext *_localctx = _tracker.createInstance<LambdaExpressionContext>(_ctx, getState());
  enterRule(_localctx, 474, Java20Parser::RuleLambdaExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2887);
    lambdaParameters();
    setState(2888);
    match(Java20Parser::ARROW);
    setState(2889);
    lambdaBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaParametersContext ------------------------------------------------------------------

Java20Parser::LambdaParametersContext::LambdaParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::LambdaParametersContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

tree::TerminalNode* Java20Parser::LambdaParametersContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::LambdaParameterListContext* Java20Parser::LambdaParametersContext::lambdaParameterList() {
  return getRuleContext<Java20Parser::LambdaParameterListContext>(0);
}

tree::TerminalNode* Java20Parser::LambdaParametersContext::Identifier() {
  return getToken(Java20Parser::Identifier, 0);
}


size_t Java20Parser::LambdaParametersContext::getRuleIndex() const {
  return Java20Parser::RuleLambdaParameters;
}


std::any Java20Parser::LambdaParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLambdaParameters(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LambdaParametersContext* Java20Parser::lambdaParameters() {
  LambdaParametersContext *_localctx = _tracker.createInstance<LambdaParametersContext>(_ctx, getState());
  enterRule(_localctx, 476, Java20Parser::RuleLambdaParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2897);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::LPAREN: {
        enterOuterAlt(_localctx, 1);
        setState(2891);
        match(Java20Parser::LPAREN);
        setState(2893);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 18102533424709632) != 0) || _la == Java20Parser::AT

        || _la == Java20Parser::Identifier) {
          setState(2892);
          lambdaParameterList();
        }
        setState(2895);
        match(Java20Parser::RPAREN);
        break;
      }

      case Java20Parser::Identifier: {
        enterOuterAlt(_localctx, 2);
        setState(2896);
        match(Java20Parser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaParameterListContext ------------------------------------------------------------------

Java20Parser::LambdaParameterListContext::LambdaParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Java20Parser::LambdaParameterContext *> Java20Parser::LambdaParameterListContext::lambdaParameter() {
  return getRuleContexts<Java20Parser::LambdaParameterContext>();
}

Java20Parser::LambdaParameterContext* Java20Parser::LambdaParameterListContext::lambdaParameter(size_t i) {
  return getRuleContext<Java20Parser::LambdaParameterContext>(i);
}

std::vector<tree::TerminalNode *> Java20Parser::LambdaParameterListContext::COMMA() {
  return getTokens(Java20Parser::COMMA);
}

tree::TerminalNode* Java20Parser::LambdaParameterListContext::COMMA(size_t i) {
  return getToken(Java20Parser::COMMA, i);
}

std::vector<tree::TerminalNode *> Java20Parser::LambdaParameterListContext::Identifier() {
  return getTokens(Java20Parser::Identifier);
}

tree::TerminalNode* Java20Parser::LambdaParameterListContext::Identifier(size_t i) {
  return getToken(Java20Parser::Identifier, i);
}


size_t Java20Parser::LambdaParameterListContext::getRuleIndex() const {
  return Java20Parser::RuleLambdaParameterList;
}


std::any Java20Parser::LambdaParameterListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLambdaParameterList(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LambdaParameterListContext* Java20Parser::lambdaParameterList() {
  LambdaParameterListContext *_localctx = _tracker.createInstance<LambdaParameterListContext>(_ctx, getState());
  enterRule(_localctx, 478, Java20Parser::RuleLambdaParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2915);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2899);
      lambdaParameter();
      setState(2904);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::COMMA) {
        setState(2900);
        match(Java20Parser::COMMA);
        setState(2901);
        lambdaParameter();
        setState(2906);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2907);
      match(Java20Parser::Identifier);
      setState(2912);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::COMMA) {
        setState(2908);
        match(Java20Parser::COMMA);
        setState(2909);
        match(Java20Parser::Identifier);
        setState(2914);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaParameterContext ------------------------------------------------------------------

Java20Parser::LambdaParameterContext::LambdaParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::LambdaParameterTypeContext* Java20Parser::LambdaParameterContext::lambdaParameterType() {
  return getRuleContext<Java20Parser::LambdaParameterTypeContext>(0);
}

Java20Parser::VariableDeclaratorIdContext* Java20Parser::LambdaParameterContext::variableDeclaratorId() {
  return getRuleContext<Java20Parser::VariableDeclaratorIdContext>(0);
}

std::vector<Java20Parser::VariableModifierContext *> Java20Parser::LambdaParameterContext::variableModifier() {
  return getRuleContexts<Java20Parser::VariableModifierContext>();
}

Java20Parser::VariableModifierContext* Java20Parser::LambdaParameterContext::variableModifier(size_t i) {
  return getRuleContext<Java20Parser::VariableModifierContext>(i);
}

Java20Parser::VariableArityParameterContext* Java20Parser::LambdaParameterContext::variableArityParameter() {
  return getRuleContext<Java20Parser::VariableArityParameterContext>(0);
}


size_t Java20Parser::LambdaParameterContext::getRuleIndex() const {
  return Java20Parser::RuleLambdaParameter;
}


std::any Java20Parser::LambdaParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLambdaParameter(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LambdaParameterContext* Java20Parser::lambdaParameter() {
  LambdaParameterContext *_localctx = _tracker.createInstance<LambdaParameterContext>(_ctx, getState());
  enterRule(_localctx, 480, Java20Parser::RuleLambdaParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2927);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 357, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2920);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Java20Parser::FINAL

      || _la == Java20Parser::AT) {
        setState(2917);
        variableModifier();
        setState(2922);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2923);
      lambdaParameterType();
      setState(2924);
      variableDeclaratorId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2926);
      variableArityParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaParameterTypeContext ------------------------------------------------------------------

Java20Parser::LambdaParameterTypeContext::LambdaParameterTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::UnannTypeContext* Java20Parser::LambdaParameterTypeContext::unannType() {
  return getRuleContext<Java20Parser::UnannTypeContext>(0);
}

tree::TerminalNode* Java20Parser::LambdaParameterTypeContext::VAR() {
  return getToken(Java20Parser::VAR, 0);
}


size_t Java20Parser::LambdaParameterTypeContext::getRuleIndex() const {
  return Java20Parser::RuleLambdaParameterType;
}


std::any Java20Parser::LambdaParameterTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLambdaParameterType(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LambdaParameterTypeContext* Java20Parser::lambdaParameterType() {
  LambdaParameterTypeContext *_localctx = _tracker.createInstance<LambdaParameterTypeContext>(_ctx, getState());
  enterRule(_localctx, 482, Java20Parser::RuleLambdaParameterType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2931);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::BOOLEAN:
      case Java20Parser::BYTE:
      case Java20Parser::CHAR:
      case Java20Parser::DOUBLE:
      case Java20Parser::FLOAT:
      case Java20Parser::INT:
      case Java20Parser::LONG:
      case Java20Parser::SHORT:
      case Java20Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(2929);
        unannType();
        break;
      }

      case Java20Parser::VAR: {
        enterOuterAlt(_localctx, 2);
        setState(2930);
        match(Java20Parser::VAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaBodyContext ------------------------------------------------------------------

Java20Parser::LambdaBodyContext::LambdaBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ExpressionContext* Java20Parser::LambdaBodyContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

Java20Parser::BlockContext* Java20Parser::LambdaBodyContext::block() {
  return getRuleContext<Java20Parser::BlockContext>(0);
}


size_t Java20Parser::LambdaBodyContext::getRuleIndex() const {
  return Java20Parser::RuleLambdaBody;
}


std::any Java20Parser::LambdaBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitLambdaBody(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::LambdaBodyContext* Java20Parser::lambdaBody() {
  LambdaBodyContext *_localctx = _tracker.createInstance<LambdaBodyContext>(_ctx, getState());
  enterRule(_localctx, 484, Java20Parser::RuleLambdaBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2935);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Java20Parser::BOOLEAN:
      case Java20Parser::BYTE:
      case Java20Parser::CHAR:
      case Java20Parser::DOUBLE:
      case Java20Parser::FLOAT:
      case Java20Parser::INT:
      case Java20Parser::LONG:
      case Java20Parser::NEW:
      case Java20Parser::SHORT:
      case Java20Parser::SUPER:
      case Java20Parser::SWITCH:
      case Java20Parser::THIS:
      case Java20Parser::VOID:
      case Java20Parser::IntegerLiteral:
      case Java20Parser::FloatingPointLiteral:
      case Java20Parser::BooleanLiteral:
      case Java20Parser::CharacterLiteral:
      case Java20Parser::StringLiteral:
      case Java20Parser::TextBlock:
      case Java20Parser::NullLiteral:
      case Java20Parser::LPAREN:
      case Java20Parser::AT:
      case Java20Parser::BANG:
      case Java20Parser::TILDE:
      case Java20Parser::INC:
      case Java20Parser::DEC:
      case Java20Parser::ADD:
      case Java20Parser::SUB:
      case Java20Parser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(2933);
        expression();
        break;
      }

      case Java20Parser::LBRACE: {
        enterOuterAlt(_localctx, 2);
        setState(2934);
        block();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchExpressionContext ------------------------------------------------------------------

Java20Parser::SwitchExpressionContext::SwitchExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Java20Parser::SwitchExpressionContext::SWITCH() {
  return getToken(Java20Parser::SWITCH, 0);
}

tree::TerminalNode* Java20Parser::SwitchExpressionContext::LPAREN() {
  return getToken(Java20Parser::LPAREN, 0);
}

Java20Parser::ExpressionContext* Java20Parser::SwitchExpressionContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}

tree::TerminalNode* Java20Parser::SwitchExpressionContext::RPAREN() {
  return getToken(Java20Parser::RPAREN, 0);
}

Java20Parser::SwitchBlockContext* Java20Parser::SwitchExpressionContext::switchBlock() {
  return getRuleContext<Java20Parser::SwitchBlockContext>(0);
}


size_t Java20Parser::SwitchExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleSwitchExpression;
}


std::any Java20Parser::SwitchExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitSwitchExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::SwitchExpressionContext* Java20Parser::switchExpression() {
  SwitchExpressionContext *_localctx = _tracker.createInstance<SwitchExpressionContext>(_ctx, getState());
  enterRule(_localctx, 486, Java20Parser::RuleSwitchExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2937);
    match(Java20Parser::SWITCH);
    setState(2938);
    match(Java20Parser::LPAREN);
    setState(2939);
    expression();
    setState(2940);
    match(Java20Parser::RPAREN);
    setState(2941);
    switchBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantExpressionContext ------------------------------------------------------------------

Java20Parser::ConstantExpressionContext::ConstantExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Java20Parser::ExpressionContext* Java20Parser::ConstantExpressionContext::expression() {
  return getRuleContext<Java20Parser::ExpressionContext>(0);
}


size_t Java20Parser::ConstantExpressionContext::getRuleIndex() const {
  return Java20Parser::RuleConstantExpression;
}


std::any Java20Parser::ConstantExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<Java20ParserVisitor*>(visitor))
    return parserVisitor->visitConstantExpression(this);
  else
    return visitor->visitChildren(this);
}

Java20Parser::ConstantExpressionContext* Java20Parser::constantExpression() {
  ConstantExpressionContext *_localctx = _tracker.createInstance<ConstantExpressionContext>(_ctx, getState());
  enterRule(_localctx, 488, Java20Parser::RuleConstantExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2943);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool Java20Parser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 222: return multiplicativeExpressionSempred(antlrcpp::downCast<MultiplicativeExpressionContext *>(context), predicateIndex);
    case 223: return additiveExpressionSempred(antlrcpp::downCast<AdditiveExpressionContext *>(context), predicateIndex);
    case 224: return shiftExpressionSempred(antlrcpp::downCast<ShiftExpressionContext *>(context), predicateIndex);
    case 225: return relationalExpressionSempred(antlrcpp::downCast<RelationalExpressionContext *>(context), predicateIndex);
    case 226: return equalityExpressionSempred(antlrcpp::downCast<EqualityExpressionContext *>(context), predicateIndex);
    case 227: return andExpressionSempred(antlrcpp::downCast<AndExpressionContext *>(context), predicateIndex);
    case 228: return exclusiveOrExpressionSempred(antlrcpp::downCast<ExclusiveOrExpressionContext *>(context), predicateIndex);
    case 229: return inclusiveOrExpressionSempred(antlrcpp::downCast<InclusiveOrExpressionContext *>(context), predicateIndex);
    case 230: return conditionalAndExpressionSempred(antlrcpp::downCast<ConditionalAndExpressionContext *>(context), predicateIndex);
    case 231: return conditionalOrExpressionSempred(antlrcpp::downCast<ConditionalOrExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool Java20Parser::multiplicativeExpressionSempred(MultiplicativeExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 3);
    case 1: return precpred(_ctx, 2);
    case 2: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java20Parser::additiveExpressionSempred(AdditiveExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 2);
    case 4: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java20Parser::shiftExpressionSempred(ShiftExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return precpred(_ctx, 3);
    case 6: return precpred(_ctx, 2);
    case 7: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java20Parser::relationalExpressionSempred(RelationalExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 5);
    case 9: return precpred(_ctx, 4);
    case 10: return precpred(_ctx, 3);
    case 11: return precpred(_ctx, 2);
    case 12: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java20Parser::equalityExpressionSempred(EqualityExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 13: return precpred(_ctx, 2);
    case 14: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java20Parser::andExpressionSempred(AndExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 15: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java20Parser::exclusiveOrExpressionSempred(ExclusiveOrExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 16: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java20Parser::inclusiveOrExpressionSempred(InclusiveOrExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 17: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java20Parser::conditionalAndExpressionSempred(ConditionalAndExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 18: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool Java20Parser::conditionalOrExpressionSempred(ConditionalOrExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 19: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void Java20Parser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  java20parserParserInitialize();
#else
  ::antlr4::internal::call_once(java20parserParserOnceFlag, java20parserParserInitialize);
#endif
}
